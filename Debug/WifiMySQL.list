
WifiMySQL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000392c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08003b1c  08003b1c  00013b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca8  08003ca8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003ca8  08003ca8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ca8  08003ca8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cac  08003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001060  20000010  08003cc0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001070  08003cc0  00021070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f256  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002552  00000000  00000000  0002f28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  000317e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  000325d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d6c  00000000  00000000  00033328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010908  00000000  00000000  0004d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a174  00000000  00000000  0005d99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7b10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003948  00000000  00000000  000f7b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08003b04 	.word	0x08003b04

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08003b04 	.word	0x08003b04

08000230 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	4a06      	ldr	r2, [pc, #24]	; (8000258 <vApplicationGetIdleTaskMemory+0x28>)
 8000240:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	4a05      	ldr	r2, [pc, #20]	; (800025c <vApplicationGetIdleTaskMemory+0x2c>)
 8000246:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2280      	movs	r2, #128	; 0x80
 800024c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	2000002c 	.word	0x2000002c
 800025c:	20000080 	.word	0x20000080

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b5b0      	push	{r4, r5, r7, lr}
 8000262:	b08a      	sub	sp, #40	; 0x28
 8000264:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 faa3 	bl	80007b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f8f3 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 f967 	bl	8000540 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000272:	f000 f95f 	bl	8000534 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000276:	f000 f92f 	bl	80004d8 <MX_I2C1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800027a:	4b14      	ldr	r3, [pc, #80]	; (80002cc <main+0x6c>)
 800027c:	1d3c      	adds	r4, r7, #4
 800027e:	461d      	mov	r5, r3
 8000280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000288:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2100      	movs	r1, #0
 8000290:	4618      	mov	r0, r3
 8000292:	f002 fa1a 	bl	80026ca <osThreadCreate>
 8000296:	4603      	mov	r3, r0
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <main+0x70>)
 800029a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
  xTaskCreate(LED_Task1, "LED_Task1", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 800029c:	2300      	movs	r3, #0
 800029e:	9301      	str	r3, [sp, #4]
 80002a0:	2301      	movs	r3, #1
 80002a2:	9300      	str	r3, [sp, #0]
 80002a4:	2300      	movs	r3, #0
 80002a6:	2280      	movs	r2, #128	; 0x80
 80002a8:	490a      	ldr	r1, [pc, #40]	; (80002d4 <main+0x74>)
 80002aa:	480b      	ldr	r0, [pc, #44]	; (80002d8 <main+0x78>)
 80002ac:	f002 fb78 	bl	80029a0 <xTaskCreate>
  //xTaskCreate(LED_Task2, "LED_Task2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
  xTaskCreate(WifiTask, "WifiTask", WIFI_TASK_STACK_SIZE, NULL, WIFI_TASK_PRIORITY, NULL);
 80002b0:	2300      	movs	r3, #0
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	2301      	movs	r3, #1
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2300      	movs	r3, #0
 80002ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002be:	4907      	ldr	r1, [pc, #28]	; (80002dc <main+0x7c>)
 80002c0:	4807      	ldr	r0, [pc, #28]	; (80002e0 <main+0x80>)
 80002c2:	f002 fb6d 	bl	80029a0 <xTaskCreate>
  /* Start scheduler */
  osKernelStart();
 80002c6:	f002 f9f9 	bl	80026bc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ca:	e7fe      	b.n	80002ca <main+0x6a>
 80002cc:	08003b94 	.word	0x08003b94
 80002d0:	2000031c 	.word	0x2000031c
 80002d4:	08003b7c 	.word	0x08003b7c
 80002d8:	08000421 	.word	0x08000421
 80002dc:	08003b88 	.word	0x08003b88
 80002e0:	080002e5 	.word	0x080002e5

080002e4 <WifiTask>:
      }
  /* USER CODE END 3 */
}

void WifiTask(void *pvParameters)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b0c4      	sub	sp, #272	; 0x110
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80002ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80002f2:	6018      	str	r0, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)"AT+RST\r\n", strlen("AT+RST\r\n"), HAL_MAX_DELAY);
 80002f4:	f04f 33ff 	mov.w	r3, #4294967295
 80002f8:	2208      	movs	r2, #8
 80002fa:	4940      	ldr	r1, [pc, #256]	; (80003fc <WifiTask+0x118>)
 80002fc:	4840      	ldr	r0, [pc, #256]	; (8000400 <WifiTask+0x11c>)
 80002fe:	f001 fbef 	bl	8001ae0 <HAL_UART_Transmit>
  HAL_Delay(2000);
 8000302:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000306:	f000 fab5 	bl	8000874 <HAL_Delay>
  /* WiFi ağına bağlantı kodu */
  HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CWJAP=\"ONDERLIFT_PERSONEL\",\"PersonelOt2022*-\"\r\n", strlen("AT+CWJAP=\"ONDERLIFT_PERSONEL\",\"PersonelOt2022*-\"\r\n"), HAL_MAX_DELAY);
 800030a:	f04f 33ff 	mov.w	r3, #4294967295
 800030e:	2232      	movs	r2, #50	; 0x32
 8000310:	493c      	ldr	r1, [pc, #240]	; (8000404 <WifiTask+0x120>)
 8000312:	483b      	ldr	r0, [pc, #236]	; (8000400 <WifiTask+0x11c>)
 8000314:	f001 fbe4 	bl	8001ae0 <HAL_UART_Transmit>
  HAL_Delay(500);
 8000318:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800031c:	f000 faaa 	bl	8000874 <HAL_Delay>

  HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CIPSTART=0,\"TCP\",\"yst.com.tr\",80\r\n", strlen("AT+CIPSTART=0,\"TCP\",\"yst.com.tr\",80\r\n"), HAL_MAX_DELAY);
 8000320:	f04f 33ff 	mov.w	r3, #4294967295
 8000324:	2225      	movs	r2, #37	; 0x25
 8000326:	4938      	ldr	r1, [pc, #224]	; (8000408 <WifiTask+0x124>)
 8000328:	4835      	ldr	r0, [pc, #212]	; (8000400 <WifiTask+0x11c>)
 800032a:	f001 fbd9 	bl	8001ae0 <HAL_UART_Transmit>
  HAL_Delay(500);
 800032e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000332:	f000 fa9f 	bl	8000874 <HAL_Delay>

  HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CIPSEND=0,43\r\n", strlen("AT+CIPSEND=0,43\r\n"), HAL_MAX_DELAY);
 8000336:	f04f 33ff 	mov.w	r3, #4294967295
 800033a:	2211      	movs	r2, #17
 800033c:	4933      	ldr	r1, [pc, #204]	; (800040c <WifiTask+0x128>)
 800033e:	4830      	ldr	r0, [pc, #192]	; (8000400 <WifiTask+0x11c>)
 8000340:	f001 fbce 	bl	8001ae0 <HAL_UART_Transmit>
  HAL_Delay(500);
 8000344:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000348:	f000 fa94 	bl	8000874 <HAL_Delay>

  HAL_UART_Transmit(&huart1, (uint8_t *)"GET /api/api.php HTTP/1.1\r\nHost: yst.com.tr\r\n\r\n", strlen("GET /api/api.php HTTP/1.1\r\nHost: yst.com.tr\r\n\r\n"), HAL_MAX_DELAY);
 800034c:	f04f 33ff 	mov.w	r3, #4294967295
 8000350:	222f      	movs	r2, #47	; 0x2f
 8000352:	492f      	ldr	r1, [pc, #188]	; (8000410 <WifiTask+0x12c>)
 8000354:	482a      	ldr	r0, [pc, #168]	; (8000400 <WifiTask+0x11c>)
 8000356:	f001 fbc3 	bl	8001ae0 <HAL_UART_Transmit>
  HAL_Delay(500);
 800035a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800035e:	f000 fa89 	bl	8000874 <HAL_Delay>

    /* Cevap alınır */
    char responseBuffer[256];
    memset(responseBuffer, 0, sizeof(responseBuffer));
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800036a:	2100      	movs	r1, #0
 800036c:	4618      	mov	r0, r3
 800036e:	f003 fbab 	bl	8003ac8 <memset>
    //HAL_UART_Receive(&huart1, (uint8_t *)responseBuffer, sizeof(responseBuffer) - 1, HAL_MAX_DELAY);
    uint16_t responseLength = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      while (responseLength < sizeof(responseBuffer) - 1)
 8000378:	e021      	b.n	80003be <WifiTask+0xda>
      {
        // Yanıtın bir parçasını al
        uint16_t bytesRead = HAL_UART_Receive(&huart1, (uint8_t *)(responseBuffer + responseLength), sizeof(responseBuffer) - responseLength - 1, HAL_MAX_DELAY);
 800037a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800037e:	f107 020c 	add.w	r2, r7, #12
 8000382:	18d1      	adds	r1, r2, r3
 8000384:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000388:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800038c:	b29a      	uxth	r2, r3
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
 8000392:	481b      	ldr	r0, [pc, #108]	; (8000400 <WifiTask+0x11c>)
 8000394:	f001 fc27 	bl	8001be6 <HAL_UART_Receive>
 8000398:	4603      	mov	r3, r0
 800039a:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
        responseLength += bytesRead;
 800039e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80003a2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80003a6:	4413      	add	r3, r2
 80003a8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

        // Tam yanıtı alırsan döngüden çık
        if (strstr(responseBuffer, "\r\n\r\n") != NULL)
 80003ac:	f107 030c 	add.w	r3, r7, #12
 80003b0:	4918      	ldr	r1, [pc, #96]	; (8000414 <WifiTask+0x130>)
 80003b2:	4618      	mov	r0, r3
 80003b4:	f003 fb90 	bl	8003ad8 <strstr>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d104      	bne.n	80003c8 <WifiTask+0xe4>
      while (responseLength < sizeof(responseBuffer) - 1)
 80003be:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80003c2:	2bfe      	cmp	r3, #254	; 0xfe
 80003c4:	d9d9      	bls.n	800037a <WifiTask+0x96>
 80003c6:	e000      	b.n	80003ca <WifiTask+0xe6>
        {
          break;
 80003c8:	bf00      	nop
        }
      }

    // Cevap üzerinde yeşil LED kontrolü yapma
    if (strstr(responseBuffer, "\"greenLed\":\"1\"") != NULL)
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	4912      	ldr	r1, [pc, #72]	; (8000418 <WifiTask+0x134>)
 80003d0:	4618      	mov	r0, r3
 80003d2:	f003 fb81 	bl	8003ad8 <strstr>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d005      	beq.n	80003e8 <WifiTask+0x104>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Yeşil LEDi yakma
 80003dc:	2201      	movs	r2, #1
 80003de:	2140      	movs	r1, #64	; 0x40
 80003e0:	480e      	ldr	r0, [pc, #56]	; (800041c <WifiTask+0x138>)
 80003e2:	f000 fe25 	bl	8001030 <HAL_GPIO_WritePin>
 80003e6:	e004      	b.n	80003f2 <WifiTask+0x10e>
    }
    else
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Yeşil LEDi söndürme
 80003e8:	2200      	movs	r2, #0
 80003ea:	2140      	movs	r1, #64	; 0x40
 80003ec:	480b      	ldr	r0, [pc, #44]	; (800041c <WifiTask+0x138>)
 80003ee:	f000 fe1f 	bl	8001030 <HAL_GPIO_WritePin>
    }

    while (1)
    {
      // Taskin serbest bırakılması için yield yapılır
      vTaskDelay(pdMS_TO_TICKS(1000));
 80003f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f6:	f002 fc01 	bl	8002bfc <vTaskDelay>
 80003fa:	e7fa      	b.n	80003f2 <WifiTask+0x10e>
 80003fc:	08003bb0 	.word	0x08003bb0
 8000400:	200002d4 	.word	0x200002d4
 8000404:	08003bbc 	.word	0x08003bbc
 8000408:	08003bf0 	.word	0x08003bf0
 800040c:	08003c18 	.word	0x08003c18
 8000410:	08003c2c 	.word	0x08003c2c
 8000414:	08003c5c 	.word	0x08003c5c
 8000418:	08003c64 	.word	0x08003c64
 800041c:	40010c00 	.word	0x40010c00

08000420 <LED_Task1>:
    }
}

void LED_Task1(void *pvParameters)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  while (1)
  {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000428:	2201      	movs	r2, #1
 800042a:	2120      	movs	r1, #32
 800042c:	4808      	ldr	r0, [pc, #32]	; (8000450 <LED_Task1+0x30>)
 800042e:	f000 fdff 	bl	8001030 <HAL_GPIO_WritePin>

    vTaskDelay(pdMS_TO_TICKS(500));
 8000432:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000436:	f002 fbe1 	bl	8002bfc <vTaskDelay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2120      	movs	r1, #32
 800043e:	4804      	ldr	r0, [pc, #16]	; (8000450 <LED_Task1+0x30>)
 8000440:	f000 fdf6 	bl	8001030 <HAL_GPIO_WritePin>

    vTaskDelay(pdMS_TO_TICKS(500));
 8000444:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000448:	f002 fbd8 	bl	8002bfc <vTaskDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800044c:	e7ec      	b.n	8000428 <LED_Task1+0x8>
 800044e:	bf00      	nop
 8000450:	40010c00 	.word	0x40010c00

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b090      	sub	sp, #64	; 0x40
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	2228      	movs	r2, #40	; 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f003 fb30 	bl	8003ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	2302      	movs	r3, #2
 8000478:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047a:	2301      	movs	r3, #1
 800047c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047e:	2310      	movs	r3, #16
 8000480:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000482:	2302      	movs	r3, #2
 8000484:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000486:	2300      	movs	r3, #0
 8000488:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800048a:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 800048e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000490:	f107 0318 	add.w	r3, r7, #24
 8000494:	4618      	mov	r0, r3
 8000496:	f000 ff27 	bl	80012e8 <HAL_RCC_OscConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004a0:	f000 f8a0 	bl	80005e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a4:	230f      	movs	r3, #15
 80004a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a8:	2302      	movs	r3, #2
 80004aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f001 f994 	bl	80017ec <HAL_RCC_ClockConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004ca:	f000 f88b 	bl	80005e4 <Error_Handler>
  }
}
 80004ce:	bf00      	nop
 80004d0:	3740      	adds	r7, #64	; 0x40
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <MX_I2C1_Init+0x50>)
 80004de:	4a13      	ldr	r2, [pc, #76]	; (800052c <MX_I2C1_Init+0x54>)
 80004e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <MX_I2C1_Init+0x50>)
 80004e4:	4a12      	ldr	r2, [pc, #72]	; (8000530 <MX_I2C1_Init+0x58>)
 80004e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <MX_I2C1_Init+0x50>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <MX_I2C1_Init+0x50>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <MX_I2C1_Init+0x50>)
 80004f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <MX_I2C1_Init+0x50>)
 80004fe:	2200      	movs	r2, #0
 8000500:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MX_I2C1_Init+0x50>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <MX_I2C1_Init+0x50>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_I2C1_Init+0x50>)
 8000510:	2200      	movs	r2, #0
 8000512:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <MX_I2C1_Init+0x50>)
 8000516:	f000 fda3 	bl	8001060 <HAL_I2C_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000520:	f000 f860 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000280 	.word	0x20000280
 800052c:	40005400 	.word	0x40005400
 8000530:	000186a0 	.word	0x000186a0

08000534 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  }*/
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <MX_GPIO_Init+0x8c>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <MX_GPIO_Init+0x8c>)
 800055a:	f043 0320 	orr.w	r3, r3, #32
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <MX_GPIO_Init+0x8c>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0320 	and.w	r3, r3, #32
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_GPIO_Init+0x8c>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a16      	ldr	r2, [pc, #88]	; (80005cc <MX_GPIO_Init+0x8c>)
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_GPIO_Init+0x8c>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_GPIO_Init+0x8c>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a10      	ldr	r2, [pc, #64]	; (80005cc <MX_GPIO_Init+0x8c>)
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_GPIO_Init+0x8c>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, redLed_Pin|greenLed_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2160      	movs	r1, #96	; 0x60
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <MX_GPIO_Init+0x90>)
 80005a2:	f000 fd45 	bl	8001030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : redLed_Pin greenLed_Pin */
  GPIO_InitStruct.Pin = redLed_Pin|greenLed_Pin;
 80005a6:	2360      	movs	r3, #96	; 0x60
 80005a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	4619      	mov	r1, r3
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <MX_GPIO_Init+0x90>)
 80005be:	f000 fba3 	bl	8000d08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005c2:	bf00      	nop
 80005c4:	3720      	adds	r7, #32
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40010c00 	.word	0x40010c00

080005d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005dc:	2001      	movs	r0, #1
 80005de:	f002 f8c0 	bl	8002762 <osDelay>
 80005e2:	e7fb      	b.n	80005dc <StartDefaultTask+0x8>

080005e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
}
 80005ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ec:	e7fe      	b.n	80005ec <Error_Handler+0x8>
	...

080005f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <HAL_MspInit+0x68>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4a17      	ldr	r2, [pc, #92]	; (8000658 <HAL_MspInit+0x68>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6193      	str	r3, [r2, #24]
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <HAL_MspInit+0x68>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_MspInit+0x68>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a11      	ldr	r2, [pc, #68]	; (8000658 <HAL_MspInit+0x68>)
 8000614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000618:	61d3      	str	r3, [r2, #28]
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <HAL_MspInit+0x68>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	210f      	movs	r1, #15
 800062a:	f06f 0001 	mvn.w	r0, #1
 800062e:	f000 fa00 	bl	8000a32 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_MspInit+0x6c>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <HAL_MspInit+0x6c>)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	40010000 	.word	0x40010000

08000660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a1d      	ldr	r2, [pc, #116]	; (80006f0 <HAL_I2C_MspInit+0x90>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d132      	bne.n	80006e6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <HAL_I2C_MspInit+0x94>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <HAL_I2C_MspInit+0x94>)
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <HAL_I2C_MspInit+0x94>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0308 	and.w	r3, r3, #8
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000698:	f44f 7340 	mov.w	r3, #768	; 0x300
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800069e:	2312      	movs	r3, #18
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4812      	ldr	r0, [pc, #72]	; (80006f8 <HAL_I2C_MspInit+0x98>)
 80006ae:	f000 fb2b 	bl	8000d08 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_I2C_MspInit+0x9c>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
 80006b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
 80006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
 80006c8:	4a0c      	ldr	r2, [pc, #48]	; (80006fc <HAL_I2C_MspInit+0x9c>)
 80006ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006cc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <HAL_I2C_MspInit+0x94>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <HAL_I2C_MspInit+0x94>)
 80006d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_I2C_MspInit+0x94>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40005400 	.word	0x40005400
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40010c00 	.word	0x40010c00
 80006fc:	40010000 	.word	0x40010000

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <NMI_Handler+0x4>

08000706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <MemManage_Handler+0x4>

08000712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <UsageFault_Handler+0x4>

0800071e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072e:	f000 f885 	bl	800083c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000732:	f002 fd93 	bl	800325c <xTaskGetSchedulerState>
 8000736:	4603      	mov	r3, r0
 8000738:	2b01      	cmp	r3, #1
 800073a:	d001      	beq.n	8000740 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800073c:	f002 ff84 	bl	8003648 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <USART1_IRQHandler+0x10>)
 800074a:	f001 fadf 	bl	8001d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200002d4 	.word	0x200002d4

08000758 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000764:	f7ff fff8 	bl	8000758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000768:	480b      	ldr	r0, [pc, #44]	; (8000798 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800076a:	490c      	ldr	r1, [pc, #48]	; (800079c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800076c:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000770:	e002      	b.n	8000778 <LoopCopyDataInit>

08000772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000776:	3304      	adds	r3, #4

08000778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800077c:	d3f9      	bcc.n	8000772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077e:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000780:	4c09      	ldr	r4, [pc, #36]	; (80007a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000784:	e001      	b.n	800078a <LoopFillZerobss>

08000786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000788:	3204      	adds	r2, #4

0800078a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800078c:	d3fb      	bcc.n	8000786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800078e:	f003 f977 	bl	8003a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000792:	f7ff fd65 	bl	8000260 <main>
  bx lr
 8000796:	4770      	bx	lr
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007a0:	08003cb0 	.word	0x08003cb0
  ldr r2, =_sbss
 80007a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007a8:	20001070 	.word	0x20001070

080007ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC1_2_IRQHandler>
	...

080007b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_Init+0x28>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <HAL_Init+0x28>)
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c0:	2003      	movs	r0, #3
 80007c2:	f000 f92b 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c6:	200f      	movs	r0, #15
 80007c8:	f000 f808 	bl	80007dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007cc:	f7ff ff10 	bl	80005f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40022000 	.word	0x40022000

080007dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_InitTick+0x54>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_InitTick+0x58>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f935 	bl	8000a6a <HAL_SYSTICK_Config>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	e00e      	b.n	8000828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b0f      	cmp	r3, #15
 800080e:	d80a      	bhi.n	8000826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000810:	2200      	movs	r2, #0
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f000 f90b 	bl	8000a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800081c:	4a06      	ldr	r2, [pc, #24]	; (8000838 <HAL_InitTick+0x5c>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000822:	2300      	movs	r3, #0
 8000824:	e000      	b.n	8000828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000000 	.word	0x20000000
 8000834:	20000008 	.word	0x20000008
 8000838:	20000004 	.word	0x20000004

0800083c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_IncTick+0x1c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x20>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a03      	ldr	r2, [pc, #12]	; (800085c <HAL_IncTick+0x20>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	20000008 	.word	0x20000008
 800085c:	20000320 	.word	0x20000320

08000860 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return uwTick;
 8000864:	4b02      	ldr	r3, [pc, #8]	; (8000870 <HAL_GetTick+0x10>)
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	20000320 	.word	0x20000320

08000874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800087c:	f7ff fff0 	bl	8000860 <HAL_GetTick>
 8000880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800088c:	d005      	beq.n	800089a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <HAL_Delay+0x44>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4413      	add	r3, r2
 8000898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800089a:	bf00      	nop
 800089c:	f7ff ffe0 	bl	8000860 <HAL_GetTick>
 80008a0:	4602      	mov	r2, r0
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d8f7      	bhi.n	800089c <HAL_Delay+0x28>
  {
  }
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000008 	.word	0x20000008

080008bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <__NVIC_SetPriorityGrouping+0x44>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ee:	4a04      	ldr	r2, [pc, #16]	; (8000900 <__NVIC_SetPriorityGrouping+0x44>)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	60d3      	str	r3, [r2, #12]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <__NVIC_GetPriorityGrouping+0x18>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	f003 0307 	and.w	r3, r3, #7
}
 8000912:	4618      	mov	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	db0a      	blt.n	800094a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	490c      	ldr	r1, [pc, #48]	; (800096c <__NVIC_SetPriority+0x4c>)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	0112      	lsls	r2, r2, #4
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	440b      	add	r3, r1
 8000944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000948:	e00a      	b.n	8000960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4908      	ldr	r1, [pc, #32]	; (8000970 <__NVIC_SetPriority+0x50>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	3b04      	subs	r3, #4
 8000958:	0112      	lsls	r2, r2, #4
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	440b      	add	r3, r1
 800095e:	761a      	strb	r2, [r3, #24]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f1c3 0307 	rsb	r3, r3, #7
 800098e:	2b04      	cmp	r3, #4
 8000990:	bf28      	it	cs
 8000992:	2304      	movcs	r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3304      	adds	r3, #4
 800099a:	2b06      	cmp	r3, #6
 800099c:	d902      	bls.n	80009a4 <NVIC_EncodePriority+0x30>
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3b03      	subs	r3, #3
 80009a2:	e000      	b.n	80009a6 <NVIC_EncodePriority+0x32>
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43da      	mvns	r2, r3
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009bc:	f04f 31ff 	mov.w	r1, #4294967295
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	43d9      	mvns	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	4313      	orrs	r3, r2
         );
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3724      	adds	r7, #36	; 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009e8:	d301      	bcc.n	80009ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00f      	b.n	8000a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <SysTick_Config+0x40>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f6:	210f      	movs	r1, #15
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f7ff ff90 	bl	8000920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <SysTick_Config+0x40>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <SysTick_Config+0x40>)
 8000a08:	2207      	movs	r2, #7
 8000a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	e000e010 	.word	0xe000e010

08000a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff49 	bl	80008bc <__NVIC_SetPriorityGrouping>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a44:	f7ff ff5e 	bl	8000904 <__NVIC_GetPriorityGrouping>
 8000a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	68b9      	ldr	r1, [r7, #8]
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff ff90 	bl	8000974 <NVIC_EncodePriority>
 8000a54:	4602      	mov	r2, r0
 8000a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff5f 	bl	8000920 <__NVIC_SetPriority>
}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff ffb0 	bl	80009d8 <SysTick_Config>
 8000a78:	4603      	mov	r3, r0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b085      	sub	sp, #20
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d008      	beq.n	8000aac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e020      	b.n	8000aee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f022 020e 	bic.w	r2, r2, #14
 8000aba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f022 0201 	bic.w	r2, r2, #1
 8000aca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ada:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d005      	beq.n	8000b1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2204      	movs	r2, #4
 8000b14:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	e0d6      	b.n	8000cca <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f022 020e 	bic.w	r2, r2, #14
 8000b2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f022 0201 	bic.w	r2, r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b64      	ldr	r3, [pc, #400]	; (8000cd4 <HAL_DMA_Abort_IT+0x1dc>)
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d958      	bls.n	8000bfa <HAL_DMA_Abort_IT+0x102>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a62      	ldr	r2, [pc, #392]	; (8000cd8 <HAL_DMA_Abort_IT+0x1e0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d04f      	beq.n	8000bf2 <HAL_DMA_Abort_IT+0xfa>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a61      	ldr	r2, [pc, #388]	; (8000cdc <HAL_DMA_Abort_IT+0x1e4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d048      	beq.n	8000bee <HAL_DMA_Abort_IT+0xf6>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a5f      	ldr	r2, [pc, #380]	; (8000ce0 <HAL_DMA_Abort_IT+0x1e8>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d040      	beq.n	8000be8 <HAL_DMA_Abort_IT+0xf0>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a5e      	ldr	r2, [pc, #376]	; (8000ce4 <HAL_DMA_Abort_IT+0x1ec>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d038      	beq.n	8000be2 <HAL_DMA_Abort_IT+0xea>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a5c      	ldr	r2, [pc, #368]	; (8000ce8 <HAL_DMA_Abort_IT+0x1f0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d030      	beq.n	8000bdc <HAL_DMA_Abort_IT+0xe4>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a5b      	ldr	r2, [pc, #364]	; (8000cec <HAL_DMA_Abort_IT+0x1f4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d028      	beq.n	8000bd6 <HAL_DMA_Abort_IT+0xde>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a52      	ldr	r2, [pc, #328]	; (8000cd4 <HAL_DMA_Abort_IT+0x1dc>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d020      	beq.n	8000bd0 <HAL_DMA_Abort_IT+0xd8>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a57      	ldr	r2, [pc, #348]	; (8000cf0 <HAL_DMA_Abort_IT+0x1f8>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d019      	beq.n	8000bcc <HAL_DMA_Abort_IT+0xd4>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a55      	ldr	r2, [pc, #340]	; (8000cf4 <HAL_DMA_Abort_IT+0x1fc>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d012      	beq.n	8000bc8 <HAL_DMA_Abort_IT+0xd0>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a54      	ldr	r2, [pc, #336]	; (8000cf8 <HAL_DMA_Abort_IT+0x200>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d00a      	beq.n	8000bc2 <HAL_DMA_Abort_IT+0xca>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a52      	ldr	r2, [pc, #328]	; (8000cfc <HAL_DMA_Abort_IT+0x204>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d102      	bne.n	8000bbc <HAL_DMA_Abort_IT+0xc4>
 8000bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bba:	e01b      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xfc>
 8000bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc0:	e018      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xfc>
 8000bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc6:	e015      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xfc>
 8000bc8:	2310      	movs	r3, #16
 8000bca:	e013      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xfc>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e011      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xfc>
 8000bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bd4:	e00e      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xfc>
 8000bd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bda:	e00b      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xfc>
 8000bdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be0:	e008      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xfc>
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	e005      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xfc>
 8000be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bec:	e002      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xfc>
 8000bee:	2310      	movs	r3, #16
 8000bf0:	e000      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xfc>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	4a42      	ldr	r2, [pc, #264]	; (8000d00 <HAL_DMA_Abort_IT+0x208>)
 8000bf6:	6053      	str	r3, [r2, #4]
 8000bf8:	e057      	b.n	8000caa <HAL_DMA_Abort_IT+0x1b2>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a36      	ldr	r2, [pc, #216]	; (8000cd8 <HAL_DMA_Abort_IT+0x1e0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d04f      	beq.n	8000ca4 <HAL_DMA_Abort_IT+0x1ac>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a34      	ldr	r2, [pc, #208]	; (8000cdc <HAL_DMA_Abort_IT+0x1e4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d048      	beq.n	8000ca0 <HAL_DMA_Abort_IT+0x1a8>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a33      	ldr	r2, [pc, #204]	; (8000ce0 <HAL_DMA_Abort_IT+0x1e8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d040      	beq.n	8000c9a <HAL_DMA_Abort_IT+0x1a2>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a31      	ldr	r2, [pc, #196]	; (8000ce4 <HAL_DMA_Abort_IT+0x1ec>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d038      	beq.n	8000c94 <HAL_DMA_Abort_IT+0x19c>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a30      	ldr	r2, [pc, #192]	; (8000ce8 <HAL_DMA_Abort_IT+0x1f0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d030      	beq.n	8000c8e <HAL_DMA_Abort_IT+0x196>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a2e      	ldr	r2, [pc, #184]	; (8000cec <HAL_DMA_Abort_IT+0x1f4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d028      	beq.n	8000c88 <HAL_DMA_Abort_IT+0x190>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a26      	ldr	r2, [pc, #152]	; (8000cd4 <HAL_DMA_Abort_IT+0x1dc>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d020      	beq.n	8000c82 <HAL_DMA_Abort_IT+0x18a>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a2a      	ldr	r2, [pc, #168]	; (8000cf0 <HAL_DMA_Abort_IT+0x1f8>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d019      	beq.n	8000c7e <HAL_DMA_Abort_IT+0x186>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <HAL_DMA_Abort_IT+0x1fc>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d012      	beq.n	8000c7a <HAL_DMA_Abort_IT+0x182>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <HAL_DMA_Abort_IT+0x200>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d00a      	beq.n	8000c74 <HAL_DMA_Abort_IT+0x17c>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a26      	ldr	r2, [pc, #152]	; (8000cfc <HAL_DMA_Abort_IT+0x204>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d102      	bne.n	8000c6e <HAL_DMA_Abort_IT+0x176>
 8000c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6c:	e01b      	b.n	8000ca6 <HAL_DMA_Abort_IT+0x1ae>
 8000c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c72:	e018      	b.n	8000ca6 <HAL_DMA_Abort_IT+0x1ae>
 8000c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c78:	e015      	b.n	8000ca6 <HAL_DMA_Abort_IT+0x1ae>
 8000c7a:	2310      	movs	r3, #16
 8000c7c:	e013      	b.n	8000ca6 <HAL_DMA_Abort_IT+0x1ae>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e011      	b.n	8000ca6 <HAL_DMA_Abort_IT+0x1ae>
 8000c82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c86:	e00e      	b.n	8000ca6 <HAL_DMA_Abort_IT+0x1ae>
 8000c88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c8c:	e00b      	b.n	8000ca6 <HAL_DMA_Abort_IT+0x1ae>
 8000c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c92:	e008      	b.n	8000ca6 <HAL_DMA_Abort_IT+0x1ae>
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	e005      	b.n	8000ca6 <HAL_DMA_Abort_IT+0x1ae>
 8000c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9e:	e002      	b.n	8000ca6 <HAL_DMA_Abort_IT+0x1ae>
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	e000      	b.n	8000ca6 <HAL_DMA_Abort_IT+0x1ae>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <HAL_DMA_Abort_IT+0x20c>)
 8000ca8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2201      	movs	r2, #1
 8000cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	4798      	blx	r3
    } 
  }
  return status;
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40020080 	.word	0x40020080
 8000cd8:	40020008 	.word	0x40020008
 8000cdc:	4002001c 	.word	0x4002001c
 8000ce0:	40020030 	.word	0x40020030
 8000ce4:	40020044 	.word	0x40020044
 8000ce8:	40020058 	.word	0x40020058
 8000cec:	4002006c 	.word	0x4002006c
 8000cf0:	40020408 	.word	0x40020408
 8000cf4:	4002041c 	.word	0x4002041c
 8000cf8:	40020430 	.word	0x40020430
 8000cfc:	40020444 	.word	0x40020444
 8000d00:	40020400 	.word	0x40020400
 8000d04:	40020000 	.word	0x40020000

08000d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b08b      	sub	sp, #44	; 0x2c
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1a:	e179      	b.n	8001010 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	69fa      	ldr	r2, [r7, #28]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	f040 8168 	bne.w	800100a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	4a96      	ldr	r2, [pc, #600]	; (8000f98 <HAL_GPIO_Init+0x290>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d05e      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d44:	4a94      	ldr	r2, [pc, #592]	; (8000f98 <HAL_GPIO_Init+0x290>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d875      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d4a:	4a94      	ldr	r2, [pc, #592]	; (8000f9c <HAL_GPIO_Init+0x294>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d058      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d50:	4a92      	ldr	r2, [pc, #584]	; (8000f9c <HAL_GPIO_Init+0x294>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d86f      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d56:	4a92      	ldr	r2, [pc, #584]	; (8000fa0 <HAL_GPIO_Init+0x298>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d052      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d5c:	4a90      	ldr	r2, [pc, #576]	; (8000fa0 <HAL_GPIO_Init+0x298>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d869      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d62:	4a90      	ldr	r2, [pc, #576]	; (8000fa4 <HAL_GPIO_Init+0x29c>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d04c      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d68:	4a8e      	ldr	r2, [pc, #568]	; (8000fa4 <HAL_GPIO_Init+0x29c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d863      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d6e:	4a8e      	ldr	r2, [pc, #568]	; (8000fa8 <HAL_GPIO_Init+0x2a0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d046      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d74:	4a8c      	ldr	r2, [pc, #560]	; (8000fa8 <HAL_GPIO_Init+0x2a0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d85d      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d7a:	2b12      	cmp	r3, #18
 8000d7c:	d82a      	bhi.n	8000dd4 <HAL_GPIO_Init+0xcc>
 8000d7e:	2b12      	cmp	r3, #18
 8000d80:	d859      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d82:	a201      	add	r2, pc, #4	; (adr r2, 8000d88 <HAL_GPIO_Init+0x80>)
 8000d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d88:	08000e03 	.word	0x08000e03
 8000d8c:	08000ddd 	.word	0x08000ddd
 8000d90:	08000def 	.word	0x08000def
 8000d94:	08000e31 	.word	0x08000e31
 8000d98:	08000e37 	.word	0x08000e37
 8000d9c:	08000e37 	.word	0x08000e37
 8000da0:	08000e37 	.word	0x08000e37
 8000da4:	08000e37 	.word	0x08000e37
 8000da8:	08000e37 	.word	0x08000e37
 8000dac:	08000e37 	.word	0x08000e37
 8000db0:	08000e37 	.word	0x08000e37
 8000db4:	08000e37 	.word	0x08000e37
 8000db8:	08000e37 	.word	0x08000e37
 8000dbc:	08000e37 	.word	0x08000e37
 8000dc0:	08000e37 	.word	0x08000e37
 8000dc4:	08000e37 	.word	0x08000e37
 8000dc8:	08000e37 	.word	0x08000e37
 8000dcc:	08000de5 	.word	0x08000de5
 8000dd0:	08000df9 	.word	0x08000df9
 8000dd4:	4a75      	ldr	r2, [pc, #468]	; (8000fac <HAL_GPIO_Init+0x2a4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d013      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dda:	e02c      	b.n	8000e36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	623b      	str	r3, [r7, #32]
          break;
 8000de2:	e029      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	3304      	adds	r3, #4
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	e024      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	3308      	adds	r3, #8
 8000df4:	623b      	str	r3, [r7, #32]
          break;
 8000df6:	e01f      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	330c      	adds	r3, #12
 8000dfe:	623b      	str	r3, [r7, #32]
          break;
 8000e00:	e01a      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d102      	bne.n	8000e10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	623b      	str	r3, [r7, #32]
          break;
 8000e0e:	e013      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d105      	bne.n	8000e24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	611a      	str	r2, [r3, #16]
          break;
 8000e22:	e009      	b.n	8000e38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e24:	2308      	movs	r3, #8
 8000e26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69fa      	ldr	r2, [r7, #28]
 8000e2c:	615a      	str	r2, [r3, #20]
          break;
 8000e2e:	e003      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	e000      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          break;
 8000e36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	2bff      	cmp	r3, #255	; 0xff
 8000e3c:	d801      	bhi.n	8000e42 <HAL_GPIO_Init+0x13a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	e001      	b.n	8000e46 <HAL_GPIO_Init+0x13e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3304      	adds	r3, #4
 8000e46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2bff      	cmp	r3, #255	; 0xff
 8000e4c:	d802      	bhi.n	8000e54 <HAL_GPIO_Init+0x14c>
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	e002      	b.n	8000e5a <HAL_GPIO_Init+0x152>
 8000e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e56:	3b08      	subs	r3, #8
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	210f      	movs	r1, #15
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	6a39      	ldr	r1, [r7, #32]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	431a      	orrs	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 80c1 	beq.w	800100a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e88:	4b49      	ldr	r3, [pc, #292]	; (8000fb0 <HAL_GPIO_Init+0x2a8>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a48      	ldr	r2, [pc, #288]	; (8000fb0 <HAL_GPIO_Init+0x2a8>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <HAL_GPIO_Init+0x2a8>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ea0:	4a44      	ldr	r2, [pc, #272]	; (8000fb4 <HAL_GPIO_Init+0x2ac>)
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a3c      	ldr	r2, [pc, #240]	; (8000fb8 <HAL_GPIO_Init+0x2b0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d01f      	beq.n	8000f0c <HAL_GPIO_Init+0x204>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a3b      	ldr	r2, [pc, #236]	; (8000fbc <HAL_GPIO_Init+0x2b4>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d019      	beq.n	8000f08 <HAL_GPIO_Init+0x200>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a3a      	ldr	r2, [pc, #232]	; (8000fc0 <HAL_GPIO_Init+0x2b8>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d013      	beq.n	8000f04 <HAL_GPIO_Init+0x1fc>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a39      	ldr	r2, [pc, #228]	; (8000fc4 <HAL_GPIO_Init+0x2bc>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d00d      	beq.n	8000f00 <HAL_GPIO_Init+0x1f8>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a38      	ldr	r2, [pc, #224]	; (8000fc8 <HAL_GPIO_Init+0x2c0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d007      	beq.n	8000efc <HAL_GPIO_Init+0x1f4>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a37      	ldr	r2, [pc, #220]	; (8000fcc <HAL_GPIO_Init+0x2c4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d101      	bne.n	8000ef8 <HAL_GPIO_Init+0x1f0>
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	e00a      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000ef8:	2306      	movs	r3, #6
 8000efa:	e008      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000efc:	2304      	movs	r3, #4
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000f00:	2303      	movs	r3, #3
 8000f02:	e004      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f10:	f002 0203 	and.w	r2, r2, #3
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	4093      	lsls	r3, r2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f1e:	4925      	ldr	r1, [pc, #148]	; (8000fb4 <HAL_GPIO_Init+0x2ac>)
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d006      	beq.n	8000f46 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f38:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	4924      	ldr	r1, [pc, #144]	; (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	608b      	str	r3, [r1, #8]
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f46:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	4920      	ldr	r1, [pc, #128]	; (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f50:	4013      	ands	r3, r2
 8000f52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d006      	beq.n	8000f6e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	491a      	ldr	r1, [pc, #104]	; (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	60cb      	str	r3, [r1, #12]
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	4916      	ldr	r1, [pc, #88]	; (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d025      	beq.n	8000fd4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	4910      	ldr	r1, [pc, #64]	; (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
 8000f94:	e025      	b.n	8000fe2 <HAL_GPIO_Init+0x2da>
 8000f96:	bf00      	nop
 8000f98:	10320000 	.word	0x10320000
 8000f9c:	10310000 	.word	0x10310000
 8000fa0:	10220000 	.word	0x10220000
 8000fa4:	10210000 	.word	0x10210000
 8000fa8:	10120000 	.word	0x10120000
 8000fac:	10110000 	.word	0x10110000
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010000 	.word	0x40010000
 8000fb8:	40010800 	.word	0x40010800
 8000fbc:	40010c00 	.word	0x40010c00
 8000fc0:	40011000 	.word	0x40011000
 8000fc4:	40011400 	.word	0x40011400
 8000fc8:	40011800 	.word	0x40011800
 8000fcc:	40011c00 	.word	0x40011c00
 8000fd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_GPIO_Init+0x324>)
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	4913      	ldr	r1, [pc, #76]	; (800102c <HAL_GPIO_Init+0x324>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d006      	beq.n	8000ffc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_GPIO_Init+0x324>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	490e      	ldr	r1, [pc, #56]	; (800102c <HAL_GPIO_Init+0x324>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
 8000ffa:	e006      	b.n	800100a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <HAL_GPIO_Init+0x324>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	43db      	mvns	r3, r3
 8001004:	4909      	ldr	r1, [pc, #36]	; (800102c <HAL_GPIO_Init+0x324>)
 8001006:	4013      	ands	r3, r2
 8001008:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	3301      	adds	r3, #1
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	fa22 f303 	lsr.w	r3, r2, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	f47f ae7e 	bne.w	8000d1c <HAL_GPIO_Init+0x14>
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	372c      	adds	r7, #44	; 0x2c
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40010400 	.word	0x40010400

08001030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
 800103c:	4613      	mov	r3, r2
 800103e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001040:	787b      	ldrb	r3, [r7, #1]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800104c:	e003      	b.n	8001056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	041a      	lsls	r2, r3, #16
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	611a      	str	r2, [r3, #16]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e12b      	b.n	80012ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d106      	bne.n	800108c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff faea 	bl	8000660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2224      	movs	r2, #36	; 0x24
 8001090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010c4:	f000 fcda 	bl	8001a7c <HAL_RCC_GetPCLK1Freq>
 80010c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	4a81      	ldr	r2, [pc, #516]	; (80012d4 <HAL_I2C_Init+0x274>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d807      	bhi.n	80010e4 <HAL_I2C_Init+0x84>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4a80      	ldr	r2, [pc, #512]	; (80012d8 <HAL_I2C_Init+0x278>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	bf94      	ite	ls
 80010dc:	2301      	movls	r3, #1
 80010de:	2300      	movhi	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	e006      	b.n	80010f2 <HAL_I2C_Init+0x92>
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4a7d      	ldr	r2, [pc, #500]	; (80012dc <HAL_I2C_Init+0x27c>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	bf94      	ite	ls
 80010ec:	2301      	movls	r3, #1
 80010ee:	2300      	movhi	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e0e7      	b.n	80012ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4a78      	ldr	r2, [pc, #480]	; (80012e0 <HAL_I2C_Init+0x280>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	0c9b      	lsrs	r3, r3, #18
 8001104:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	430a      	orrs	r2, r1
 8001118:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4a6a      	ldr	r2, [pc, #424]	; (80012d4 <HAL_I2C_Init+0x274>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d802      	bhi.n	8001134 <HAL_I2C_Init+0xd4>
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	3301      	adds	r3, #1
 8001132:	e009      	b.n	8001148 <HAL_I2C_Init+0xe8>
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800113a:	fb02 f303 	mul.w	r3, r2, r3
 800113e:	4a69      	ldr	r2, [pc, #420]	; (80012e4 <HAL_I2C_Init+0x284>)
 8001140:	fba2 2303 	umull	r2, r3, r2, r3
 8001144:	099b      	lsrs	r3, r3, #6
 8001146:	3301      	adds	r3, #1
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	430b      	orrs	r3, r1
 800114e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800115a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	495c      	ldr	r1, [pc, #368]	; (80012d4 <HAL_I2C_Init+0x274>)
 8001164:	428b      	cmp	r3, r1
 8001166:	d819      	bhi.n	800119c <HAL_I2C_Init+0x13c>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	1e59      	subs	r1, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fbb1 f3f3 	udiv	r3, r1, r3
 8001176:	1c59      	adds	r1, r3, #1
 8001178:	f640 73fc 	movw	r3, #4092	; 0xffc
 800117c:	400b      	ands	r3, r1
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00a      	beq.n	8001198 <HAL_I2C_Init+0x138>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	1e59      	subs	r1, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001190:	3301      	adds	r3, #1
 8001192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001196:	e051      	b.n	800123c <HAL_I2C_Init+0x1dc>
 8001198:	2304      	movs	r3, #4
 800119a:	e04f      	b.n	800123c <HAL_I2C_Init+0x1dc>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d111      	bne.n	80011c8 <HAL_I2C_Init+0x168>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	1e58      	subs	r0, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6859      	ldr	r1, [r3, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	440b      	add	r3, r1
 80011b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011b6:	3301      	adds	r3, #1
 80011b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf0c      	ite	eq
 80011c0:	2301      	moveq	r3, #1
 80011c2:	2300      	movne	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	e012      	b.n	80011ee <HAL_I2C_Init+0x18e>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	1e58      	subs	r0, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6859      	ldr	r1, [r3, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	0099      	lsls	r1, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	fbb0 f3f3 	udiv	r3, r0, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bf0c      	ite	eq
 80011e8:	2301      	moveq	r3, #1
 80011ea:	2300      	movne	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_I2C_Init+0x196>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e022      	b.n	800123c <HAL_I2C_Init+0x1dc>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10e      	bne.n	800121c <HAL_I2C_Init+0x1bc>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1e58      	subs	r0, r3, #1
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6859      	ldr	r1, [r3, #4]
 8001206:	460b      	mov	r3, r1
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	440b      	add	r3, r1
 800120c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001210:	3301      	adds	r3, #1
 8001212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800121a:	e00f      	b.n	800123c <HAL_I2C_Init+0x1dc>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	1e58      	subs	r0, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6859      	ldr	r1, [r3, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	0099      	lsls	r1, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001232:	3301      	adds	r3, #1
 8001234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	6809      	ldr	r1, [r1, #0]
 8001240:	4313      	orrs	r3, r2
 8001242:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69da      	ldr	r2, [r3, #28]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800126a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6911      	ldr	r1, [r2, #16]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68d2      	ldr	r2, [r2, #12]
 8001276:	4311      	orrs	r1, r2
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	430b      	orrs	r3, r1
 800127e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2220      	movs	r2, #32
 80012b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	000186a0 	.word	0x000186a0
 80012d8:	001e847f 	.word	0x001e847f
 80012dc:	003d08ff 	.word	0x003d08ff
 80012e0:	431bde83 	.word	0x431bde83
 80012e4:	10624dd3 	.word	0x10624dd3

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e272      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8087 	beq.w	8001416 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001308:	4b92      	ldr	r3, [pc, #584]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 030c 	and.w	r3, r3, #12
 8001310:	2b04      	cmp	r3, #4
 8001312:	d00c      	beq.n	800132e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001314:	4b8f      	ldr	r3, [pc, #572]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b08      	cmp	r3, #8
 800131e:	d112      	bne.n	8001346 <HAL_RCC_OscConfig+0x5e>
 8001320:	4b8c      	ldr	r3, [pc, #560]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132c:	d10b      	bne.n	8001346 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132e:	4b89      	ldr	r3, [pc, #548]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d06c      	beq.n	8001414 <HAL_RCC_OscConfig+0x12c>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d168      	bne.n	8001414 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e24c      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134e:	d106      	bne.n	800135e <HAL_RCC_OscConfig+0x76>
 8001350:	4b80      	ldr	r3, [pc, #512]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a7f      	ldr	r2, [pc, #508]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	e02e      	b.n	80013bc <HAL_RCC_OscConfig+0xd4>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x98>
 8001366:	4b7b      	ldr	r3, [pc, #492]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a7a      	ldr	r2, [pc, #488]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 800136c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b78      	ldr	r3, [pc, #480]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a77      	ldr	r2, [pc, #476]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001378:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e01d      	b.n	80013bc <HAL_RCC_OscConfig+0xd4>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0xbc>
 800138a:	4b72      	ldr	r3, [pc, #456]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a71      	ldr	r2, [pc, #452]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b6f      	ldr	r3, [pc, #444]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a6e      	ldr	r2, [pc, #440]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e00b      	b.n	80013bc <HAL_RCC_OscConfig+0xd4>
 80013a4:	4b6b      	ldr	r3, [pc, #428]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a6a      	ldr	r2, [pc, #424]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b68      	ldr	r3, [pc, #416]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a67      	ldr	r2, [pc, #412]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d013      	beq.n	80013ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fa4c 	bl	8000860 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff fa48 	bl	8000860 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e200      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	4b5d      	ldr	r3, [pc, #372]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0xe4>
 80013ea:	e014      	b.n	8001416 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fa38 	bl	8000860 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fa34 	bl	8000860 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	; 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1ec      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001406:	4b53      	ldr	r3, [pc, #332]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x10c>
 8001412:	e000      	b.n	8001416 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d063      	beq.n	80014ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001422:	4b4c      	ldr	r3, [pc, #304]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00b      	beq.n	8001446 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800142e:	4b49      	ldr	r3, [pc, #292]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b08      	cmp	r3, #8
 8001438:	d11c      	bne.n	8001474 <HAL_RCC_OscConfig+0x18c>
 800143a:	4b46      	ldr	r3, [pc, #280]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d116      	bne.n	8001474 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	4b43      	ldr	r3, [pc, #268]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d005      	beq.n	800145e <HAL_RCC_OscConfig+0x176>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d001      	beq.n	800145e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e1c0      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4939      	ldr	r1, [pc, #228]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001472:	e03a      	b.n	80014ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d020      	beq.n	80014be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147c:	4b36      	ldr	r3, [pc, #216]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff f9ed 	bl	8000860 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148a:	f7ff f9e9 	bl	8000860 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e1a1      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a8:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4927      	ldr	r1, [pc, #156]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
 80014bc:	e015      	b.n	80014ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff f9cc 	bl	8000860 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014cc:	f7ff f9c8 	bl	8000860 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e180      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d03a      	beq.n	800156c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d019      	beq.n	8001532 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_RCC_OscConfig+0x274>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001504:	f7ff f9ac 	bl	8000860 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150c:	f7ff f9a8 	bl	8000860 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e160      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800152a:	2001      	movs	r0, #1
 800152c:	f000 faba 	bl	8001aa4 <RCC_Delay>
 8001530:	e01c      	b.n	800156c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_RCC_OscConfig+0x274>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001538:	f7ff f992 	bl	8000860 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153e:	e00f      	b.n	8001560 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001540:	f7ff f98e 	bl	8000860 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d908      	bls.n	8001560 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e146      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	42420000 	.word	0x42420000
 800155c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001560:	4b92      	ldr	r3, [pc, #584]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1e9      	bne.n	8001540 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80a6 	beq.w	80016c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157e:	4b8b      	ldr	r3, [pc, #556]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10d      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4b88      	ldr	r3, [pc, #544]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a87      	ldr	r2, [pc, #540]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b85      	ldr	r3, [pc, #532]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a2:	2301      	movs	r3, #1
 80015a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a6:	4b82      	ldr	r3, [pc, #520]	; (80017b0 <HAL_RCC_OscConfig+0x4c8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d118      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b2:	4b7f      	ldr	r3, [pc, #508]	; (80017b0 <HAL_RCC_OscConfig+0x4c8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a7e      	ldr	r2, [pc, #504]	; (80017b0 <HAL_RCC_OscConfig+0x4c8>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015be:	f7ff f94f 	bl	8000860 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c6:	f7ff f94b 	bl	8000860 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b64      	cmp	r3, #100	; 0x64
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e103      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	4b75      	ldr	r3, [pc, #468]	; (80017b0 <HAL_RCC_OscConfig+0x4c8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x312>
 80015ec:	4b6f      	ldr	r3, [pc, #444]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4a6e      	ldr	r2, [pc, #440]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6213      	str	r3, [r2, #32]
 80015f8:	e02d      	b.n	8001656 <HAL_RCC_OscConfig+0x36e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x334>
 8001602:	4b6a      	ldr	r3, [pc, #424]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4a69      	ldr	r2, [pc, #420]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	6213      	str	r3, [r2, #32]
 800160e:	4b67      	ldr	r3, [pc, #412]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4a66      	ldr	r2, [pc, #408]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001614:	f023 0304 	bic.w	r3, r3, #4
 8001618:	6213      	str	r3, [r2, #32]
 800161a:	e01c      	b.n	8001656 <HAL_RCC_OscConfig+0x36e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b05      	cmp	r3, #5
 8001622:	d10c      	bne.n	800163e <HAL_RCC_OscConfig+0x356>
 8001624:	4b61      	ldr	r3, [pc, #388]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4a60      	ldr	r2, [pc, #384]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	4b5e      	ldr	r3, [pc, #376]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4a5d      	ldr	r2, [pc, #372]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6213      	str	r3, [r2, #32]
 800163c:	e00b      	b.n	8001656 <HAL_RCC_OscConfig+0x36e>
 800163e:	4b5b      	ldr	r3, [pc, #364]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a5a      	ldr	r2, [pc, #360]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6213      	str	r3, [r2, #32]
 800164a:	4b58      	ldr	r3, [pc, #352]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a57      	ldr	r2, [pc, #348]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001650:	f023 0304 	bic.w	r3, r3, #4
 8001654:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d015      	beq.n	800168a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff f8ff 	bl	8000860 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001664:	e00a      	b.n	800167c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff f8fb 	bl	8000860 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	f241 3288 	movw	r2, #5000	; 0x1388
 8001674:	4293      	cmp	r3, r2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e0b1      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167c:	4b4b      	ldr	r3, [pc, #300]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0ee      	beq.n	8001666 <HAL_RCC_OscConfig+0x37e>
 8001688:	e014      	b.n	80016b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168a:	f7ff f8e9 	bl	8000860 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001690:	e00a      	b.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f7ff f8e5 	bl	8000860 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e09b      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a8:	4b40      	ldr	r3, [pc, #256]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1ee      	bne.n	8001692 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d105      	bne.n	80016c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ba:	4b3c      	ldr	r3, [pc, #240]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a3b      	ldr	r2, [pc, #236]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8087 	beq.w	80017de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d0:	4b36      	ldr	r3, [pc, #216]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d061      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d146      	bne.n	8001772 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e4:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <HAL_RCC_OscConfig+0x4cc>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7ff f8b9 	bl	8000860 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f2:	f7ff f8b5 	bl	8000860 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e06d      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001704:	4b29      	ldr	r3, [pc, #164]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001718:	d108      	bne.n	800172c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800171a:	4b24      	ldr	r3, [pc, #144]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	4921      	ldr	r1, [pc, #132]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a19      	ldr	r1, [r3, #32]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	430b      	orrs	r3, r1
 800173e:	491b      	ldr	r1, [pc, #108]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x4cc>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff f889 	bl	8000860 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001752:	f7ff f885 	bl	8000860 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e03d      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x46a>
 8001770:	e035      	b.n	80017de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_RCC_OscConfig+0x4cc>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff f872 	bl	8000860 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff f86e 	bl	8000860 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e026      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x498>
 800179e:	e01e      	b.n	80017de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e019      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40007000 	.word	0x40007000
 80017b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_RCC_OscConfig+0x500>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d001      	beq.n	80017de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000

080017ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0d0      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001800:	4b6a      	ldr	r3, [pc, #424]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d910      	bls.n	8001830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b67      	ldr	r3, [pc, #412]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 0207 	bic.w	r2, r3, #7
 8001816:	4965      	ldr	r1, [pc, #404]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b63      	ldr	r3, [pc, #396]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0b8      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001848:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a58      	ldr	r2, [pc, #352]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001852:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001860:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800186a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800186c:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	494d      	ldr	r1, [pc, #308]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d040      	beq.n	800190c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d115      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e07f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018aa:	4b41      	ldr	r3, [pc, #260]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e073      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e06b      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ca:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f023 0203 	bic.w	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4936      	ldr	r1, [pc, #216]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018dc:	f7fe ffc0 	bl	8000860 <HAL_GetTick>
 80018e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e4:	f7fe ffbc 	bl	8000860 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e053      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 020c 	and.w	r2, r3, #12
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	429a      	cmp	r2, r3
 800190a:	d1eb      	bne.n	80018e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800190c:	4b27      	ldr	r3, [pc, #156]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d210      	bcs.n	800193c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 0207 	bic.w	r2, r3, #7
 8001922:	4922      	ldr	r1, [pc, #136]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e032      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4916      	ldr	r1, [pc, #88]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	4313      	orrs	r3, r2
 8001958:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	490e      	ldr	r1, [pc, #56]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800197a:	f000 f821 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 800197e:	4602      	mov	r2, r0
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	490a      	ldr	r1, [pc, #40]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800198c:	5ccb      	ldrb	r3, [r1, r3]
 800198e:	fa22 f303 	lsr.w	r3, r2, r3
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_RCC_ClockConfig+0x1d0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe ff1e 	bl	80007dc <HAL_InitTick>

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40022000 	.word	0x40022000
 80019b0:	40021000 	.word	0x40021000
 80019b4:	08003c7c 	.word	0x08003c7c
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019da:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x94>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d002      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x30>
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d003      	beq.n	80019f6 <HAL_RCC_GetSysClockFreq+0x36>
 80019ee:	e027      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x98>)
 80019f2:	613b      	str	r3, [r7, #16]
      break;
 80019f4:	e027      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	0c9b      	lsrs	r3, r3, #18
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a00:	5cd3      	ldrb	r3, [r2, r3]
 8001a02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d010      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	0c5b      	lsrs	r3, r3, #17
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a1a:	5cd3      	ldrb	r3, [r2, r3]
 8001a1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a0d      	ldr	r2, [pc, #52]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a22:	fb03 f202 	mul.w	r2, r3, r2
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e004      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a0c      	ldr	r2, [pc, #48]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a34:	fb02 f303 	mul.w	r3, r2, r3
 8001a38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	613b      	str	r3, [r7, #16]
      break;
 8001a3e:	e002      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a42:	613b      	str	r3, [r7, #16]
      break;
 8001a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a46:	693b      	ldr	r3, [r7, #16]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	007a1200 	.word	0x007a1200
 8001a5c:	08003c94 	.word	0x08003c94
 8001a60:	08003ca4 	.word	0x08003ca4
 8001a64:	003d0900 	.word	0x003d0900

08001a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a6c:	4b02      	ldr	r3, [pc, #8]	; (8001a78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	20000000 	.word	0x20000000

08001a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a80:	f7ff fff2 	bl	8001a68 <HAL_RCC_GetHCLKFreq>
 8001a84:	4602      	mov	r2, r0
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	0a1b      	lsrs	r3, r3, #8
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	4903      	ldr	r1, [pc, #12]	; (8001aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a92:	5ccb      	ldrb	r3, [r1, r3]
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	08003c8c 	.word	0x08003c8c

08001aa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <RCC_Delay+0x34>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <RCC_Delay+0x38>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	0a5b      	lsrs	r3, r3, #9
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ac0:	bf00      	nop
  }
  while (Delay --);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1e5a      	subs	r2, r3, #1
 8001ac6:	60fa      	str	r2, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f9      	bne.n	8001ac0 <RCC_Delay+0x1c>
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	10624dd3 	.word	0x10624dd3

08001ae0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	4613      	mov	r3, r2
 8001aee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	d16d      	bne.n	8001bdc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_UART_Transmit+0x2c>
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e066      	b.n	8001bde <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2221      	movs	r2, #33	; 0x21
 8001b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b1e:	f7fe fe9f 	bl	8000860 <HAL_GetTick>
 8001b22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	88fa      	ldrh	r2, [r7, #6]
 8001b28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	88fa      	ldrh	r2, [r7, #6]
 8001b2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b38:	d108      	bne.n	8001b4c <HAL_UART_Transmit+0x6c>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d104      	bne.n	8001b4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	e003      	b.n	8001b54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b54:	e02a      	b.n	8001bac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2180      	movs	r1, #128	; 0x80
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 fb8b 	bl	800227c <UART_WaitOnFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e036      	b.n	8001bde <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10b      	bne.n	8001b8e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	3302      	adds	r3, #2
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	e007      	b.n	8001b9e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1cf      	bne.n	8001b56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2140      	movs	r1, #64	; 0x40
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fb5b 	bl	800227c <UART_WaitOnFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e006      	b.n	8001bde <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e000      	b.n	8001bde <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001bdc:	2302      	movs	r3, #2
  }
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b08a      	sub	sp, #40	; 0x28
 8001bea:	af02      	add	r7, sp, #8
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d17c      	bne.n	8001d00 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <HAL_UART_Receive+0x2c>
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e075      	b.n	8001d02 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2222      	movs	r2, #34	; 0x22
 8001c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c2a:	f7fe fe19 	bl	8000860 <HAL_GetTick>
 8001c2e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	88fa      	ldrh	r2, [r7, #6]
 8001c34:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c44:	d108      	bne.n	8001c58 <HAL_UART_Receive+0x72>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d104      	bne.n	8001c58 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	e003      	b.n	8001c60 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001c60:	e043      	b.n	8001cea <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2120      	movs	r1, #32
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fb05 	bl	800227c <UART_WaitOnFlagUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e042      	b.n	8001d02 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10c      	bne.n	8001c9c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	3302      	adds	r3, #2
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	e01f      	b.n	8001cdc <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca4:	d007      	beq.n	8001cb6 <HAL_UART_Receive+0xd0>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10a      	bne.n	8001cc4 <HAL_UART_Receive+0xde>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	e008      	b.n	8001cd6 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1b6      	bne.n	8001c62 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e000      	b.n	8001d02 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d00:	2302      	movs	r3, #2
  }
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3720      	adds	r7, #32
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0ba      	sub	sp, #232	; 0xe8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10f      	bne.n	8001d72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d56:	f003 0320 	and.w	r3, r3, #32
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <HAL_UART_IRQHandler+0x66>
 8001d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fbd1 	bl	8002512 <UART_Receive_IT>
      return;
 8001d70:	e25b      	b.n	800222a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80de 	beq.w	8001f38 <HAL_UART_IRQHandler+0x22c>
 8001d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d106      	bne.n	8001d96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80d1 	beq.w	8001f38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <HAL_UART_IRQHandler+0xae>
 8001da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_UART_IRQHandler+0xd2>
 8001dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f043 0202 	orr.w	r2, r3, #2
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00b      	beq.n	8001e02 <HAL_UART_IRQHandler+0xf6>
 8001dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f043 0204 	orr.w	r2, r3, #4
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d011      	beq.n	8001e32 <HAL_UART_IRQHandler+0x126>
 8001e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d105      	bne.n	8001e26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f043 0208 	orr.w	r2, r3, #8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 81f2 	beq.w	8002220 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_UART_IRQHandler+0x14e>
 8001e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fb5c 	bl	8002512 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf14      	ite	ne
 8001e68:	2301      	movne	r3, #1
 8001e6a:	2300      	moveq	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <HAL_UART_IRQHandler+0x17a>
 8001e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d04f      	beq.n	8001f26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fa66 	bl	8002358 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d041      	beq.n	8001f1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	3314      	adds	r3, #20
 8001ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ea8:	e853 3f00 	ldrex	r3, [r3]
 8001eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3314      	adds	r3, #20
 8001ec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001ec6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001ed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001ed6:	e841 2300 	strex	r3, r2, [r1]
 8001eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1d9      	bne.n	8001e9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d013      	beq.n	8001f16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef2:	4a7e      	ldr	r2, [pc, #504]	; (80020ec <HAL_UART_IRQHandler+0x3e0>)
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fdfc 	bl	8000af8 <HAL_DMA_Abort_IT>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d016      	beq.n	8001f34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f10:	4610      	mov	r0, r2
 8001f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f14:	e00e      	b.n	8001f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f99c 	bl	8002254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f1c:	e00a      	b.n	8001f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f998 	bl	8002254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f24:	e006      	b.n	8001f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f994 	bl	8002254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001f32:	e175      	b.n	8002220 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f34:	bf00      	nop
    return;
 8001f36:	e173      	b.n	8002220 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	f040 814f 	bne.w	80021e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8148 	beq.w	80021e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8141 	beq.w	80021e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80b6 	beq.w	80020f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 8145 	beq.w	8002224 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	f080 813e 	bcs.w	8002224 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	f000 8088 	beq.w	80020cc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	330c      	adds	r3, #12
 8001fc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fca:	e853 3f00 	ldrex	r3, [r3]
 8001fce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001fd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	330c      	adds	r3, #12
 8001fe4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001fe8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001fec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001ff4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ff8:	e841 2300 	strex	r3, r2, [r1]
 8001ffc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1d9      	bne.n	8001fbc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	3314      	adds	r3, #20
 800200e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002012:	e853 3f00 	ldrex	r3, [r3]
 8002016:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	3314      	adds	r3, #20
 8002028:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800202c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002030:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002032:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002034:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002038:	e841 2300 	strex	r3, r2, [r1]
 800203c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800203e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1e1      	bne.n	8002008 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	3314      	adds	r3, #20
 800204a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800204c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800204e:	e853 3f00 	ldrex	r3, [r3]
 8002052:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800205a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3314      	adds	r3, #20
 8002064:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002068:	66fa      	str	r2, [r7, #108]	; 0x6c
 800206a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800206c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800206e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002070:	e841 2300 	strex	r3, r2, [r1]
 8002074:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1e3      	bne.n	8002044 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	330c      	adds	r3, #12
 8002090:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002094:	e853 3f00 	ldrex	r3, [r3]
 8002098:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800209a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800209c:	f023 0310 	bic.w	r3, r3, #16
 80020a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	330c      	adds	r3, #12
 80020aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80020ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80020b0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020b6:	e841 2300 	strex	r3, r2, [r1]
 80020ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80020bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1e3      	bne.n	800208a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fcdb 	bl	8000a82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020da:	b29b      	uxth	r3, r3
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4619      	mov	r1, r3
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f8bf 	bl	8002266 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020e8:	e09c      	b.n	8002224 <HAL_UART_IRQHandler+0x518>
 80020ea:	bf00      	nop
 80020ec:	0800241d 	.word	0x0800241d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 808e 	beq.w	8002228 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800210c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8089 	beq.w	8002228 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	330c      	adds	r3, #12
 800211c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800211e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002120:	e853 3f00 	ldrex	r3, [r3]
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800212c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	330c      	adds	r3, #12
 8002136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800213a:	647a      	str	r2, [r7, #68]	; 0x44
 800213c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800213e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002142:	e841 2300 	strex	r3, r2, [r1]
 8002146:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e3      	bne.n	8002116 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3314      	adds	r3, #20
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	e853 3f00 	ldrex	r3, [r3]
 800215c:	623b      	str	r3, [r7, #32]
   return(result);
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3314      	adds	r3, #20
 800216e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002172:	633a      	str	r2, [r7, #48]	; 0x30
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800217a:	e841 2300 	strex	r3, r2, [r1]
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1e3      	bne.n	800214e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	330c      	adds	r3, #12
 800219a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	e853 3f00 	ldrex	r3, [r3]
 80021a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0310 	bic.w	r3, r3, #16
 80021aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	330c      	adds	r3, #12
 80021b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80021b8:	61fa      	str	r2, [r7, #28]
 80021ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021bc:	69b9      	ldr	r1, [r7, #24]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	e841 2300 	strex	r3, r2, [r1]
 80021c4:	617b      	str	r3, [r7, #20]
   return(result);
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e3      	bne.n	8002194 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80021d6:	4619      	mov	r1, r3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f844 	bl	8002266 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021de:	e023      	b.n	8002228 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <HAL_UART_IRQHandler+0x4f4>
 80021ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f923 	bl	8002444 <UART_Transmit_IT>
    return;
 80021fe:	e014      	b.n	800222a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00e      	beq.n	800222a <HAL_UART_IRQHandler+0x51e>
 800220c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f962 	bl	80024e2 <UART_EndTransmit_IT>
    return;
 800221e:	e004      	b.n	800222a <HAL_UART_IRQHandler+0x51e>
    return;
 8002220:	bf00      	nop
 8002222:	e002      	b.n	800222a <HAL_UART_IRQHandler+0x51e>
      return;
 8002224:	bf00      	nop
 8002226:	e000      	b.n	800222a <HAL_UART_IRQHandler+0x51e>
      return;
 8002228:	bf00      	nop
  }
}
 800222a:	37e8      	adds	r7, #232	; 0xe8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b090      	sub	sp, #64	; 0x40
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	4613      	mov	r3, r2
 800228a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800228c:	e050      	b.n	8002330 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d04c      	beq.n	8002330 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <UART_WaitOnFlagUntilTimeout+0x30>
 800229c:	f7fe fae0 	bl	8000860 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d241      	bcs.n	8002330 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	330c      	adds	r3, #12
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b6:	e853 3f00 	ldrex	r3, [r3]
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	330c      	adds	r3, #12
 80022ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022cc:	637a      	str	r2, [r7, #52]	; 0x34
 80022ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022d4:	e841 2300 	strex	r3, r2, [r1]
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e5      	bne.n	80022ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3314      	adds	r3, #20
 80022e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	e853 3f00 	ldrex	r3, [r3]
 80022ee:	613b      	str	r3, [r7, #16]
   return(result);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f023 0301 	bic.w	r3, r3, #1
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	3314      	adds	r3, #20
 80022fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002300:	623a      	str	r2, [r7, #32]
 8002302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002304:	69f9      	ldr	r1, [r7, #28]
 8002306:	6a3a      	ldr	r2, [r7, #32]
 8002308:	e841 2300 	strex	r3, r2, [r1]
 800230c:	61bb      	str	r3, [r7, #24]
   return(result);
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1e5      	bne.n	80022e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e00f      	b.n	8002350 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	4013      	ands	r3, r2
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	429a      	cmp	r2, r3
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	429a      	cmp	r2, r3
 800234c:	d09f      	beq.n	800228e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3740      	adds	r7, #64	; 0x40
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002358:	b480      	push	{r7}
 800235a:	b095      	sub	sp, #84	; 0x54
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	330c      	adds	r3, #12
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236a:	e853 3f00 	ldrex	r3, [r3]
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	330c      	adds	r3, #12
 800237e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002380:	643a      	str	r2, [r7, #64]	; 0x40
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002384:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002386:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002388:	e841 2300 	strex	r3, r2, [r1]
 800238c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800238e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1e5      	bne.n	8002360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3314      	adds	r3, #20
 800239a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	e853 3f00 	ldrex	r3, [r3]
 80023a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3314      	adds	r3, #20
 80023b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023bc:	e841 2300 	strex	r3, r2, [r1]
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1e5      	bne.n	8002394 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d119      	bne.n	8002404 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	330c      	adds	r3, #12
 80023d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	e853 3f00 	ldrex	r3, [r3]
 80023de:	60bb      	str	r3, [r7, #8]
   return(result);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f023 0310 	bic.w	r3, r3, #16
 80023e6:	647b      	str	r3, [r7, #68]	; 0x44
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	330c      	adds	r3, #12
 80023ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023f0:	61ba      	str	r2, [r7, #24]
 80023f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f4:	6979      	ldr	r1, [r7, #20]
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	e841 2300 	strex	r3, r2, [r1]
 80023fc:	613b      	str	r3, [r7, #16]
   return(result);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e5      	bne.n	80023d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002412:	bf00      	nop
 8002414:	3754      	adds	r7, #84	; 0x54
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f7ff ff0c 	bl	8002254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b21      	cmp	r3, #33	; 0x21
 8002456:	d13e      	bne.n	80024d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002460:	d114      	bne.n	800248c <UART_Transmit_IT+0x48>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d110      	bne.n	800248c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800247e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	1c9a      	adds	r2, r3, #2
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	621a      	str	r2, [r3, #32]
 800248a:	e008      	b.n	800249e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	1c59      	adds	r1, r3, #1
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6211      	str	r1, [r2, #32]
 8002496:	781a      	ldrb	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4619      	mov	r1, r3
 80024ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10f      	bne.n	80024d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024d6:	2302      	movs	r3, #2
  }
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff fe94 	bl	8002230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b08c      	sub	sp, #48	; 0x30
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b22      	cmp	r3, #34	; 0x22
 8002524:	f040 80ae 	bne.w	8002684 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002530:	d117      	bne.n	8002562 <UART_Receive_IT+0x50>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d113      	bne.n	8002562 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800253a:	2300      	movs	r3, #0
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	b29b      	uxth	r3, r3
 800254c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002550:	b29a      	uxth	r2, r3
 8002552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002554:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	1c9a      	adds	r2, r3, #2
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	; 0x28
 8002560:	e026      	b.n	80025b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002568:	2300      	movs	r3, #0
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002574:	d007      	beq.n	8002586 <UART_Receive_IT+0x74>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <UART_Receive_IT+0x82>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e008      	b.n	80025a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4619      	mov	r1, r3
 80025be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d15d      	bne.n	8002680 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0220 	bic.w	r2, r2, #32
 80025d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	2b01      	cmp	r3, #1
 8002608:	d135      	bne.n	8002676 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	330c      	adds	r3, #12
 8002616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	e853 3f00 	ldrex	r3, [r3]
 800261e:	613b      	str	r3, [r7, #16]
   return(result);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f023 0310 	bic.w	r3, r3, #16
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	330c      	adds	r3, #12
 800262e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002630:	623a      	str	r2, [r7, #32]
 8002632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002634:	69f9      	ldr	r1, [r7, #28]
 8002636:	6a3a      	ldr	r2, [r7, #32]
 8002638:	e841 2300 	strex	r3, r2, [r1]
 800263c:	61bb      	str	r3, [r7, #24]
   return(result);
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e5      	bne.n	8002610 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b10      	cmp	r3, #16
 8002650:	d10a      	bne.n	8002668 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800266c:	4619      	mov	r1, r3
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff fdf9 	bl	8002266 <HAL_UARTEx_RxEventCallback>
 8002674:	e002      	b.n	800267c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff fde3 	bl	8002242 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	e002      	b.n	8002686 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	3730      	adds	r7, #48	; 0x30
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800268e:	b480      	push	{r7}
 8002690:	b085      	sub	sp, #20
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800269c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a0:	2b84      	cmp	r3, #132	; 0x84
 80026a2:	d005      	beq.n	80026b0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80026a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4413      	add	r3, r2
 80026ac:	3303      	adds	r3, #3
 80026ae:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80026b0:	68fb      	ldr	r3, [r7, #12]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80026c0:	f000 fad0 	bl	8002c64 <vTaskStartScheduler>
  
  return osOK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	bd80      	pop	{r7, pc}

080026ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80026ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026cc:	b089      	sub	sp, #36	; 0x24
 80026ce:	af04      	add	r7, sp, #16
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d020      	beq.n	800271e <osThreadCreate+0x54>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01c      	beq.n	800271e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685c      	ldr	r4, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681d      	ldr	r5, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691e      	ldr	r6, [r3, #16]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ffc9 	bl	800268e <makeFreeRtosPriority>
 80026fc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002706:	9202      	str	r2, [sp, #8]
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	9100      	str	r1, [sp, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4632      	mov	r2, r6
 8002710:	4629      	mov	r1, r5
 8002712:	4620      	mov	r0, r4
 8002714:	f000 f8e8 	bl	80028e8 <xTaskCreateStatic>
 8002718:	4603      	mov	r3, r0
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e01c      	b.n	8002758 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685c      	ldr	r4, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800272a:	b29e      	uxth	r6, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ffab 	bl	800268e <makeFreeRtosPriority>
 8002738:	4602      	mov	r2, r0
 800273a:	f107 030c 	add.w	r3, r7, #12
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	9200      	str	r2, [sp, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	4632      	mov	r2, r6
 8002746:	4629      	mov	r1, r5
 8002748:	4620      	mov	r0, r4
 800274a:	f000 f929 	bl	80029a0 <xTaskCreate>
 800274e:	4603      	mov	r3, r0
 8002750:	2b01      	cmp	r3, #1
 8002752:	d001      	beq.n	8002758 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002754:	2300      	movs	r3, #0
 8002756:	e000      	b.n	800275a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002758:	68fb      	ldr	r3, [r7, #12]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002762 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <osDelay+0x16>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	e000      	b.n	800277a <osDelay+0x18>
 8002778:	2301      	movs	r3, #1
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fa3e 	bl	8002bfc <vTaskDelay>
  
  return osOK;
 8002780:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f103 0208 	add.w	r2, r3, #8
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f04f 32ff 	mov.w	r2, #4294967295
 80027a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f103 0208 	add.w	r2, r3, #8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f103 0208 	add.w	r2, r3, #8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	601a      	str	r2, [r3, #0]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d103      	bne.n	8002846 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	e00c      	b.n	8002860 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3308      	adds	r3, #8
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e002      	b.n	8002854 <vListInsert+0x2e>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	429a      	cmp	r2, r3
 800285e:	d2f6      	bcs.n	800284e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	601a      	str	r2, [r3, #0]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6892      	ldr	r2, [r2, #8]
 80028ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6852      	ldr	r2, [r2, #4]
 80028b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d103      	bne.n	80028ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	1e5a      	subs	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08e      	sub	sp, #56	; 0x38
 80028ec:	af04      	add	r7, sp, #16
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80028f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800290e:	bf00      	nop
 8002910:	e7fe      	b.n	8002910 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <xTaskCreateStatic+0x46>
	__asm volatile
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	61fb      	str	r3, [r7, #28]
}
 800292a:	bf00      	nop
 800292c:	e7fe      	b.n	800292c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800292e:	2354      	movs	r3, #84	; 0x54
 8002930:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b54      	cmp	r3, #84	; 0x54
 8002936:	d00a      	beq.n	800294e <xTaskCreateStatic+0x66>
	__asm volatile
 8002938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293c:	f383 8811 	msr	BASEPRI, r3
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	61bb      	str	r3, [r7, #24]
}
 800294a:	bf00      	nop
 800294c:	e7fe      	b.n	800294c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01e      	beq.n	8002992 <xTaskCreateStatic+0xaa>
 8002954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002956:	2b00      	cmp	r3, #0
 8002958:	d01b      	beq.n	8002992 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002962:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	2202      	movs	r2, #2
 8002968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800296c:	2300      	movs	r3, #0
 800296e:	9303      	str	r3, [sp, #12]
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	9302      	str	r3, [sp, #8]
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f850 	bl	8002a2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800298a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800298c:	f000 f8cc 	bl	8002b28 <prvAddNewTaskToReadyList>
 8002990:	e001      	b.n	8002996 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002996:	697b      	ldr	r3, [r7, #20]
	}
 8002998:	4618      	mov	r0, r3
 800299a:	3728      	adds	r7, #40	; 0x28
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08c      	sub	sp, #48	; 0x30
 80029a4:	af04      	add	r7, sp, #16
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	4613      	mov	r3, r2
 80029ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fe8b 	bl	80036d0 <pvPortMalloc>
 80029ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00e      	beq.n	80029e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80029c2:	2054      	movs	r0, #84	; 0x54
 80029c4:	f000 fe84 	bl	80036d0 <pvPortMalloc>
 80029c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
 80029d6:	e005      	b.n	80029e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80029d8:	6978      	ldr	r0, [r7, #20]
 80029da:	f000 ff3d 	bl	8003858 <vPortFree>
 80029de:	e001      	b.n	80029e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d017      	beq.n	8002a1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029f2:	88fa      	ldrh	r2, [r7, #6]
 80029f4:	2300      	movs	r3, #0
 80029f6:	9303      	str	r3, [sp, #12]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	9302      	str	r3, [sp, #8]
 80029fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fe:	9301      	str	r3, [sp, #4]
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f80e 	bl	8002a2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a0e:	69f8      	ldr	r0, [r7, #28]
 8002a10:	f000 f88a 	bl	8002b28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a14:	2301      	movs	r3, #1
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	e002      	b.n	8002a20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a20:	69bb      	ldr	r3, [r7, #24]
	}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3720      	adds	r7, #32
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b088      	sub	sp, #32
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a42:	3b01      	subs	r3, #1
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f023 0307 	bic.w	r3, r3, #7
 8002a50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	617b      	str	r3, [r7, #20]
}
 8002a6e:	bf00      	nop
 8002a70:	e7fe      	b.n	8002a70 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	e012      	b.n	8002a9e <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	7819      	ldrb	r1, [r3, #0]
 8002a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4413      	add	r3, r2
 8002a86:	3334      	adds	r3, #52	; 0x34
 8002a88:	460a      	mov	r2, r1
 8002a8a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	4413      	add	r3, r2
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	2b0f      	cmp	r3, #15
 8002aa2:	d9e9      	bls.n	8002a78 <prvInitialiseNewTask+0x4e>
 8002aa4:	e000      	b.n	8002aa8 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002aa6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d901      	bls.n	8002aba <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ab6:	2306      	movs	r3, #6
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002abe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	2200      	movs	r2, #0
 8002aca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ace:	3304      	adds	r3, #4
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fe79 	bl	80027c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	3318      	adds	r3, #24
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fe74 	bl	80027c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	f1c3 0207 	rsb	r2, r3, #7
 8002aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	2200      	movs	r2, #0
 8002afa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	68f9      	ldr	r1, [r7, #12]
 8002b08:	69b8      	ldr	r0, [r7, #24]
 8002b0a:	f000 fc2b 	bl	8003364 <pxPortInitialiseStack>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b20:	bf00      	nop
 8002b22:	3720      	adds	r7, #32
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b30:	f000 fd0c 	bl	800354c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b34:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <prvAddNewTaskToReadyList+0xb8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	4a29      	ldr	r2, [pc, #164]	; (8002be0 <prvAddNewTaskToReadyList+0xb8>)
 8002b3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b3e:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <prvAddNewTaskToReadyList+0xbc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b46:	4a27      	ldr	r2, [pc, #156]	; (8002be4 <prvAddNewTaskToReadyList+0xbc>)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b4c:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <prvAddNewTaskToReadyList+0xb8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d110      	bne.n	8002b76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b54:	f000 fac0 	bl	80030d8 <prvInitialiseTaskLists>
 8002b58:	e00d      	b.n	8002b76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <prvAddNewTaskToReadyList+0xc0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b62:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <prvAddNewTaskToReadyList+0xbc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d802      	bhi.n	8002b76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b70:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <prvAddNewTaskToReadyList+0xbc>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <prvAddNewTaskToReadyList+0xc4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <prvAddNewTaskToReadyList+0xc4>)
 8002b7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	2201      	movs	r2, #1
 8002b86:	409a      	lsls	r2, r3
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <prvAddNewTaskToReadyList+0xc8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	4a18      	ldr	r2, [pc, #96]	; (8002bf0 <prvAddNewTaskToReadyList+0xc8>)
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <prvAddNewTaskToReadyList+0xcc>)
 8002ba0:	441a      	add	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4610      	mov	r0, r2
 8002baa:	f7ff fe19 	bl	80027e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002bae:	f000 fcfd 	bl	80035ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <prvAddNewTaskToReadyList+0xc0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00e      	beq.n	8002bd8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <prvAddNewTaskToReadyList+0xbc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d207      	bcs.n	8002bd8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <prvAddNewTaskToReadyList+0xd0>)
 8002bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000424 	.word	0x20000424
 8002be4:	20000324 	.word	0x20000324
 8002be8:	20000430 	.word	0x20000430
 8002bec:	20000440 	.word	0x20000440
 8002bf0:	2000042c 	.word	0x2000042c
 8002bf4:	20000328 	.word	0x20000328
 8002bf8:	e000ed04 	.word	0xe000ed04

08002bfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d017      	beq.n	8002c3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <vTaskDelay+0x60>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <vTaskDelay+0x30>
	__asm volatile
 8002c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	60bb      	str	r3, [r7, #8]
}
 8002c28:	bf00      	nop
 8002c2a:	e7fe      	b.n	8002c2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c2c:	f000 f87a 	bl	8002d24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c30:	2100      	movs	r1, #0
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fb30 	bl	8003298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c38:	f000 f882 	bl	8002d40 <xTaskResumeAll>
 8002c3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d107      	bne.n	8002c54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <vTaskDelay+0x64>)
 8002c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	2000044c 	.word	0x2000044c
 8002c60:	e000ed04 	.word	0xe000ed04

08002c64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	; 0x28
 8002c68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c72:	463a      	mov	r2, r7
 8002c74:	1d39      	adds	r1, r7, #4
 8002c76:	f107 0308 	add.w	r3, r7, #8
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fad8 	bl	8000230 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c80:	6839      	ldr	r1, [r7, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	9202      	str	r2, [sp, #8]
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	460a      	mov	r2, r1
 8002c92:	491e      	ldr	r1, [pc, #120]	; (8002d0c <vTaskStartScheduler+0xa8>)
 8002c94:	481e      	ldr	r0, [pc, #120]	; (8002d10 <vTaskStartScheduler+0xac>)
 8002c96:	f7ff fe27 	bl	80028e8 <xTaskCreateStatic>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <vTaskStartScheduler+0xb0>)
 8002c9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ca0:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <vTaskStartScheduler+0xb0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e001      	b.n	8002cb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d116      	bne.n	8002ce6 <vTaskStartScheduler+0x82>
	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	613b      	str	r3, [r7, #16]
}
 8002cca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <vTaskStartScheduler+0xb4>)
 8002cce:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002cd4:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <vTaskStartScheduler+0xb8>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <vTaskStartScheduler+0xbc>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ce0:	f000 fbc2 	bl	8003468 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ce4:	e00e      	b.n	8002d04 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d10a      	bne.n	8002d04 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	60fb      	str	r3, [r7, #12]
}
 8002d00:	bf00      	nop
 8002d02:	e7fe      	b.n	8002d02 <vTaskStartScheduler+0x9e>
}
 8002d04:	bf00      	nop
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	08003c74 	.word	0x08003c74
 8002d10:	080030a9 	.word	0x080030a9
 8002d14:	20000448 	.word	0x20000448
 8002d18:	20000444 	.word	0x20000444
 8002d1c:	20000430 	.word	0x20000430
 8002d20:	20000428 	.word	0x20000428

08002d24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <vTaskSuspendAll+0x18>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	4a03      	ldr	r2, [pc, #12]	; (8002d3c <vTaskSuspendAll+0x18>)
 8002d30:	6013      	str	r3, [r2, #0]
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	2000044c 	.word	0x2000044c

08002d40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d4e:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <xTaskResumeAll+0x114>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10a      	bne.n	8002d6c <xTaskResumeAll+0x2c>
	__asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	603b      	str	r3, [r7, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	e7fe      	b.n	8002d6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d6c:	f000 fbee 	bl	800354c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d70:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <xTaskResumeAll+0x114>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	4a37      	ldr	r2, [pc, #220]	; (8002e54 <xTaskResumeAll+0x114>)
 8002d78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d7a:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <xTaskResumeAll+0x114>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d161      	bne.n	8002e46 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d82:	4b35      	ldr	r3, [pc, #212]	; (8002e58 <xTaskResumeAll+0x118>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d05d      	beq.n	8002e46 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d8a:	e02e      	b.n	8002dea <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002d8c:	4b33      	ldr	r3, [pc, #204]	; (8002e5c <xTaskResumeAll+0x11c>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3318      	adds	r3, #24
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fd7c 	bl	8002896 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3304      	adds	r3, #4
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fd77 	bl	8002896 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	2201      	movs	r2, #1
 8002dae:	409a      	lsls	r2, r3
 8002db0:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <xTaskResumeAll+0x120>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	4a2a      	ldr	r2, [pc, #168]	; (8002e60 <xTaskResumeAll+0x120>)
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4a27      	ldr	r2, [pc, #156]	; (8002e64 <xTaskResumeAll+0x124>)
 8002dc8:	441a      	add	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	f7ff fd05 	bl	80027e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dda:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <xTaskResumeAll+0x128>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d302      	bcc.n	8002dea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002de4:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <xTaskResumeAll+0x12c>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dea:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <xTaskResumeAll+0x11c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1cc      	bne.n	8002d8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002df8:	f000 fa0c 	bl	8003214 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <xTaskResumeAll+0x130>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d010      	beq.n	8002e2a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e08:	f000 f836 	bl	8002e78 <xTaskIncrementTick>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002e12:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <xTaskResumeAll+0x12c>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1f1      	bne.n	8002e08 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <xTaskResumeAll+0x130>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <xTaskResumeAll+0x12c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e32:	2301      	movs	r3, #1
 8002e34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e36:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <xTaskResumeAll+0x134>)
 8002e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e46:	f000 fbb1 	bl	80035ac <vPortExitCritical>

	return xAlreadyYielded;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	2000044c 	.word	0x2000044c
 8002e58:	20000424 	.word	0x20000424
 8002e5c:	200003e4 	.word	0x200003e4
 8002e60:	2000042c 	.word	0x2000042c
 8002e64:	20000328 	.word	0x20000328
 8002e68:	20000324 	.word	0x20000324
 8002e6c:	20000438 	.word	0x20000438
 8002e70:	20000434 	.word	0x20000434
 8002e74:	e000ed04 	.word	0xe000ed04

08002e78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e82:	4b51      	ldr	r3, [pc, #324]	; (8002fc8 <xTaskIncrementTick+0x150>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 808d 	bne.w	8002fa6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e8c:	4b4f      	ldr	r3, [pc, #316]	; (8002fcc <xTaskIncrementTick+0x154>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e94:	4a4d      	ldr	r2, [pc, #308]	; (8002fcc <xTaskIncrementTick+0x154>)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d120      	bne.n	8002ee2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	; (8002fd0 <xTaskIncrementTick+0x158>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <xTaskIncrementTick+0x48>
	__asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	603b      	str	r3, [r7, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	e7fe      	b.n	8002ebe <xTaskIncrementTick+0x46>
 8002ec0:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <xTaskIncrementTick+0x158>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b43      	ldr	r3, [pc, #268]	; (8002fd4 <xTaskIncrementTick+0x15c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a41      	ldr	r2, [pc, #260]	; (8002fd0 <xTaskIncrementTick+0x158>)
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	4a41      	ldr	r2, [pc, #260]	; (8002fd4 <xTaskIncrementTick+0x15c>)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	4b40      	ldr	r3, [pc, #256]	; (8002fd8 <xTaskIncrementTick+0x160>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	4a3f      	ldr	r2, [pc, #252]	; (8002fd8 <xTaskIncrementTick+0x160>)
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	f000 f999 	bl	8003214 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ee2:	4b3e      	ldr	r3, [pc, #248]	; (8002fdc <xTaskIncrementTick+0x164>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d34d      	bcc.n	8002f88 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eec:	4b38      	ldr	r3, [pc, #224]	; (8002fd0 <xTaskIncrementTick+0x158>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <xTaskIncrementTick+0x82>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <xTaskIncrementTick+0x84>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f00:	4b36      	ldr	r3, [pc, #216]	; (8002fdc <xTaskIncrementTick+0x164>)
 8002f02:	f04f 32ff 	mov.w	r2, #4294967295
 8002f06:	601a      	str	r2, [r3, #0]
					break;
 8002f08:	e03e      	b.n	8002f88 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f0a:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <xTaskIncrementTick+0x158>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d203      	bcs.n	8002f2a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f22:	4a2e      	ldr	r2, [pc, #184]	; (8002fdc <xTaskIncrementTick+0x164>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6013      	str	r3, [r2, #0]
						break;
 8002f28:	e02e      	b.n	8002f88 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fcb1 	bl	8002896 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d004      	beq.n	8002f46 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	3318      	adds	r3, #24
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fca8 	bl	8002896 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <xTaskIncrementTick+0x168>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <xTaskIncrementTick+0x168>)
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <xTaskIncrementTick+0x16c>)
 8002f66:	441a      	add	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f7ff fc36 	bl	80027e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f78:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <xTaskIncrementTick+0x170>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d3b4      	bcc.n	8002eec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002f82:	2301      	movs	r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f86:	e7b1      	b.n	8002eec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f88:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <xTaskIncrementTick+0x170>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8e:	4915      	ldr	r1, [pc, #84]	; (8002fe4 <xTaskIncrementTick+0x16c>)
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d907      	bls.n	8002fb0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	e004      	b.n	8002fb0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <xTaskIncrementTick+0x174>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3301      	adds	r3, #1
 8002fac:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <xTaskIncrementTick+0x174>)
 8002fae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <xTaskIncrementTick+0x178>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002fbc:	697b      	ldr	r3, [r7, #20]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	2000044c 	.word	0x2000044c
 8002fcc:	20000428 	.word	0x20000428
 8002fd0:	200003dc 	.word	0x200003dc
 8002fd4:	200003e0 	.word	0x200003e0
 8002fd8:	2000043c 	.word	0x2000043c
 8002fdc:	20000444 	.word	0x20000444
 8002fe0:	2000042c 	.word	0x2000042c
 8002fe4:	20000328 	.word	0x20000328
 8002fe8:	20000324 	.word	0x20000324
 8002fec:	20000434 	.word	0x20000434
 8002ff0:	20000438 	.word	0x20000438

08002ff4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ffa:	4b26      	ldr	r3, [pc, #152]	; (8003094 <vTaskSwitchContext+0xa0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003002:	4b25      	ldr	r3, [pc, #148]	; (8003098 <vTaskSwitchContext+0xa4>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003008:	e03f      	b.n	800308a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800300a:	4b23      	ldr	r3, [pc, #140]	; (8003098 <vTaskSwitchContext+0xa4>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003010:	4b22      	ldr	r3, [pc, #136]	; (800309c <vTaskSwitchContext+0xa8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800301e:	7afb      	ldrb	r3, [r7, #11]
 8003020:	f1c3 031f 	rsb	r3, r3, #31
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	491e      	ldr	r1, [pc, #120]	; (80030a0 <vTaskSwitchContext+0xac>)
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <vTaskSwitchContext+0x5c>
	__asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	607b      	str	r3, [r7, #4]
}
 800304c:	bf00      	nop
 800304e:	e7fe      	b.n	800304e <vTaskSwitchContext+0x5a>
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <vTaskSwitchContext+0xac>)
 800305c:	4413      	add	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	3308      	adds	r3, #8
 8003072:	429a      	cmp	r2, r3
 8003074:	d104      	bne.n	8003080 <vTaskSwitchContext+0x8c>
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <vTaskSwitchContext+0xb0>)
 8003088:	6013      	str	r3, [r2, #0]
}
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	2000044c 	.word	0x2000044c
 8003098:	20000438 	.word	0x20000438
 800309c:	2000042c 	.word	0x2000042c
 80030a0:	20000328 	.word	0x20000328
 80030a4:	20000324 	.word	0x20000324

080030a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030b0:	f000 f852 	bl	8003158 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <prvIdleTask+0x28>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d9f9      	bls.n	80030b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <prvIdleTask+0x2c>)
 80030be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80030cc:	e7f0      	b.n	80030b0 <prvIdleTask+0x8>
 80030ce:	bf00      	nop
 80030d0:	20000328 	.word	0x20000328
 80030d4:	e000ed04 	.word	0xe000ed04

080030d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	e00c      	b.n	80030fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4a12      	ldr	r2, [pc, #72]	; (8003138 <prvInitialiseTaskLists+0x60>)
 80030f0:	4413      	add	r3, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fb49 	bl	800278a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3301      	adds	r3, #1
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b06      	cmp	r3, #6
 8003102:	d9ef      	bls.n	80030e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003104:	480d      	ldr	r0, [pc, #52]	; (800313c <prvInitialiseTaskLists+0x64>)
 8003106:	f7ff fb40 	bl	800278a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800310a:	480d      	ldr	r0, [pc, #52]	; (8003140 <prvInitialiseTaskLists+0x68>)
 800310c:	f7ff fb3d 	bl	800278a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003110:	480c      	ldr	r0, [pc, #48]	; (8003144 <prvInitialiseTaskLists+0x6c>)
 8003112:	f7ff fb3a 	bl	800278a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003116:	480c      	ldr	r0, [pc, #48]	; (8003148 <prvInitialiseTaskLists+0x70>)
 8003118:	f7ff fb37 	bl	800278a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800311c:	480b      	ldr	r0, [pc, #44]	; (800314c <prvInitialiseTaskLists+0x74>)
 800311e:	f7ff fb34 	bl	800278a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003122:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <prvInitialiseTaskLists+0x78>)
 8003124:	4a05      	ldr	r2, [pc, #20]	; (800313c <prvInitialiseTaskLists+0x64>)
 8003126:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003128:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <prvInitialiseTaskLists+0x7c>)
 800312a:	4a05      	ldr	r2, [pc, #20]	; (8003140 <prvInitialiseTaskLists+0x68>)
 800312c:	601a      	str	r2, [r3, #0]
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000328 	.word	0x20000328
 800313c:	200003b4 	.word	0x200003b4
 8003140:	200003c8 	.word	0x200003c8
 8003144:	200003e4 	.word	0x200003e4
 8003148:	200003f8 	.word	0x200003f8
 800314c:	20000410 	.word	0x20000410
 8003150:	200003dc 	.word	0x200003dc
 8003154:	200003e0 	.word	0x200003e0

08003158 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800315e:	e019      	b.n	8003194 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003160:	f000 f9f4 	bl	800354c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003164:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <prvCheckTasksWaitingTermination+0x50>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3304      	adds	r3, #4
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fb90 	bl	8002896 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <prvCheckTasksWaitingTermination+0x54>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3b01      	subs	r3, #1
 800317c:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <prvCheckTasksWaitingTermination+0x54>)
 800317e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <prvCheckTasksWaitingTermination+0x58>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3b01      	subs	r3, #1
 8003186:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <prvCheckTasksWaitingTermination+0x58>)
 8003188:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800318a:	f000 fa0f 	bl	80035ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f810 	bl	80031b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <prvCheckTasksWaitingTermination+0x58>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e1      	bne.n	8003160 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	200003f8 	.word	0x200003f8
 80031ac:	20000424 	.word	0x20000424
 80031b0:	2000040c 	.word	0x2000040c

080031b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d108      	bne.n	80031d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fb44 	bl	8003858 <vPortFree>
				vPortFree( pxTCB );
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fb41 	bl	8003858 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80031d6:	e018      	b.n	800320a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d103      	bne.n	80031ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fb38 	bl	8003858 <vPortFree>
	}
 80031e8:	e00f      	b.n	800320a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d00a      	beq.n	800320a <prvDeleteTCB+0x56>
	__asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	60fb      	str	r3, [r7, #12]
}
 8003206:	bf00      	nop
 8003208:	e7fe      	b.n	8003208 <prvDeleteTCB+0x54>
	}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <prvResetNextTaskUnblockTime+0x40>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <prvResetNextTaskUnblockTime+0x14>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <prvResetNextTaskUnblockTime+0x16>
 8003228:	2300      	movs	r3, #0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d004      	beq.n	8003238 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <prvResetNextTaskUnblockTime+0x44>)
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003236:	e008      	b.n	800324a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <prvResetNextTaskUnblockTime+0x40>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4a04      	ldr	r2, [pc, #16]	; (8003258 <prvResetNextTaskUnblockTime+0x44>)
 8003248:	6013      	str	r3, [r2, #0]
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	200003dc 	.word	0x200003dc
 8003258:	20000444 	.word	0x20000444

0800325c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <xTaskGetSchedulerState+0x34>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d102      	bne.n	8003270 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800326a:	2301      	movs	r3, #1
 800326c:	607b      	str	r3, [r7, #4]
 800326e:	e008      	b.n	8003282 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <xTaskGetSchedulerState+0x38>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003278:	2302      	movs	r3, #2
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	e001      	b.n	8003282 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800327e:	2300      	movs	r3, #0
 8003280:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003282:	687b      	ldr	r3, [r7, #4]
	}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000430 	.word	0x20000430
 8003294:	2000044c 	.word	0x2000044c

08003298 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032a2:	4b29      	ldr	r3, [pc, #164]	; (8003348 <prvAddCurrentTaskToDelayedList+0xb0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032a8:	4b28      	ldr	r3, [pc, #160]	; (800334c <prvAddCurrentTaskToDelayedList+0xb4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3304      	adds	r3, #4
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff faf1 	bl	8002896 <uxListRemove>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10b      	bne.n	80032d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80032ba:	4b24      	ldr	r3, [pc, #144]	; (800334c <prvAddCurrentTaskToDelayedList+0xb4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	2201      	movs	r2, #1
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43da      	mvns	r2, r3
 80032c8:	4b21      	ldr	r3, [pc, #132]	; (8003350 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4013      	ands	r3, r2
 80032ce:	4a20      	ldr	r2, [pc, #128]	; (8003350 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d10a      	bne.n	80032f0 <prvAddCurrentTaskToDelayedList+0x58>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d007      	beq.n	80032f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032e0:	4b1a      	ldr	r3, [pc, #104]	; (800334c <prvAddCurrentTaskToDelayedList+0xb4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3304      	adds	r3, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	481a      	ldr	r0, [pc, #104]	; (8003354 <prvAddCurrentTaskToDelayedList+0xbc>)
 80032ea:	f7ff fa79 	bl	80027e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80032ee:	e026      	b.n	800333e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <prvAddCurrentTaskToDelayedList+0xb4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	429a      	cmp	r2, r3
 8003306:	d209      	bcs.n	800331c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <prvAddCurrentTaskToDelayedList+0xc0>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <prvAddCurrentTaskToDelayedList+0xb4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3304      	adds	r3, #4
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f7ff fa86 	bl	8002826 <vListInsert>
}
 800331a:	e010      	b.n	800333e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800331c:	4b0f      	ldr	r3, [pc, #60]	; (800335c <prvAddCurrentTaskToDelayedList+0xc4>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4b0a      	ldr	r3, [pc, #40]	; (800334c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3304      	adds	r3, #4
 8003326:	4619      	mov	r1, r3
 8003328:	4610      	mov	r0, r2
 800332a:	f7ff fa7c 	bl	8002826 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800332e:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	429a      	cmp	r2, r3
 8003336:	d202      	bcs.n	800333e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003338:	4a09      	ldr	r2, [pc, #36]	; (8003360 <prvAddCurrentTaskToDelayedList+0xc8>)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	6013      	str	r3, [r2, #0]
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000428 	.word	0x20000428
 800334c:	20000324 	.word	0x20000324
 8003350:	2000042c 	.word	0x2000042c
 8003354:	20000410 	.word	0x20000410
 8003358:	200003e0 	.word	0x200003e0
 800335c:	200003dc 	.word	0x200003dc
 8003360:	20000444 	.word	0x20000444

08003364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3b04      	subs	r3, #4
 8003374:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800337c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	3b04      	subs	r3, #4
 8003382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f023 0201 	bic.w	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3b04      	subs	r3, #4
 8003392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003394:	4a08      	ldr	r2, [pc, #32]	; (80033b8 <pxPortInitialiseStack+0x54>)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3b14      	subs	r3, #20
 800339e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3b20      	subs	r3, #32
 80033aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80033ac:	68fb      	ldr	r3, [r7, #12]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	080033bd 	.word	0x080033bd

080033bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <prvTaskExitError+0x54>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ce:	d00a      	beq.n	80033e6 <prvTaskExitError+0x2a>
	__asm volatile
 80033d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d4:	f383 8811 	msr	BASEPRI, r3
 80033d8:	f3bf 8f6f 	isb	sy
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	60fb      	str	r3, [r7, #12]
}
 80033e2:	bf00      	nop
 80033e4:	e7fe      	b.n	80033e4 <prvTaskExitError+0x28>
	__asm volatile
 80033e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	60bb      	str	r3, [r7, #8]
}
 80033f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80033fa:	bf00      	nop
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0fc      	beq.n	80033fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003402:	bf00      	nop
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	2000000c 	.word	0x2000000c
	...

08003420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <pxCurrentTCBConst2>)
 8003422:	6819      	ldr	r1, [r3, #0]
 8003424:	6808      	ldr	r0, [r1, #0]
 8003426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800342a:	f380 8809 	msr	PSP, r0
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f04f 0000 	mov.w	r0, #0
 8003436:	f380 8811 	msr	BASEPRI, r0
 800343a:	f04e 0e0d 	orr.w	lr, lr, #13
 800343e:	4770      	bx	lr

08003440 <pxCurrentTCBConst2>:
 8003440:	20000324 	.word	0x20000324
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop

08003448 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003448:	4806      	ldr	r0, [pc, #24]	; (8003464 <prvPortStartFirstTask+0x1c>)
 800344a:	6800      	ldr	r0, [r0, #0]
 800344c:	6800      	ldr	r0, [r0, #0]
 800344e:	f380 8808 	msr	MSP, r0
 8003452:	b662      	cpsie	i
 8003454:	b661      	cpsie	f
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	df00      	svc	0
 8003460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003462:	bf00      	nop
 8003464:	e000ed08 	.word	0xe000ed08

08003468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800346e:	4b32      	ldr	r3, [pc, #200]	; (8003538 <xPortStartScheduler+0xd0>)
 8003470:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4b2a      	ldr	r3, [pc, #168]	; (800353c <xPortStartScheduler+0xd4>)
 8003494:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003496:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <xPortStartScheduler+0xd8>)
 8003498:	2207      	movs	r2, #7
 800349a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800349c:	e009      	b.n	80034b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800349e:	4b28      	ldr	r3, [pc, #160]	; (8003540 <xPortStartScheduler+0xd8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	4a26      	ldr	r2, [pc, #152]	; (8003540 <xPortStartScheduler+0xd8>)
 80034a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	2b80      	cmp	r3, #128	; 0x80
 80034bc:	d0ef      	beq.n	800349e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <xPortStartScheduler+0xd8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f1c3 0307 	rsb	r3, r3, #7
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d00a      	beq.n	80034e0 <xPortStartScheduler+0x78>
	__asm volatile
 80034ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	60bb      	str	r3, [r7, #8]
}
 80034dc:	bf00      	nop
 80034de:	e7fe      	b.n	80034de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80034e0:	4b17      	ldr	r3, [pc, #92]	; (8003540 <xPortStartScheduler+0xd8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	4a16      	ldr	r2, [pc, #88]	; (8003540 <xPortStartScheduler+0xd8>)
 80034e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80034ea:	4b15      	ldr	r3, [pc, #84]	; (8003540 <xPortStartScheduler+0xd8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034f2:	4a13      	ldr	r2, [pc, #76]	; (8003540 <xPortStartScheduler+0xd8>)
 80034f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80034fe:	4b11      	ldr	r3, [pc, #68]	; (8003544 <xPortStartScheduler+0xdc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a10      	ldr	r2, [pc, #64]	; (8003544 <xPortStartScheduler+0xdc>)
 8003504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800350a:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <xPortStartScheduler+0xdc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <xPortStartScheduler+0xdc>)
 8003510:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003514:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003516:	f000 f8b9 	bl	800368c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <xPortStartScheduler+0xe0>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003520:	f7ff ff92 	bl	8003448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003524:	f7ff fd66 	bl	8002ff4 <vTaskSwitchContext>
	prvTaskExitError();
 8003528:	f7ff ff48 	bl	80033bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	e000e400 	.word	0xe000e400
 800353c:	20000450 	.word	0x20000450
 8003540:	20000454 	.word	0x20000454
 8003544:	e000ed20 	.word	0xe000ed20
 8003548:	2000000c 	.word	0x2000000c

0800354c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	607b      	str	r3, [r7, #4]
}
 8003564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003566:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <vPortEnterCritical+0x58>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3301      	adds	r3, #1
 800356c:	4a0d      	ldr	r2, [pc, #52]	; (80035a4 <vPortEnterCritical+0x58>)
 800356e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <vPortEnterCritical+0x58>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d10f      	bne.n	8003598 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <vPortEnterCritical+0x5c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <vPortEnterCritical+0x4c>
	__asm volatile
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	603b      	str	r3, [r7, #0]
}
 8003594:	bf00      	nop
 8003596:	e7fe      	b.n	8003596 <vPortEnterCritical+0x4a>
	}
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	2000000c 	.word	0x2000000c
 80035a8:	e000ed04 	.word	0xe000ed04

080035ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80035b2:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <vPortExitCritical+0x4c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10a      	bne.n	80035d0 <vPortExitCritical+0x24>
	__asm volatile
 80035ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	607b      	str	r3, [r7, #4]
}
 80035cc:	bf00      	nop
 80035ce:	e7fe      	b.n	80035ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80035d0:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <vPortExitCritical+0x4c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <vPortExitCritical+0x4c>)
 80035d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80035da:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <vPortExitCritical+0x4c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d105      	bne.n	80035ee <vPortExitCritical+0x42>
 80035e2:	2300      	movs	r3, #0
 80035e4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80035ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr
 80035f8:	2000000c 	.word	0x2000000c
 80035fc:	00000000 	.word	0x00000000

08003600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003600:	f3ef 8009 	mrs	r0, PSP
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <pxCurrentTCBConst>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003610:	6010      	str	r0, [r2, #0]
 8003612:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003616:	f04f 0050 	mov.w	r0, #80	; 0x50
 800361a:	f380 8811 	msr	BASEPRI, r0
 800361e:	f7ff fce9 	bl	8002ff4 <vTaskSwitchContext>
 8003622:	f04f 0000 	mov.w	r0, #0
 8003626:	f380 8811 	msr	BASEPRI, r0
 800362a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800362e:	6819      	ldr	r1, [r3, #0]
 8003630:	6808      	ldr	r0, [r1, #0]
 8003632:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003636:	f380 8809 	msr	PSP, r0
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	4770      	bx	lr

08003640 <pxCurrentTCBConst>:
 8003640:	20000324 	.word	0x20000324
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop

08003648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
	__asm volatile
 800364e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	607b      	str	r3, [r7, #4]
}
 8003660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003662:	f7ff fc09 	bl	8002e78 <xTaskIncrementTick>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <xPortSysTickHandler+0x40>)
 800366e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	2300      	movs	r3, #0
 8003676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	f383 8811 	msr	BASEPRI, r3
}
 800367e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	e000ed04 	.word	0xe000ed04

0800368c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <vPortSetupTimerInterrupt+0x30>)
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003696:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <vPortSetupTimerInterrupt+0x34>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <vPortSetupTimerInterrupt+0x38>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <vPortSetupTimerInterrupt+0x3c>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	099b      	lsrs	r3, r3, #6
 80036a8:	4a08      	ldr	r2, [pc, #32]	; (80036cc <vPortSetupTimerInterrupt+0x40>)
 80036aa:	3b01      	subs	r3, #1
 80036ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80036ae:	4b03      	ldr	r3, [pc, #12]	; (80036bc <vPortSetupTimerInterrupt+0x30>)
 80036b0:	2207      	movs	r2, #7
 80036b2:	601a      	str	r2, [r3, #0]
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr
 80036bc:	e000e010 	.word	0xe000e010
 80036c0:	e000e018 	.word	0xe000e018
 80036c4:	20000000 	.word	0x20000000
 80036c8:	10624dd3 	.word	0x10624dd3
 80036cc:	e000e014 	.word	0xe000e014

080036d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	; 0x28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80036dc:	f7ff fb22 	bl	8002d24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80036e0:	4b58      	ldr	r3, [pc, #352]	; (8003844 <pvPortMalloc+0x174>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80036e8:	f000 f910 	bl	800390c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80036ec:	4b56      	ldr	r3, [pc, #344]	; (8003848 <pvPortMalloc+0x178>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f040 808e 	bne.w	8003816 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01d      	beq.n	800373c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003700:	2208      	movs	r2, #8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	2b00      	cmp	r3, #0
 8003710:	d014      	beq.n	800373c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f023 0307 	bic.w	r3, r3, #7
 8003718:	3308      	adds	r3, #8
 800371a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <pvPortMalloc+0x6c>
	__asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	617b      	str	r3, [r7, #20]
}
 8003738:	bf00      	nop
 800373a:	e7fe      	b.n	800373a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d069      	beq.n	8003816 <pvPortMalloc+0x146>
 8003742:	4b42      	ldr	r3, [pc, #264]	; (800384c <pvPortMalloc+0x17c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	d864      	bhi.n	8003816 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800374c:	4b40      	ldr	r3, [pc, #256]	; (8003850 <pvPortMalloc+0x180>)
 800374e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003750:	4b3f      	ldr	r3, [pc, #252]	; (8003850 <pvPortMalloc+0x180>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003756:	e004      	b.n	8003762 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	d903      	bls.n	8003774 <pvPortMalloc+0xa4>
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f1      	bne.n	8003758 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003774:	4b33      	ldr	r3, [pc, #204]	; (8003844 <pvPortMalloc+0x174>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377a:	429a      	cmp	r2, r3
 800377c:	d04b      	beq.n	8003816 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2208      	movs	r2, #8
 8003784:	4413      	add	r3, r2
 8003786:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	1ad2      	subs	r2, r2, r3
 8003798:	2308      	movs	r3, #8
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	429a      	cmp	r2, r3
 800379e:	d91f      	bls.n	80037e0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80037a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <pvPortMalloc+0xf8>
	__asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	613b      	str	r3, [r7, #16]
}
 80037c4:	bf00      	nop
 80037c6:	e7fe      	b.n	80037c6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	1ad2      	subs	r2, r2, r3
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80037da:	69b8      	ldr	r0, [r7, #24]
 80037dc:	f000 f8f8 	bl	80039d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80037e0:	4b1a      	ldr	r3, [pc, #104]	; (800384c <pvPortMalloc+0x17c>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	4a18      	ldr	r2, [pc, #96]	; (800384c <pvPortMalloc+0x17c>)
 80037ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80037ee:	4b17      	ldr	r3, [pc, #92]	; (800384c <pvPortMalloc+0x17c>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <pvPortMalloc+0x184>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d203      	bcs.n	8003802 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80037fa:	4b14      	ldr	r3, [pc, #80]	; (800384c <pvPortMalloc+0x17c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a15      	ldr	r2, [pc, #84]	; (8003854 <pvPortMalloc+0x184>)
 8003800:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	4b10      	ldr	r3, [pc, #64]	; (8003848 <pvPortMalloc+0x178>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	431a      	orrs	r2, r3
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003816:	f7ff fa93 	bl	8002d40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <pvPortMalloc+0x16a>
	__asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	60fb      	str	r3, [r7, #12]
}
 8003836:	bf00      	nop
 8003838:	e7fe      	b.n	8003838 <pvPortMalloc+0x168>
	return pvReturn;
 800383a:	69fb      	ldr	r3, [r7, #28]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3728      	adds	r7, #40	; 0x28
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20001060 	.word	0x20001060
 8003848:	2000106c 	.word	0x2000106c
 800384c:	20001064 	.word	0x20001064
 8003850:	20001058 	.word	0x20001058
 8003854:	20001068 	.word	0x20001068

08003858 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d048      	beq.n	80038fc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800386a:	2308      	movs	r3, #8
 800386c:	425b      	negs	r3, r3
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4413      	add	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	4b21      	ldr	r3, [pc, #132]	; (8003904 <vPortFree+0xac>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4013      	ands	r3, r2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <vPortFree+0x44>
	__asm volatile
 8003886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	60fb      	str	r3, [r7, #12]
}
 8003898:	bf00      	nop
 800389a:	e7fe      	b.n	800389a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <vPortFree+0x62>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	60bb      	str	r3, [r7, #8]
}
 80038b6:	bf00      	nop
 80038b8:	e7fe      	b.n	80038b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <vPortFree+0xac>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d019      	beq.n	80038fc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d115      	bne.n	80038fc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <vPortFree+0xac>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	43db      	mvns	r3, r3
 80038da:	401a      	ands	r2, r3
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80038e0:	f7ff fa20 	bl	8002d24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	4b07      	ldr	r3, [pc, #28]	; (8003908 <vPortFree+0xb0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4413      	add	r3, r2
 80038ee:	4a06      	ldr	r2, [pc, #24]	; (8003908 <vPortFree+0xb0>)
 80038f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80038f2:	6938      	ldr	r0, [r7, #16]
 80038f4:	f000 f86c 	bl	80039d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80038f8:	f7ff fa22 	bl	8002d40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80038fc:	bf00      	nop
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	2000106c 	.word	0x2000106c
 8003908:	20001064 	.word	0x20001064

0800390c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003912:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003916:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003918:	4b27      	ldr	r3, [pc, #156]	; (80039b8 <prvHeapInit+0xac>)
 800391a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00c      	beq.n	8003940 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3307      	adds	r3, #7
 800392a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0307 	bic.w	r3, r3, #7
 8003932:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	4a1f      	ldr	r2, [pc, #124]	; (80039b8 <prvHeapInit+0xac>)
 800393c:	4413      	add	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003944:	4a1d      	ldr	r2, [pc, #116]	; (80039bc <prvHeapInit+0xb0>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800394a:	4b1c      	ldr	r3, [pc, #112]	; (80039bc <prvHeapInit+0xb0>)
 800394c:	2200      	movs	r2, #0
 800394e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	4413      	add	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003958:	2208      	movs	r2, #8
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0307 	bic.w	r3, r3, #7
 8003966:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a15      	ldr	r2, [pc, #84]	; (80039c0 <prvHeapInit+0xb4>)
 800396c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800396e:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <prvHeapInit+0xb4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003976:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <prvHeapInit+0xb4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	1ad2      	subs	r2, r2, r3
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <prvHeapInit+0xb4>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <prvHeapInit+0xb8>)
 800399a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <prvHeapInit+0xbc>)
 80039a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80039a4:	4b09      	ldr	r3, [pc, #36]	; (80039cc <prvHeapInit+0xc0>)
 80039a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039aa:	601a      	str	r2, [r3, #0]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000458 	.word	0x20000458
 80039bc:	20001058 	.word	0x20001058
 80039c0:	20001060 	.word	0x20001060
 80039c4:	20001068 	.word	0x20001068
 80039c8:	20001064 	.word	0x20001064
 80039cc:	2000106c 	.word	0x2000106c

080039d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80039d8:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <prvInsertBlockIntoFreeList+0xa8>)
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e002      	b.n	80039e4 <prvInsertBlockIntoFreeList+0x14>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d8f7      	bhi.n	80039de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	4413      	add	r3, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d108      	bne.n	8003a12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	441a      	add	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	441a      	add	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d118      	bne.n	8003a58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <prvInsertBlockIntoFreeList+0xac>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d00d      	beq.n	8003a4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	441a      	add	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e008      	b.n	8003a60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <prvInsertBlockIntoFreeList+0xac>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e003      	b.n	8003a60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d002      	beq.n	8003a6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	20001058 	.word	0x20001058
 8003a7c:	20001060 	.word	0x20001060

08003a80 <__libc_init_array>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	2600      	movs	r6, #0
 8003a84:	4d0c      	ldr	r5, [pc, #48]	; (8003ab8 <__libc_init_array+0x38>)
 8003a86:	4c0d      	ldr	r4, [pc, #52]	; (8003abc <__libc_init_array+0x3c>)
 8003a88:	1b64      	subs	r4, r4, r5
 8003a8a:	10a4      	asrs	r4, r4, #2
 8003a8c:	42a6      	cmp	r6, r4
 8003a8e:	d109      	bne.n	8003aa4 <__libc_init_array+0x24>
 8003a90:	f000 f838 	bl	8003b04 <_init>
 8003a94:	2600      	movs	r6, #0
 8003a96:	4d0a      	ldr	r5, [pc, #40]	; (8003ac0 <__libc_init_array+0x40>)
 8003a98:	4c0a      	ldr	r4, [pc, #40]	; (8003ac4 <__libc_init_array+0x44>)
 8003a9a:	1b64      	subs	r4, r4, r5
 8003a9c:	10a4      	asrs	r4, r4, #2
 8003a9e:	42a6      	cmp	r6, r4
 8003aa0:	d105      	bne.n	8003aae <__libc_init_array+0x2e>
 8003aa2:	bd70      	pop	{r4, r5, r6, pc}
 8003aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa8:	4798      	blx	r3
 8003aaa:	3601      	adds	r6, #1
 8003aac:	e7ee      	b.n	8003a8c <__libc_init_array+0xc>
 8003aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab2:	4798      	blx	r3
 8003ab4:	3601      	adds	r6, #1
 8003ab6:	e7f2      	b.n	8003a9e <__libc_init_array+0x1e>
 8003ab8:	08003ca8 	.word	0x08003ca8
 8003abc:	08003ca8 	.word	0x08003ca8
 8003ac0:	08003ca8 	.word	0x08003ca8
 8003ac4:	08003cac 	.word	0x08003cac

08003ac8 <memset>:
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4402      	add	r2, r0
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d100      	bne.n	8003ad2 <memset+0xa>
 8003ad0:	4770      	bx	lr
 8003ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad6:	e7f9      	b.n	8003acc <memset+0x4>

08003ad8 <strstr>:
 8003ad8:	780a      	ldrb	r2, [r1, #0]
 8003ada:	b570      	push	{r4, r5, r6, lr}
 8003adc:	b96a      	cbnz	r2, 8003afa <strstr+0x22>
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d109      	bne.n	8003af8 <strstr+0x20>
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	4605      	mov	r5, r0
 8003ae8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f6      	beq.n	8003ade <strstr+0x6>
 8003af0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003af4:	429e      	cmp	r6, r3
 8003af6:	d0f7      	beq.n	8003ae8 <strstr+0x10>
 8003af8:	3001      	adds	r0, #1
 8003afa:	7803      	ldrb	r3, [r0, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ef      	bne.n	8003ae0 <strstr+0x8>
 8003b00:	4618      	mov	r0, r3
 8003b02:	e7ec      	b.n	8003ade <strstr+0x6>

08003b04 <_init>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr

08003b10 <_fini>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	bf00      	nop
 8003b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b16:	bc08      	pop	{r3}
 8003b18:	469e      	mov	lr, r3
 8003b1a:	4770      	bx	lr
