
WifiMySQL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f20  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003274  08003274  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003274  08003274  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003274  08003274  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003274  08003274  00013274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800327c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000078  080032f4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080032f4  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b10  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015e5  00000000  00000000  00027bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00029198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  00029858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ee5  00000000  00000000  00029e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000893b  00000000  00000000  00042d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a85  00000000  00000000  0004b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc135  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e38  00000000  00000000  000dc188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	080030ec 	.word	0x080030ec

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	080030ec 	.word	0x080030ec

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ESP8266_Init(void)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b09d      	sub	sp, #116	; 0x74
 8000238:	af00      	add	r7, sp, #0
  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+RST\r\n", 8, HAL_MAX_DELAY); // ESP8266'nın sıfırlanması
 800023a:	f04f 33ff 	mov.w	r3, #4294967295
 800023e:	2208      	movs	r2, #8
 8000240:	493b      	ldr	r1, [pc, #236]	; (8000330 <ESP8266_Init+0xfc>)
 8000242:	483c      	ldr	r0, [pc, #240]	; (8000334 <ESP8266_Init+0x100>)
 8000244:	f001 fc60 	bl	8001b08 <HAL_UART_Transmit>
  HAL_Delay(2000); // 2 saniye bekleme
 8000248:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800024c:	f000 fbdc 	bl	8000a08 <HAL_Delay>

  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CWMODE=1\r\n", 13, HAL_MAX_DELAY); // WiFi modunun istemci moduna ayarlanması
 8000250:	f04f 33ff 	mov.w	r3, #4294967295
 8000254:	220d      	movs	r2, #13
 8000256:	4938      	ldr	r1, [pc, #224]	; (8000338 <ESP8266_Init+0x104>)
 8000258:	4836      	ldr	r0, [pc, #216]	; (8000334 <ESP8266_Init+0x100>)
 800025a:	f001 fc55 	bl	8001b08 <HAL_UART_Transmit>
  HAL_Delay(1000); // 1 saniye bekleme
 800025e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000262:	f000 fbd1 	bl	8000a08 <HAL_Delay>

  char connect_cmd[100];
  sprintf(connect_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", "Wifi Name", "Password"); // WiFi ağına bağlantı
 8000266:	f107 000c 	add.w	r0, r7, #12
 800026a:	4b34      	ldr	r3, [pc, #208]	; (800033c <ESP8266_Init+0x108>)
 800026c:	4a34      	ldr	r2, [pc, #208]	; (8000340 <ESP8266_Init+0x10c>)
 800026e:	4935      	ldr	r1, [pc, #212]	; (8000344 <ESP8266_Init+0x110>)
 8000270:	f002 faac 	bl	80027cc <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)connect_cmd, strlen(connect_cmd), HAL_MAX_DELAY);
 8000274:	f107 030c 	add.w	r3, r7, #12
 8000278:	4618      	mov	r0, r3
 800027a:	f7ff ffd3 	bl	8000224 <strlen>
 800027e:	4603      	mov	r3, r0
 8000280:	b29a      	uxth	r2, r3
 8000282:	f107 010c 	add.w	r1, r7, #12
 8000286:	f04f 33ff 	mov.w	r3, #4294967295
 800028a:	482a      	ldr	r0, [pc, #168]	; (8000334 <ESP8266_Init+0x100>)
 800028c:	f001 fc3c 	bl	8001b08 <HAL_UART_Transmit>
   HAL_Delay(7000); // 7 saniye bekleme
 8000290:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000294:	f000 fbb8 	bl	8000a08 <HAL_Delay>

   HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPMUX=0\r\n", 13, HAL_MAX_DELAY); // Bağlantı noktası çoklu modunun devre dışı bırakılması
 8000298:	f04f 33ff 	mov.w	r3, #4294967295
 800029c:	220d      	movs	r2, #13
 800029e:	492a      	ldr	r1, [pc, #168]	; (8000348 <ESP8266_Init+0x114>)
 80002a0:	4824      	ldr	r0, [pc, #144]	; (8000334 <ESP8266_Init+0x100>)
 80002a2:	f001 fc31 	bl	8001b08 <HAL_UART_Transmit>
   HAL_Delay(1000); // 1 saniye bekleme
 80002a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002aa:	f000 fbad 	bl	8000a08 <HAL_Delay>

   HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPSTART=\"TCP\",\"", 20, HAL_MAX_DELAY);
 80002ae:	f04f 33ff 	mov.w	r3, #4294967295
 80002b2:	2214      	movs	r2, #20
 80002b4:	4925      	ldr	r1, [pc, #148]	; (800034c <ESP8266_Init+0x118>)
 80002b6:	481f      	ldr	r0, [pc, #124]	; (8000334 <ESP8266_Init+0x100>)
 80002b8:	f001 fc26 	bl	8001b08 <HAL_UART_Transmit>
   HAL_UART_Transmit(&huart1, (uint8_t*)db_ip, strlen(db_ip), HAL_MAX_DELAY); // Veritabanına TCP bağlantısı
 80002bc:	4b24      	ldr	r3, [pc, #144]	; (8000350 <ESP8266_Init+0x11c>)
 80002be:	681c      	ldr	r4, [r3, #0]
 80002c0:	4b23      	ldr	r3, [pc, #140]	; (8000350 <ESP8266_Init+0x11c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ffad 	bl	8000224 <strlen>
 80002ca:	4603      	mov	r3, r0
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	f04f 33ff 	mov.w	r3, #4294967295
 80002d2:	4621      	mov	r1, r4
 80002d4:	4817      	ldr	r0, [pc, #92]	; (8000334 <ESP8266_Init+0x100>)
 80002d6:	f001 fc17 	bl	8001b08 <HAL_UART_Transmit>
   HAL_UART_Transmit(&huart1, (uint8_t*)"\",", 2, HAL_MAX_DELAY);
 80002da:	f04f 33ff 	mov.w	r3, #4294967295
 80002de:	2202      	movs	r2, #2
 80002e0:	491c      	ldr	r1, [pc, #112]	; (8000354 <ESP8266_Init+0x120>)
 80002e2:	4814      	ldr	r0, [pc, #80]	; (8000334 <ESP8266_Init+0x100>)
 80002e4:	f001 fc10 	bl	8001b08 <HAL_UART_Transmit>
   char db_port_str[6];
   sprintf(db_port_str, "%d", db_port);
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <ESP8266_Init+0x124>)
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	461a      	mov	r2, r3
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	491a      	ldr	r1, [pc, #104]	; (800035c <ESP8266_Init+0x128>)
 80002f2:	4618      	mov	r0, r3
 80002f4:	f002 fa6a 	bl	80027cc <siprintf>
   HAL_UART_Transmit(&huart1, (uint8_t*)db_port_str, strlen(db_port_str), HAL_MAX_DELAY); // Bağlantı noktası
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	4618      	mov	r0, r3
 80002fc:	f7ff ff92 	bl	8000224 <strlen>
 8000300:	4603      	mov	r3, r0
 8000302:	b29a      	uxth	r2, r3
 8000304:	1d39      	adds	r1, r7, #4
 8000306:	f04f 33ff 	mov.w	r3, #4294967295
 800030a:	480a      	ldr	r0, [pc, #40]	; (8000334 <ESP8266_Init+0x100>)
 800030c:	f001 fbfc 	bl	8001b08 <HAL_UART_Transmit>
   HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000310:	f04f 33ff 	mov.w	r3, #4294967295
 8000314:	2202      	movs	r2, #2
 8000316:	4912      	ldr	r1, [pc, #72]	; (8000360 <ESP8266_Init+0x12c>)
 8000318:	4806      	ldr	r0, [pc, #24]	; (8000334 <ESP8266_Init+0x100>)
 800031a:	f001 fbf5 	bl	8001b08 <HAL_UART_Transmit>
   HAL_Delay(3000); // 3 saniye bekleme
 800031e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000322:	f000 fb71 	bl	8000a08 <HAL_Delay>
 }
 8000326:	bf00      	nop
 8000328:	3774      	adds	r7, #116	; 0x74
 800032a:	46bd      	mov	sp, r7
 800032c:	bd90      	pop	{r4, r7, pc}
 800032e:	bf00      	nop
 8000330:	08003148 	.word	0x08003148
 8000334:	20000094 	.word	0x20000094
 8000338:	08003154 	.word	0x08003154
 800033c:	08003164 	.word	0x08003164
 8000340:	08003170 	.word	0x08003170
 8000344:	0800317c 	.word	0x0800317c
 8000348:	08003194 	.word	0x08003194
 800034c:	080031a4 	.word	0x080031a4
 8000350:	20000000 	.word	0x20000000
 8000354:	080031b8 	.word	0x080031b8
 8000358:	20000004 	.word	0x20000004
 800035c:	080031bc 	.word	0x080031bc
 8000360:	080031c0 	.word	0x080031c0

08000364 <ESP8266_SendData>:

 void ESP8266_SendData(char* data)
 {
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPSEND=", 11, HAL_MAX_DELAY);
 800036c:	f04f 33ff 	mov.w	r3, #4294967295
 8000370:	220b      	movs	r2, #11
 8000372:	491d      	ldr	r1, [pc, #116]	; (80003e8 <ESP8266_SendData+0x84>)
 8000374:	481d      	ldr	r0, [pc, #116]	; (80003ec <ESP8266_SendData+0x88>)
 8000376:	f001 fbc7 	bl	8001b08 <HAL_UART_Transmit>
   char data_length_str[6];
   sprintf(data_length_str, "%d", strlen(data));
 800037a:	6878      	ldr	r0, [r7, #4]
 800037c:	f7ff ff52 	bl	8000224 <strlen>
 8000380:	4602      	mov	r2, r0
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	491a      	ldr	r1, [pc, #104]	; (80003f0 <ESP8266_SendData+0x8c>)
 8000388:	4618      	mov	r0, r3
 800038a:	f002 fa1f 	bl	80027cc <siprintf>
   HAL_UART_Transmit(&huart1, (uint8_t*)data_length_str, strlen(data_length_str), HAL_MAX_DELAY); // Veri uzunluğu
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff46 	bl	8000224 <strlen>
 8000398:	4603      	mov	r3, r0
 800039a:	b29a      	uxth	r2, r3
 800039c:	f107 0108 	add.w	r1, r7, #8
 80003a0:	f04f 33ff 	mov.w	r3, #4294967295
 80003a4:	4811      	ldr	r0, [pc, #68]	; (80003ec <ESP8266_SendData+0x88>)
 80003a6:	f001 fbaf 	bl	8001b08 <HAL_UART_Transmit>
   HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80003aa:	f04f 33ff 	mov.w	r3, #4294967295
 80003ae:	2202      	movs	r2, #2
 80003b0:	4910      	ldr	r1, [pc, #64]	; (80003f4 <ESP8266_SendData+0x90>)
 80003b2:	480e      	ldr	r0, [pc, #56]	; (80003ec <ESP8266_SendData+0x88>)
 80003b4:	f001 fba8 	bl	8001b08 <HAL_UART_Transmit>
   HAL_Delay(2000); // 2 saniye bekleme
 80003b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003bc:	f000 fb24 	bl	8000a08 <HAL_Delay>
   HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), HAL_MAX_DELAY); // Veri gönderme
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f7ff ff2f 	bl	8000224 <strlen>
 80003c6:	4603      	mov	r3, r0
 80003c8:	b29a      	uxth	r2, r3
 80003ca:	f04f 33ff 	mov.w	r3, #4294967295
 80003ce:	6879      	ldr	r1, [r7, #4]
 80003d0:	4806      	ldr	r0, [pc, #24]	; (80003ec <ESP8266_SendData+0x88>)
 80003d2:	f001 fb99 	bl	8001b08 <HAL_UART_Transmit>
   HAL_Delay(3000); // 3 saniye bekleme
 80003d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80003da:	f000 fb15 	bl	8000a08 <HAL_Delay>
 }
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	080031c4 	.word	0x080031c4
 80003ec:	20000094 	.word	0x20000094
 80003f0:	080031bc 	.word	0x080031bc
 80003f4:	080031c0 	.word	0x080031c0

080003f8 <CheckDatabase>:

 void CheckDatabase(void)
 {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
   HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPSEND=4\r\n", 14, HAL_MAX_DELAY);
 80003fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000400:	220e      	movs	r2, #14
 8000402:	490d      	ldr	r1, [pc, #52]	; (8000438 <CheckDatabase+0x40>)
 8000404:	480d      	ldr	r0, [pc, #52]	; (800043c <CheckDatabase+0x44>)
 8000406:	f001 fb7f 	bl	8001b08 <HAL_UART_Transmit>
   HAL_Delay(2000); // 2 saniye bekleme
 800040a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800040e:	f000 fafb 	bl	8000a08 <HAL_Delay>
   HAL_UART_Transmit(&huart1, (uint8_t*)"PING\r\n", 6, HAL_MAX_DELAY); // Veritabanı bağlantısını kontrol etmek için PING gönderme
 8000412:	f04f 33ff 	mov.w	r3, #4294967295
 8000416:	2206      	movs	r2, #6
 8000418:	4909      	ldr	r1, [pc, #36]	; (8000440 <CheckDatabase+0x48>)
 800041a:	4808      	ldr	r0, [pc, #32]	; (800043c <CheckDatabase+0x44>)
 800041c:	f001 fb74 	bl	8001b08 <HAL_UART_Transmit>
   HAL_Delay(3000); // 3 saniye bekleme
 8000420:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000424:	f000 faf0 	bl	8000a08 <HAL_Delay>

   HAL_UART_Receive_IT(&huart1, (uint8_t*)esp_data, 100); // ESP8266'dan gelen yanıtı almak için UART kesmesini başlatma
 8000428:	2264      	movs	r2, #100	; 0x64
 800042a:	4906      	ldr	r1, [pc, #24]	; (8000444 <CheckDatabase+0x4c>)
 800042c:	4803      	ldr	r0, [pc, #12]	; (800043c <CheckDatabase+0x44>)
 800042e:	f001 fbee 	bl	8001c0e <HAL_UART_Receive_IT>
 }
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	080031d0 	.word	0x080031d0
 800043c:	20000094 	.word	0x20000094
 8000440:	080031e0 	.word	0x080031e0
 8000444:	20000124 	.word	0x20000124

08000448 <main>:

 int main(void)
 {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
   HAL_Init();
 800044c:	f000 fa7a 	bl	8000944 <HAL_Init>

   SystemClock_Config();
 8000450:	f000 f83e 	bl	80004d0 <SystemClock_Config>

   MX_GPIO_Init();
 8000454:	f000 f8d2 	bl	80005fc <MX_GPIO_Init>
   MX_USART1_UART_Init();
 8000458:	f000 f87c 	bl	8000554 <MX_USART1_UART_Init>
   MX_USART2_UART_Init();
 800045c:	f000 f8a4 	bl	80005a8 <MX_USART2_UART_Init>

   ESP8266_Init(); // ESP8266'nın başlatılması
 8000460:	f7ff fee8 	bl	8000234 <ESP8266_Init>

   while (1)
   {
     CheckDatabase(); // Veritabanını kontrol etme
 8000464:	f7ff ffc8 	bl	80003f8 <CheckDatabase>

     // LED'leri kontrol etme
     if (strstr(esp_data, "LED_ON")) // ESP8266'dan gelen yanıtta "LED_ON" ifadesini arama
 8000468:	4913      	ldr	r1, [pc, #76]	; (80004b8 <main+0x70>)
 800046a:	4814      	ldr	r0, [pc, #80]	; (80004bc <main+0x74>)
 800046c:	f002 f9ce 	bl	800280c <strstr>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d008      	beq.n	8000488 <main+0x40>
     {
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // LED'i açma
 8000476:	2201      	movs	r2, #1
 8000478:	2120      	movs	r1, #32
 800047a:	4811      	ldr	r0, [pc, #68]	; (80004c0 <main+0x78>)
 800047c:	f000 fecc 	bl	8001218 <HAL_GPIO_WritePin>
       ESP8266_SendData("LED is ON\r\n"); // Yanıt olarak "LED is ON" gönderme
 8000480:	4810      	ldr	r0, [pc, #64]	; (80004c4 <main+0x7c>)
 8000482:	f7ff ff6f 	bl	8000364 <ESP8266_SendData>
 8000486:	e00e      	b.n	80004a6 <main+0x5e>
     }
     else if (strstr(esp_data, "LED_OFF")) // ESP8266'dan gelen yanıtta "LED_OFF" ifadesini arama
 8000488:	490f      	ldr	r1, [pc, #60]	; (80004c8 <main+0x80>)
 800048a:	480c      	ldr	r0, [pc, #48]	; (80004bc <main+0x74>)
 800048c:	f002 f9be 	bl	800280c <strstr>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d007      	beq.n	80004a6 <main+0x5e>
     {
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // LED'i kapatma
 8000496:	2200      	movs	r2, #0
 8000498:	2120      	movs	r1, #32
 800049a:	4809      	ldr	r0, [pc, #36]	; (80004c0 <main+0x78>)
 800049c:	f000 febc 	bl	8001218 <HAL_GPIO_WritePin>
       ESP8266_SendData("LED is OFF\r\n"); // Yanıt olarak "LED is OFF" gönderme
 80004a0:	480a      	ldr	r0, [pc, #40]	; (80004cc <main+0x84>)
 80004a2:	f7ff ff5f 	bl	8000364 <ESP8266_SendData>
     }

     memset(esp_data, 0, sizeof(esp_data)); // esp_data dizisini sıfırlama
 80004a6:	2264      	movs	r2, #100	; 0x64
 80004a8:	2100      	movs	r1, #0
 80004aa:	4804      	ldr	r0, [pc, #16]	; (80004bc <main+0x74>)
 80004ac:	f002 f986 	bl	80027bc <memset>

     HAL_Delay(100); // 100 ms bekleme
 80004b0:	2064      	movs	r0, #100	; 0x64
 80004b2:	f000 faa9 	bl	8000a08 <HAL_Delay>
     CheckDatabase(); // Veritabanını kontrol etme
 80004b6:	e7d5      	b.n	8000464 <main+0x1c>
 80004b8:	080031e8 	.word	0x080031e8
 80004bc:	20000124 	.word	0x20000124
 80004c0:	40010800 	.word	0x40010800
 80004c4:	080031f0 	.word	0x080031f0
 80004c8:	080031fc 	.word	0x080031fc
 80004cc:	08003204 	.word	0x08003204

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b090      	sub	sp, #64	; 0x40
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0318 	add.w	r3, r7, #24
 80004da:	2228      	movs	r2, #40	; 0x28
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f002 f96c 	bl	80027bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f2:	2302      	movs	r3, #2
 80004f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f6:	2301      	movs	r3, #1
 80004f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fa:	2310      	movs	r3, #16
 80004fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fe:	2302      	movs	r3, #2
 8000500:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000502:	2300      	movs	r3, #0
 8000504:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000506:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 800050a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	f107 0318 	add.w	r3, r7, #24
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fe99 	bl	8001248 <HAL_RCC_OscConfig>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800051c:	f000 f8b8 	bl	8000690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000520:	230f      	movs	r3, #15
 8000522:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000524:	2302      	movs	r3, #2
 8000526:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800052c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000530:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2101      	movs	r1, #1
 800053a:	4618      	mov	r0, r3
 800053c:	f001 f906 	bl	800174c <HAL_RCC_ClockConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000546:	f000 f8a3 	bl	8000690 <Error_Handler>
  }
}
 800054a:	bf00      	nop
 800054c:	3740      	adds	r7, #64	; 0x40
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 800055a:	4a12      	ldr	r2, [pc, #72]	; (80005a4 <MX_USART1_UART_Init+0x50>)
 800055c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 8000560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000564:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 800057a:	220c      	movs	r2, #12
 800057c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 8000580:	2200      	movs	r2, #0
 8000582:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 8000586:	2200      	movs	r2, #0
 8000588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 800058c:	f001 fa6c 	bl	8001a68 <HAL_UART_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000596:	f000 f87b 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000094 	.word	0x20000094
 80005a4:	40013800 	.word	0x40013800

080005a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <MX_USART2_UART_Init+0x50>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005e0:	f001 fa42 	bl	8001a68 <HAL_UART_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ea:	f000 f851 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200000dc 	.word	0x200000dc
 80005f8:	40004400 	.word	0x40004400

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_GPIO_Init+0x8c>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <MX_GPIO_Init+0x8c>)
 8000616:	f043 0320 	orr.w	r3, r3, #32
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_GPIO_Init+0x8c>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0320 	and.w	r3, r3, #32
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_GPIO_Init+0x8c>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a16      	ldr	r2, [pc, #88]	; (8000688 <MX_GPIO_Init+0x8c>)
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_GPIO_Init+0x8c>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0304 	and.w	r3, r3, #4
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_GPIO_Init+0x8c>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a10      	ldr	r2, [pc, #64]	; (8000688 <MX_GPIO_Init+0x8c>)
 8000646:	f043 0308 	orr.w	r3, r3, #8
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_GPIO_Init+0x8c>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0308 	and.w	r3, r3, #8
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, redLed_Pin|greenLed_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2160      	movs	r1, #96	; 0x60
 800065c:	480b      	ldr	r0, [pc, #44]	; (800068c <MX_GPIO_Init+0x90>)
 800065e:	f000 fddb 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : redLed_Pin greenLed_Pin */
  GPIO_InitStruct.Pin = redLed_Pin|greenLed_Pin;
 8000662:	2360      	movs	r3, #96	; 0x60
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2302      	movs	r3, #2
 8000670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4619      	mov	r1, r3
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_GPIO_Init+0x90>)
 800067a:	f000 fc39 	bl	8000ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067e:	bf00      	nop
 8000680:	3720      	adds	r7, #32
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000
 800068c:	40010c00 	.word	0x40010c00

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	e7fe      	b.n	8000698 <Error_Handler+0x8>
	...

0800069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <HAL_MspInit+0x40>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <HAL_MspInit+0x40>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6193      	str	r3, [r2, #24]
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <HAL_MspInit+0x40>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <HAL_MspInit+0x40>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_MspInit+0x40>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_MspInit+0x40>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000

080006e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a3f      	ldr	r2, [pc, #252]	; (80007f8 <HAL_UART_MspInit+0x118>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d13a      	bne.n	8000776 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000700:	4b3e      	ldr	r3, [pc, #248]	; (80007fc <HAL_UART_MspInit+0x11c>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a3d      	ldr	r2, [pc, #244]	; (80007fc <HAL_UART_MspInit+0x11c>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <HAL_UART_MspInit+0x11c>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b38      	ldr	r3, [pc, #224]	; (80007fc <HAL_UART_MspInit+0x11c>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a37      	ldr	r2, [pc, #220]	; (80007fc <HAL_UART_MspInit+0x11c>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b35      	ldr	r3, [pc, #212]	; (80007fc <HAL_UART_MspInit+0x11c>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	f107 0318 	add.w	r3, r7, #24
 8000742:	4619      	mov	r1, r3
 8000744:	482e      	ldr	r0, [pc, #184]	; (8000800 <HAL_UART_MspInit+0x120>)
 8000746:	f000 fbd3 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800074a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800074e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	4619      	mov	r1, r3
 800075e:	4828      	ldr	r0, [pc, #160]	; (8000800 <HAL_UART_MspInit+0x120>)
 8000760:	f000 fbc6 	bl	8000ef0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	2025      	movs	r0, #37	; 0x25
 800076a:	f000 fa48 	bl	8000bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800076e:	2025      	movs	r0, #37	; 0x25
 8000770:	f000 fa61 	bl	8000c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000774:	e03c      	b.n	80007f0 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a22      	ldr	r2, [pc, #136]	; (8000804 <HAL_UART_MspInit+0x124>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d137      	bne.n	80007f0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <HAL_UART_MspInit+0x11c>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	4a1d      	ldr	r2, [pc, #116]	; (80007fc <HAL_UART_MspInit+0x11c>)
 8000786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078a:	61d3      	str	r3, [r2, #28]
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <HAL_UART_MspInit+0x11c>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <HAL_UART_MspInit+0x11c>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a17      	ldr	r2, [pc, #92]	; (80007fc <HAL_UART_MspInit+0x11c>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <HAL_UART_MspInit+0x11c>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007b0:	2304      	movs	r3, #4
 80007b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b8:	2303      	movs	r3, #3
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0318 	add.w	r3, r7, #24
 80007c0:	4619      	mov	r1, r3
 80007c2:	480f      	ldr	r0, [pc, #60]	; (8000800 <HAL_UART_MspInit+0x120>)
 80007c4:	f000 fb94 	bl	8000ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007c8:	2308      	movs	r3, #8
 80007ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 0318 	add.w	r3, r7, #24
 80007d8:	4619      	mov	r1, r3
 80007da:	4809      	ldr	r0, [pc, #36]	; (8000800 <HAL_UART_MspInit+0x120>)
 80007dc:	f000 fb88 	bl	8000ef0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	2026      	movs	r0, #38	; 0x26
 80007e6:	f000 fa0a 	bl	8000bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007ea:	2026      	movs	r0, #38	; 0x26
 80007ec:	f000 fa23 	bl	8000c36 <HAL_NVIC_EnableIRQ>
}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40013800 	.word	0x40013800
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010800 	.word	0x40010800
 8000804:	40004400 	.word	0x40004400

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084e:	f000 f8bf 	bl	80009d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <USART1_IRQHandler+0x10>)
 800085e:	f001 f9fb 	bl	8001c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000094 	.word	0x20000094

0800086c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <USART2_IRQHandler+0x10>)
 8000872:	f001 f9f1 	bl	8001c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000dc 	.word	0x200000dc

08000880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000888:	4a14      	ldr	r2, [pc, #80]	; (80008dc <_sbrk+0x5c>)
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <_sbrk+0x60>)
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <_sbrk+0x64>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <_sbrk+0x64>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <_sbrk+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d207      	bcs.n	80008c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b0:	f001 ff5a 	bl	8002768 <__errno>
 80008b4:	4603      	mov	r3, r0
 80008b6:	220c      	movs	r2, #12
 80008b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
 80008be:	e009      	b.n	80008d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <_sbrk+0x64>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <_sbrk+0x64>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <_sbrk+0x64>)
 80008d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d2:	68fb      	ldr	r3, [r7, #12]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000c000 	.word	0x2000c000
 80008e0:	00000400 	.word	0x00000400
 80008e4:	20000188 	.word	0x20000188
 80008e8:	200001a0 	.word	0x200001a0

080008ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f8:	f7ff fff8 	bl	80008ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480b      	ldr	r0, [pc, #44]	; (800092c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008fe:	490c      	ldr	r1, [pc, #48]	; (8000930 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000900:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a09      	ldr	r2, [pc, #36]	; (8000938 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000914:	4c09      	ldr	r4, [pc, #36]	; (800093c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000922:	f001 ff27 	bl	8002774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000926:	f7ff fd8f 	bl	8000448 <main>
  bx lr
 800092a:	4770      	bx	lr
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000934:	0800327c 	.word	0x0800327c
  ldr r2, =_sbss
 8000938:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800093c:	200001a0 	.word	0x200001a0

08000940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC1_2_IRQHandler>
	...

08000944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_Init+0x28>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a07      	ldr	r2, [pc, #28]	; (800096c <HAL_Init+0x28>)
 800094e:	f043 0310 	orr.w	r3, r3, #16
 8000952:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f947 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095a:	200f      	movs	r0, #15
 800095c:	f000 f808 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000960:	f7ff fe9c 	bl	800069c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40022000 	.word	0x40022000

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_InitTick+0x54>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x58>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	fbb3 f3f1 	udiv	r3, r3, r1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f95f 	bl	8000c52 <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e00e      	b.n	80009bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	d80a      	bhi.n	80009ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f000 f927 	bl	8000bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b0:	4a06      	ldr	r2, [pc, #24]	; (80009cc <HAL_InitTick+0x5c>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e000      	b.n	80009bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20000010 	.word	0x20000010
 80009cc:	2000000c 	.word	0x2000000c

080009d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_IncTick+0x1c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x20>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a03      	ldr	r2, [pc, #12]	; (80009f0 <HAL_IncTick+0x20>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	20000010 	.word	0x20000010
 80009f0:	2000018c 	.word	0x2000018c

080009f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;
 80009f8:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <HAL_GetTick+0x10>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	2000018c 	.word	0x2000018c

08000a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a10:	f7ff fff0 	bl	80009f4 <HAL_GetTick>
 8000a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a20:	d005      	beq.n	8000a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_Delay+0x44>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a2e:	bf00      	nop
 8000a30:	f7ff ffe0 	bl	80009f4 <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d8f7      	bhi.n	8000a30 <HAL_Delay+0x28>
  {
  }
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000010 	.word	0x20000010

08000a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a82:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	60d3      	str	r3, [r2, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	f003 0307 	and.w	r3, r3, #7
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db0b      	blt.n	8000ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 021f 	and.w	r2, r3, #31
 8000acc:	4906      	ldr	r1, [pc, #24]	; (8000ae8 <__NVIC_EnableIRQ+0x34>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	095b      	lsrs	r3, r3, #5
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	; (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	; (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
         );
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	; 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb4:	d301      	bcc.n	8000bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00f      	b.n	8000bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <SysTick_Config+0x40>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f7ff ff90 	bl	8000aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SysTick_Config+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SysTick_Config+0x40>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff2d 	bl	8000a50 <__NVIC_SetPriorityGrouping>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c10:	f7ff ff42 	bl	8000a98 <__NVIC_GetPriorityGrouping>
 8000c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff ff90 	bl	8000b40 <NVIC_EncodePriority>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff5f 	bl	8000aec <__NVIC_SetPriority>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff35 	bl	8000ab4 <__NVIC_EnableIRQ>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ffa2 	bl	8000ba4 <SysTick_Config>
 8000c60:	4603      	mov	r3, r0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b085      	sub	sp, #20
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d008      	beq.n	8000c94 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2204      	movs	r2, #4
 8000c86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	e020      	b.n	8000cd6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f022 020e 	bic.w	r2, r2, #14
 8000ca2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f022 0201 	bic.w	r2, r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d005      	beq.n	8000d04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	e0d6      	b.n	8000eb2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f022 020e 	bic.w	r2, r2, #14
 8000d12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0201 	bic.w	r2, r2, #1
 8000d22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b64      	ldr	r3, [pc, #400]	; (8000ebc <HAL_DMA_Abort_IT+0x1dc>)
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d958      	bls.n	8000de2 <HAL_DMA_Abort_IT+0x102>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a62      	ldr	r2, [pc, #392]	; (8000ec0 <HAL_DMA_Abort_IT+0x1e0>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d04f      	beq.n	8000dda <HAL_DMA_Abort_IT+0xfa>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a61      	ldr	r2, [pc, #388]	; (8000ec4 <HAL_DMA_Abort_IT+0x1e4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d048      	beq.n	8000dd6 <HAL_DMA_Abort_IT+0xf6>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a5f      	ldr	r2, [pc, #380]	; (8000ec8 <HAL_DMA_Abort_IT+0x1e8>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d040      	beq.n	8000dd0 <HAL_DMA_Abort_IT+0xf0>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a5e      	ldr	r2, [pc, #376]	; (8000ecc <HAL_DMA_Abort_IT+0x1ec>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d038      	beq.n	8000dca <HAL_DMA_Abort_IT+0xea>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a5c      	ldr	r2, [pc, #368]	; (8000ed0 <HAL_DMA_Abort_IT+0x1f0>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d030      	beq.n	8000dc4 <HAL_DMA_Abort_IT+0xe4>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a5b      	ldr	r2, [pc, #364]	; (8000ed4 <HAL_DMA_Abort_IT+0x1f4>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d028      	beq.n	8000dbe <HAL_DMA_Abort_IT+0xde>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a52      	ldr	r2, [pc, #328]	; (8000ebc <HAL_DMA_Abort_IT+0x1dc>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d020      	beq.n	8000db8 <HAL_DMA_Abort_IT+0xd8>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a57      	ldr	r2, [pc, #348]	; (8000ed8 <HAL_DMA_Abort_IT+0x1f8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d019      	beq.n	8000db4 <HAL_DMA_Abort_IT+0xd4>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a55      	ldr	r2, [pc, #340]	; (8000edc <HAL_DMA_Abort_IT+0x1fc>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d012      	beq.n	8000db0 <HAL_DMA_Abort_IT+0xd0>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a54      	ldr	r2, [pc, #336]	; (8000ee0 <HAL_DMA_Abort_IT+0x200>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d00a      	beq.n	8000daa <HAL_DMA_Abort_IT+0xca>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a52      	ldr	r2, [pc, #328]	; (8000ee4 <HAL_DMA_Abort_IT+0x204>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d102      	bne.n	8000da4 <HAL_DMA_Abort_IT+0xc4>
 8000d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da2:	e01b      	b.n	8000ddc <HAL_DMA_Abort_IT+0xfc>
 8000da4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da8:	e018      	b.n	8000ddc <HAL_DMA_Abort_IT+0xfc>
 8000daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dae:	e015      	b.n	8000ddc <HAL_DMA_Abort_IT+0xfc>
 8000db0:	2310      	movs	r3, #16
 8000db2:	e013      	b.n	8000ddc <HAL_DMA_Abort_IT+0xfc>
 8000db4:	2301      	movs	r3, #1
 8000db6:	e011      	b.n	8000ddc <HAL_DMA_Abort_IT+0xfc>
 8000db8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dbc:	e00e      	b.n	8000ddc <HAL_DMA_Abort_IT+0xfc>
 8000dbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dc2:	e00b      	b.n	8000ddc <HAL_DMA_Abort_IT+0xfc>
 8000dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc8:	e008      	b.n	8000ddc <HAL_DMA_Abort_IT+0xfc>
 8000dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dce:	e005      	b.n	8000ddc <HAL_DMA_Abort_IT+0xfc>
 8000dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd4:	e002      	b.n	8000ddc <HAL_DMA_Abort_IT+0xfc>
 8000dd6:	2310      	movs	r3, #16
 8000dd8:	e000      	b.n	8000ddc <HAL_DMA_Abort_IT+0xfc>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	4a42      	ldr	r2, [pc, #264]	; (8000ee8 <HAL_DMA_Abort_IT+0x208>)
 8000dde:	6053      	str	r3, [r2, #4]
 8000de0:	e057      	b.n	8000e92 <HAL_DMA_Abort_IT+0x1b2>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a36      	ldr	r2, [pc, #216]	; (8000ec0 <HAL_DMA_Abort_IT+0x1e0>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d04f      	beq.n	8000e8c <HAL_DMA_Abort_IT+0x1ac>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a34      	ldr	r2, [pc, #208]	; (8000ec4 <HAL_DMA_Abort_IT+0x1e4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d048      	beq.n	8000e88 <HAL_DMA_Abort_IT+0x1a8>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a33      	ldr	r2, [pc, #204]	; (8000ec8 <HAL_DMA_Abort_IT+0x1e8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d040      	beq.n	8000e82 <HAL_DMA_Abort_IT+0x1a2>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a31      	ldr	r2, [pc, #196]	; (8000ecc <HAL_DMA_Abort_IT+0x1ec>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d038      	beq.n	8000e7c <HAL_DMA_Abort_IT+0x19c>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a30      	ldr	r2, [pc, #192]	; (8000ed0 <HAL_DMA_Abort_IT+0x1f0>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d030      	beq.n	8000e76 <HAL_DMA_Abort_IT+0x196>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a2e      	ldr	r2, [pc, #184]	; (8000ed4 <HAL_DMA_Abort_IT+0x1f4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d028      	beq.n	8000e70 <HAL_DMA_Abort_IT+0x190>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <HAL_DMA_Abort_IT+0x1dc>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d020      	beq.n	8000e6a <HAL_DMA_Abort_IT+0x18a>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a2a      	ldr	r2, [pc, #168]	; (8000ed8 <HAL_DMA_Abort_IT+0x1f8>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d019      	beq.n	8000e66 <HAL_DMA_Abort_IT+0x186>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a29      	ldr	r2, [pc, #164]	; (8000edc <HAL_DMA_Abort_IT+0x1fc>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d012      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x182>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a27      	ldr	r2, [pc, #156]	; (8000ee0 <HAL_DMA_Abort_IT+0x200>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d00a      	beq.n	8000e5c <HAL_DMA_Abort_IT+0x17c>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a26      	ldr	r2, [pc, #152]	; (8000ee4 <HAL_DMA_Abort_IT+0x204>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d102      	bne.n	8000e56 <HAL_DMA_Abort_IT+0x176>
 8000e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e54:	e01b      	b.n	8000e8e <HAL_DMA_Abort_IT+0x1ae>
 8000e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e5a:	e018      	b.n	8000e8e <HAL_DMA_Abort_IT+0x1ae>
 8000e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e60:	e015      	b.n	8000e8e <HAL_DMA_Abort_IT+0x1ae>
 8000e62:	2310      	movs	r3, #16
 8000e64:	e013      	b.n	8000e8e <HAL_DMA_Abort_IT+0x1ae>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e011      	b.n	8000e8e <HAL_DMA_Abort_IT+0x1ae>
 8000e6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e6e:	e00e      	b.n	8000e8e <HAL_DMA_Abort_IT+0x1ae>
 8000e70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e74:	e00b      	b.n	8000e8e <HAL_DMA_Abort_IT+0x1ae>
 8000e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e7a:	e008      	b.n	8000e8e <HAL_DMA_Abort_IT+0x1ae>
 8000e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e80:	e005      	b.n	8000e8e <HAL_DMA_Abort_IT+0x1ae>
 8000e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e86:	e002      	b.n	8000e8e <HAL_DMA_Abort_IT+0x1ae>
 8000e88:	2310      	movs	r3, #16
 8000e8a:	e000      	b.n	8000e8e <HAL_DMA_Abort_IT+0x1ae>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_DMA_Abort_IT+0x20c>)
 8000e90:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	4798      	blx	r3
    } 
  }
  return status;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40020080 	.word	0x40020080
 8000ec0:	40020008 	.word	0x40020008
 8000ec4:	4002001c 	.word	0x4002001c
 8000ec8:	40020030 	.word	0x40020030
 8000ecc:	40020044 	.word	0x40020044
 8000ed0:	40020058 	.word	0x40020058
 8000ed4:	4002006c 	.word	0x4002006c
 8000ed8:	40020408 	.word	0x40020408
 8000edc:	4002041c 	.word	0x4002041c
 8000ee0:	40020430 	.word	0x40020430
 8000ee4:	40020444 	.word	0x40020444
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	40020000 	.word	0x40020000

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b08b      	sub	sp, #44	; 0x2c
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	e179      	b.n	80011f8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f04:	2201      	movs	r2, #1
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 8168 	bne.w	80011f2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	4a96      	ldr	r2, [pc, #600]	; (8001180 <HAL_GPIO_Init+0x290>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d05e      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f2c:	4a94      	ldr	r2, [pc, #592]	; (8001180 <HAL_GPIO_Init+0x290>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d875      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f32:	4a94      	ldr	r2, [pc, #592]	; (8001184 <HAL_GPIO_Init+0x294>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d058      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f38:	4a92      	ldr	r2, [pc, #584]	; (8001184 <HAL_GPIO_Init+0x294>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d86f      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f3e:	4a92      	ldr	r2, [pc, #584]	; (8001188 <HAL_GPIO_Init+0x298>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d052      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f44:	4a90      	ldr	r2, [pc, #576]	; (8001188 <HAL_GPIO_Init+0x298>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d869      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f4a:	4a90      	ldr	r2, [pc, #576]	; (800118c <HAL_GPIO_Init+0x29c>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d04c      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f50:	4a8e      	ldr	r2, [pc, #568]	; (800118c <HAL_GPIO_Init+0x29c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d863      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f56:	4a8e      	ldr	r2, [pc, #568]	; (8001190 <HAL_GPIO_Init+0x2a0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d046      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f5c:	4a8c      	ldr	r2, [pc, #560]	; (8001190 <HAL_GPIO_Init+0x2a0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d85d      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f62:	2b12      	cmp	r3, #18
 8000f64:	d82a      	bhi.n	8000fbc <HAL_GPIO_Init+0xcc>
 8000f66:	2b12      	cmp	r3, #18
 8000f68:	d859      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f6a:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <HAL_GPIO_Init+0x80>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000feb 	.word	0x08000feb
 8000f74:	08000fc5 	.word	0x08000fc5
 8000f78:	08000fd7 	.word	0x08000fd7
 8000f7c:	08001019 	.word	0x08001019
 8000f80:	0800101f 	.word	0x0800101f
 8000f84:	0800101f 	.word	0x0800101f
 8000f88:	0800101f 	.word	0x0800101f
 8000f8c:	0800101f 	.word	0x0800101f
 8000f90:	0800101f 	.word	0x0800101f
 8000f94:	0800101f 	.word	0x0800101f
 8000f98:	0800101f 	.word	0x0800101f
 8000f9c:	0800101f 	.word	0x0800101f
 8000fa0:	0800101f 	.word	0x0800101f
 8000fa4:	0800101f 	.word	0x0800101f
 8000fa8:	0800101f 	.word	0x0800101f
 8000fac:	0800101f 	.word	0x0800101f
 8000fb0:	0800101f 	.word	0x0800101f
 8000fb4:	08000fcd 	.word	0x08000fcd
 8000fb8:	08000fe1 	.word	0x08000fe1
 8000fbc:	4a75      	ldr	r2, [pc, #468]	; (8001194 <HAL_GPIO_Init+0x2a4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fc2:	e02c      	b.n	800101e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	623b      	str	r3, [r7, #32]
          break;
 8000fca:	e029      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	623b      	str	r3, [r7, #32]
          break;
 8000fd4:	e024      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	3308      	adds	r3, #8
 8000fdc:	623b      	str	r3, [r7, #32]
          break;
 8000fde:	e01f      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	330c      	adds	r3, #12
 8000fe6:	623b      	str	r3, [r7, #32]
          break;
 8000fe8:	e01a      	b.n	8001020 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	623b      	str	r3, [r7, #32]
          break;
 8000ff6:	e013      	b.n	8001020 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d105      	bne.n	800100c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001000:	2308      	movs	r3, #8
 8001002:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	611a      	str	r2, [r3, #16]
          break;
 800100a:	e009      	b.n	8001020 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800100c:	2308      	movs	r3, #8
 800100e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	615a      	str	r2, [r3, #20]
          break;
 8001016:	e003      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
          break;
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x130>
          break;
 800101e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2bff      	cmp	r3, #255	; 0xff
 8001024:	d801      	bhi.n	800102a <HAL_GPIO_Init+0x13a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	e001      	b.n	800102e <HAL_GPIO_Init+0x13e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3304      	adds	r3, #4
 800102e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	2bff      	cmp	r3, #255	; 0xff
 8001034:	d802      	bhi.n	800103c <HAL_GPIO_Init+0x14c>
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	e002      	b.n	8001042 <HAL_GPIO_Init+0x152>
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	3b08      	subs	r3, #8
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	210f      	movs	r1, #15
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	401a      	ands	r2, r3
 8001054:	6a39      	ldr	r1, [r7, #32]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	431a      	orrs	r2, r3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 80c1 	beq.w	80011f2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001070:	4b49      	ldr	r3, [pc, #292]	; (8001198 <HAL_GPIO_Init+0x2a8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a48      	ldr	r2, [pc, #288]	; (8001198 <HAL_GPIO_Init+0x2a8>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b46      	ldr	r3, [pc, #280]	; (8001198 <HAL_GPIO_Init+0x2a8>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001088:	4a44      	ldr	r2, [pc, #272]	; (800119c <HAL_GPIO_Init+0x2ac>)
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001094:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a3c      	ldr	r2, [pc, #240]	; (80011a0 <HAL_GPIO_Init+0x2b0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d01f      	beq.n	80010f4 <HAL_GPIO_Init+0x204>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a3b      	ldr	r2, [pc, #236]	; (80011a4 <HAL_GPIO_Init+0x2b4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d019      	beq.n	80010f0 <HAL_GPIO_Init+0x200>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a3a      	ldr	r2, [pc, #232]	; (80011a8 <HAL_GPIO_Init+0x2b8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d013      	beq.n	80010ec <HAL_GPIO_Init+0x1fc>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a39      	ldr	r2, [pc, #228]	; (80011ac <HAL_GPIO_Init+0x2bc>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d00d      	beq.n	80010e8 <HAL_GPIO_Init+0x1f8>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a38      	ldr	r2, [pc, #224]	; (80011b0 <HAL_GPIO_Init+0x2c0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d007      	beq.n	80010e4 <HAL_GPIO_Init+0x1f4>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a37      	ldr	r2, [pc, #220]	; (80011b4 <HAL_GPIO_Init+0x2c4>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d101      	bne.n	80010e0 <HAL_GPIO_Init+0x1f0>
 80010dc:	2305      	movs	r3, #5
 80010de:	e00a      	b.n	80010f6 <HAL_GPIO_Init+0x206>
 80010e0:	2306      	movs	r3, #6
 80010e2:	e008      	b.n	80010f6 <HAL_GPIO_Init+0x206>
 80010e4:	2304      	movs	r3, #4
 80010e6:	e006      	b.n	80010f6 <HAL_GPIO_Init+0x206>
 80010e8:	2303      	movs	r3, #3
 80010ea:	e004      	b.n	80010f6 <HAL_GPIO_Init+0x206>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e002      	b.n	80010f6 <HAL_GPIO_Init+0x206>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <HAL_GPIO_Init+0x206>
 80010f4:	2300      	movs	r3, #0
 80010f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f8:	f002 0203 	and.w	r2, r2, #3
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	4093      	lsls	r3, r2
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	4313      	orrs	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001106:	4925      	ldr	r1, [pc, #148]	; (800119c <HAL_GPIO_Init+0x2ac>)
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	4924      	ldr	r1, [pc, #144]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	608b      	str	r3, [r1, #8]
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	43db      	mvns	r3, r3
 8001136:	4920      	ldr	r1, [pc, #128]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 8001138:	4013      	ands	r3, r2
 800113a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	491a      	ldr	r1, [pc, #104]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	60cb      	str	r3, [r1, #12]
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	43db      	mvns	r3, r3
 800115e:	4916      	ldr	r1, [pc, #88]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 8001160:	4013      	ands	r3, r2
 8001162:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d025      	beq.n	80011bc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	4910      	ldr	r1, [pc, #64]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	604b      	str	r3, [r1, #4]
 800117c:	e025      	b.n	80011ca <HAL_GPIO_Init+0x2da>
 800117e:	bf00      	nop
 8001180:	10320000 	.word	0x10320000
 8001184:	10310000 	.word	0x10310000
 8001188:	10220000 	.word	0x10220000
 800118c:	10210000 	.word	0x10210000
 8001190:	10120000 	.word	0x10120000
 8001194:	10110000 	.word	0x10110000
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	40010800 	.word	0x40010800
 80011a4:	40010c00 	.word	0x40010c00
 80011a8:	40011000 	.word	0x40011000
 80011ac:	40011400 	.word	0x40011400
 80011b0:	40011800 	.word	0x40011800
 80011b4:	40011c00 	.word	0x40011c00
 80011b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_GPIO_Init+0x324>)
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	4913      	ldr	r1, [pc, #76]	; (8001214 <HAL_GPIO_Init+0x324>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_GPIO_Init+0x324>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	490e      	ldr	r1, [pc, #56]	; (8001214 <HAL_GPIO_Init+0x324>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
 80011e2:	e006      	b.n	80011f2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_GPIO_Init+0x324>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	4909      	ldr	r1, [pc, #36]	; (8001214 <HAL_GPIO_Init+0x324>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	3301      	adds	r3, #1
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	f47f ae7e 	bne.w	8000f04 <HAL_GPIO_Init+0x14>
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	372c      	adds	r7, #44	; 0x2c
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	40010400 	.word	0x40010400

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001234:	e003      	b.n	800123e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	041a      	lsls	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	611a      	str	r2, [r3, #16]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e272      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8087 	beq.w	8001376 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001268:	4b92      	ldr	r3, [pc, #584]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b04      	cmp	r3, #4
 8001272:	d00c      	beq.n	800128e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001274:	4b8f      	ldr	r3, [pc, #572]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b08      	cmp	r3, #8
 800127e:	d112      	bne.n	80012a6 <HAL_RCC_OscConfig+0x5e>
 8001280:	4b8c      	ldr	r3, [pc, #560]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800128c:	d10b      	bne.n	80012a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128e:	4b89      	ldr	r3, [pc, #548]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d06c      	beq.n	8001374 <HAL_RCC_OscConfig+0x12c>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d168      	bne.n	8001374 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e24c      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ae:	d106      	bne.n	80012be <HAL_RCC_OscConfig+0x76>
 80012b0:	4b80      	ldr	r3, [pc, #512]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a7f      	ldr	r2, [pc, #508]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 80012b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	e02e      	b.n	800131c <HAL_RCC_OscConfig+0xd4>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x98>
 80012c6:	4b7b      	ldr	r3, [pc, #492]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a7a      	ldr	r2, [pc, #488]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b78      	ldr	r3, [pc, #480]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a77      	ldr	r2, [pc, #476]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e01d      	b.n	800131c <HAL_RCC_OscConfig+0xd4>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0xbc>
 80012ea:	4b72      	ldr	r3, [pc, #456]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a71      	ldr	r2, [pc, #452]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b6f      	ldr	r3, [pc, #444]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a6e      	ldr	r2, [pc, #440]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e00b      	b.n	800131c <HAL_RCC_OscConfig+0xd4>
 8001304:	4b6b      	ldr	r3, [pc, #428]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a6a      	ldr	r2, [pc, #424]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 800130a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b68      	ldr	r3, [pc, #416]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a67      	ldr	r2, [pc, #412]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 8001316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d013      	beq.n	800134c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fb66 	bl	80009f4 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fb62 	bl	80009f4 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e200      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b5d      	ldr	r3, [pc, #372]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0xe4>
 800134a:	e014      	b.n	8001376 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fb52 	bl	80009f4 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fb4e 	bl	80009f4 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	; 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e1ec      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	4b53      	ldr	r3, [pc, #332]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x10c>
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d063      	beq.n	800144a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001382:	4b4c      	ldr	r3, [pc, #304]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800138e:	4b49      	ldr	r3, [pc, #292]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	2b08      	cmp	r3, #8
 8001398:	d11c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x18c>
 800139a:	4b46      	ldr	r3, [pc, #280]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d116      	bne.n	80013d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	4b43      	ldr	r3, [pc, #268]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d005      	beq.n	80013be <HAL_RCC_OscConfig+0x176>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e1c0      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4939      	ldr	r1, [pc, #228]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	e03a      	b.n	800144a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d020      	beq.n	800141e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013dc:	4b36      	ldr	r3, [pc, #216]	; (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e2:	f7ff fb07 	bl	80009f4 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fb03 	bl	80009f4 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e1a1      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4927      	ldr	r1, [pc, #156]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
 800141c:	e015      	b.n	800144a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fae6 	bl	80009f4 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800142c:	f7ff fae2 	bl	80009f4 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e180      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d03a      	beq.n	80014cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d019      	beq.n	8001492 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_RCC_OscConfig+0x274>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001464:	f7ff fac6 	bl	80009f4 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff fac2 	bl	80009f4 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e160      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_RCC_OscConfig+0x26c>)
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800148a:	2001      	movs	r0, #1
 800148c:	f000 face 	bl	8001a2c <RCC_Delay>
 8001490:	e01c      	b.n	80014cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_RCC_OscConfig+0x274>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001498:	f7ff faac 	bl	80009f4 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149e:	e00f      	b.n	80014c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a0:	f7ff faa8 	bl	80009f4 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d908      	bls.n	80014c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e146      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	42420000 	.word	0x42420000
 80014bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c0:	4b92      	ldr	r3, [pc, #584]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1e9      	bne.n	80014a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 80a6 	beq.w	8001626 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014de:	4b8b      	ldr	r3, [pc, #556]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10d      	bne.n	8001506 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	4b88      	ldr	r3, [pc, #544]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a87      	ldr	r2, [pc, #540]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	61d3      	str	r3, [r2, #28]
 80014f6:	4b85      	ldr	r3, [pc, #532]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001502:	2301      	movs	r3, #1
 8001504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001506:	4b82      	ldr	r3, [pc, #520]	; (8001710 <HAL_RCC_OscConfig+0x4c8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150e:	2b00      	cmp	r3, #0
 8001510:	d118      	bne.n	8001544 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001512:	4b7f      	ldr	r3, [pc, #508]	; (8001710 <HAL_RCC_OscConfig+0x4c8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a7e      	ldr	r2, [pc, #504]	; (8001710 <HAL_RCC_OscConfig+0x4c8>)
 8001518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800151e:	f7ff fa69 	bl	80009f4 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001526:	f7ff fa65 	bl	80009f4 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b64      	cmp	r3, #100	; 0x64
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e103      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	4b75      	ldr	r3, [pc, #468]	; (8001710 <HAL_RCC_OscConfig+0x4c8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d106      	bne.n	800155a <HAL_RCC_OscConfig+0x312>
 800154c:	4b6f      	ldr	r3, [pc, #444]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4a6e      	ldr	r2, [pc, #440]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6213      	str	r3, [r2, #32]
 8001558:	e02d      	b.n	80015b6 <HAL_RCC_OscConfig+0x36e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10c      	bne.n	800157c <HAL_RCC_OscConfig+0x334>
 8001562:	4b6a      	ldr	r3, [pc, #424]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4a69      	ldr	r2, [pc, #420]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	6213      	str	r3, [r2, #32]
 800156e:	4b67      	ldr	r3, [pc, #412]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4a66      	ldr	r2, [pc, #408]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	6213      	str	r3, [r2, #32]
 800157a:	e01c      	b.n	80015b6 <HAL_RCC_OscConfig+0x36e>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b05      	cmp	r3, #5
 8001582:	d10c      	bne.n	800159e <HAL_RCC_OscConfig+0x356>
 8001584:	4b61      	ldr	r3, [pc, #388]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4a60      	ldr	r2, [pc, #384]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	6213      	str	r3, [r2, #32]
 8001590:	4b5e      	ldr	r3, [pc, #376]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	4a5d      	ldr	r2, [pc, #372]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6213      	str	r3, [r2, #32]
 800159c:	e00b      	b.n	80015b6 <HAL_RCC_OscConfig+0x36e>
 800159e:	4b5b      	ldr	r3, [pc, #364]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	4a5a      	ldr	r2, [pc, #360]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	6213      	str	r3, [r2, #32]
 80015aa:	4b58      	ldr	r3, [pc, #352]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	4a57      	ldr	r2, [pc, #348]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	f023 0304 	bic.w	r3, r3, #4
 80015b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d015      	beq.n	80015ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015be:	f7ff fa19 	bl	80009f4 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f7ff fa15 	bl	80009f4 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e0b1      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015dc:	4b4b      	ldr	r3, [pc, #300]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0ee      	beq.n	80015c6 <HAL_RCC_OscConfig+0x37e>
 80015e8:	e014      	b.n	8001614 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fa03 	bl	80009f4 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff f9ff 	bl	80009f4 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e09b      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001608:	4b40      	ldr	r3, [pc, #256]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1ee      	bne.n	80015f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001614:	7dfb      	ldrb	r3, [r7, #23]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d105      	bne.n	8001626 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800161a:	4b3c      	ldr	r3, [pc, #240]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a3b      	ldr	r2, [pc, #236]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 8001620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001624:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 8087 	beq.w	800173e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b08      	cmp	r3, #8
 800163a:	d061      	beq.n	8001700 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d146      	bne.n	80016d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001644:	4b33      	ldr	r3, [pc, #204]	; (8001714 <HAL_RCC_OscConfig+0x4cc>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff f9d3 	bl	80009f4 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff f9cf 	bl	80009f4 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e06d      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f0      	bne.n	8001652 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001678:	d108      	bne.n	800168c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	4921      	ldr	r1, [pc, #132]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800168c:	4b1f      	ldr	r3, [pc, #124]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a19      	ldr	r1, [r3, #32]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	430b      	orrs	r3, r1
 800169e:	491b      	ldr	r1, [pc, #108]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_RCC_OscConfig+0x4cc>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016aa:	f7ff f9a3 	bl	80009f4 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b2:	f7ff f99f 	bl	80009f4 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e03d      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x46a>
 80016d0:	e035      	b.n	800173e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_RCC_OscConfig+0x4cc>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff f98c 	bl	80009f4 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e0:	f7ff f988 	bl	80009f4 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e026      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x498>
 80016fe:	e01e      	b.n	800173e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d107      	bne.n	8001718 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e019      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
 800170c:	40021000 	.word	0x40021000
 8001710:	40007000 	.word	0x40007000
 8001714:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_OscConfig+0x500>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	429a      	cmp	r2, r3
 800172a:	d106      	bne.n	800173a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	429a      	cmp	r2, r3
 8001738:	d001      	beq.n	800173e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40021000 	.word	0x40021000

0800174c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0d0      	b.n	8001902 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	4b6a      	ldr	r3, [pc, #424]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d910      	bls.n	8001790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b67      	ldr	r3, [pc, #412]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 0207 	bic.w	r2, r3, #7
 8001776:	4965      	ldr	r1, [pc, #404]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b63      	ldr	r3, [pc, #396]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0b8      	b.n	8001902 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d020      	beq.n	80017de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a8:	4b59      	ldr	r3, [pc, #356]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	4a58      	ldr	r2, [pc, #352]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c0:	4b53      	ldr	r3, [pc, #332]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4a52      	ldr	r2, [pc, #328]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017cc:	4b50      	ldr	r3, [pc, #320]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	494d      	ldr	r1, [pc, #308]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d040      	beq.n	800186c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b47      	ldr	r3, [pc, #284]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d115      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e07f      	b.n	8001902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180a:	4b41      	ldr	r3, [pc, #260]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e073      	b.n	8001902 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e06b      	b.n	8001902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182a:	4b39      	ldr	r3, [pc, #228]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f023 0203 	bic.w	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4936      	ldr	r1, [pc, #216]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800183c:	f7ff f8da 	bl	80009f4 <HAL_GetTick>
 8001840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	e00a      	b.n	800185a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001844:	f7ff f8d6 	bl	80009f4 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e053      	b.n	8001902 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 020c 	and.w	r2, r3, #12
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	429a      	cmp	r2, r3
 800186a:	d1eb      	bne.n	8001844 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800186c:	4b27      	ldr	r3, [pc, #156]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d210      	bcs.n	800189c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b24      	ldr	r3, [pc, #144]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 0207 	bic.w	r2, r3, #7
 8001882:	4922      	ldr	r1, [pc, #136]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e032      	b.n	8001902 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d008      	beq.n	80018ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4916      	ldr	r1, [pc, #88]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	490e      	ldr	r1, [pc, #56]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018da:	f000 f821 	bl	8001920 <HAL_RCC_GetSysClockFreq>
 80018de:	4602      	mov	r2, r0
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	490a      	ldr	r1, [pc, #40]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80018ec:	5ccb      	ldrb	r3, [r1, r3]
 80018ee:	fa22 f303 	lsr.w	r3, r2, r3
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <HAL_RCC_ClockConfig+0x1cc>)
 80018f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_RCC_ClockConfig+0x1d0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff f838 	bl	8000970 <HAL_InitTick>

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40022000 	.word	0x40022000
 8001910:	40021000 	.word	0x40021000
 8001914:	08003214 	.word	0x08003214
 8001918:	20000008 	.word	0x20000008
 800191c:	2000000c 	.word	0x2000000c

08001920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800193a:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b04      	cmp	r3, #4
 8001948:	d002      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x30>
 800194a:	2b08      	cmp	r3, #8
 800194c:	d003      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0x36>
 800194e:	e027      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001952:	613b      	str	r3, [r7, #16]
      break;
 8001954:	e027      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	0c9b      	lsrs	r3, r3, #18
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	4a17      	ldr	r2, [pc, #92]	; (80019bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001960:	5cd3      	ldrb	r3, [r2, r3]
 8001962:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d010      	beq.n	8001990 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	0c5b      	lsrs	r3, r3, #17
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	4a11      	ldr	r2, [pc, #68]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a0d      	ldr	r2, [pc, #52]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001982:	fb03 f202 	mul.w	r2, r3, r2
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	e004      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001994:	fb02 f303 	mul.w	r3, r2, r3
 8001998:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	613b      	str	r3, [r7, #16]
      break;
 800199e:	e002      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80019a2:	613b      	str	r3, [r7, #16]
      break;
 80019a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a6:	693b      	ldr	r3, [r7, #16]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	371c      	adds	r7, #28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
 80019b8:	007a1200 	.word	0x007a1200
 80019bc:	0800322c 	.word	0x0800322c
 80019c0:	0800323c 	.word	0x0800323c
 80019c4:	003d0900 	.word	0x003d0900

080019c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	20000008 	.word	0x20000008

080019dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019e0:	f7ff fff2 	bl	80019c8 <HAL_RCC_GetHCLKFreq>
 80019e4:	4602      	mov	r2, r0
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	4903      	ldr	r1, [pc, #12]	; (8001a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019f2:	5ccb      	ldrb	r3, [r1, r3]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	08003224 	.word	0x08003224

08001a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a08:	f7ff ffde 	bl	80019c8 <HAL_RCC_GetHCLKFreq>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	0adb      	lsrs	r3, r3, #11
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	4903      	ldr	r1, [pc, #12]	; (8001a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	08003224 	.word	0x08003224

08001a2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a34:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <RCC_Delay+0x34>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <RCC_Delay+0x38>)
 8001a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3e:	0a5b      	lsrs	r3, r3, #9
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a48:	bf00      	nop
  }
  while (Delay --);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1e5a      	subs	r2, r3, #1
 8001a4e:	60fa      	str	r2, [r7, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f9      	bne.n	8001a48 <RCC_Delay+0x1c>
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	20000008 	.word	0x20000008
 8001a64:	10624dd3 	.word	0x10624dd3

08001a68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e042      	b.n	8001b00 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7fe fe26 	bl	80006e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2224      	movs	r2, #36	; 0x24
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 fdcd 	bl	800264c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ad0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ae0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	4613      	mov	r3, r2
 8001b16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	d16d      	bne.n	8001c04 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_UART_Transmit+0x2c>
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e066      	b.n	8001c06 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2221      	movs	r2, #33	; 0x21
 8001b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b46:	f7fe ff55 	bl	80009f4 <HAL_GetTick>
 8001b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	88fa      	ldrh	r2, [r7, #6]
 8001b50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	88fa      	ldrh	r2, [r7, #6]
 8001b56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b60:	d108      	bne.n	8001b74 <HAL_UART_Transmit+0x6c>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d104      	bne.n	8001b74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	e003      	b.n	8001b7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b7c:	e02a      	b.n	8001bd4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2200      	movs	r2, #0
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 fb1d 	bl	80021c8 <UART_WaitOnFlagUntilTimeout>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e036      	b.n	8001c06 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	e007      	b.n	8001bc6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1cf      	bne.n	8001b7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2200      	movs	r2, #0
 8001be6:	2140      	movs	r1, #64	; 0x40
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 faed 	bl	80021c8 <UART_WaitOnFlagUntilTimeout>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e006      	b.n	8001c06 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e000      	b.n	8001c06 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001c04:	2302      	movs	r3, #2
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b084      	sub	sp, #16
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b20      	cmp	r3, #32
 8001c26:	d112      	bne.n	8001c4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <HAL_UART_Receive_IT+0x26>
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e00b      	b.n	8001c50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	461a      	mov	r2, r3
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 fb2d 	bl	80022a4 <UART_Start_Receive_IT>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	e000      	b.n	8001c50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001c4e:	2302      	movs	r3, #2
  }
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b0ba      	sub	sp, #232	; 0xe8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001c96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10f      	bne.n	8001cbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <HAL_UART_IRQHandler+0x66>
 8001caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fc0a 	bl	80024d0 <UART_Receive_IT>
      return;
 8001cbc:	e25b      	b.n	8002176 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001cbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80de 	beq.w	8001e84 <HAL_UART_IRQHandler+0x22c>
 8001cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d106      	bne.n	8001ce2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80d1 	beq.w	8001e84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_UART_IRQHandler+0xae>
 8001cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_UART_IRQHandler+0xd2>
 8001d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f043 0202 	orr.w	r2, r3, #2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00b      	beq.n	8001d4e <HAL_UART_IRQHandler+0xf6>
 8001d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f043 0204 	orr.w	r2, r3, #4
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d011      	beq.n	8001d7e <HAL_UART_IRQHandler+0x126>
 8001d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d5e:	f003 0320 	and.w	r3, r3, #32
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f043 0208 	orr.w	r2, r3, #8
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 81f2 	beq.w	800216c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_UART_IRQHandler+0x14e>
 8001d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 fb95 	bl	80024d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf14      	ite	ne
 8001db4:	2301      	movne	r3, #1
 8001db6:	2300      	moveq	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d103      	bne.n	8001dd2 <HAL_UART_IRQHandler+0x17a>
 8001dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d04f      	beq.n	8001e72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fa9f 	bl	8002316 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d041      	beq.n	8001e6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	3314      	adds	r3, #20
 8001dec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001df0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001df4:	e853 3f00 	ldrex	r3, [r3]
 8001df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3314      	adds	r3, #20
 8001e0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001e12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001e16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001e1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001e22:	e841 2300 	strex	r3, r2, [r1]
 8001e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001e2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1d9      	bne.n	8001de6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d013      	beq.n	8001e62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3e:	4a7e      	ldr	r2, [pc, #504]	; (8002038 <HAL_UART_IRQHandler+0x3e0>)
 8001e40:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe ff4a 	bl	8000ce0 <HAL_DMA_Abort_IT>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d016      	beq.n	8001e80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e60:	e00e      	b.n	8001e80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f99c 	bl	80021a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e68:	e00a      	b.n	8001e80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f998 	bl	80021a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e70:	e006      	b.n	8001e80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f994 	bl	80021a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001e7e:	e175      	b.n	800216c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e80:	bf00      	nop
    return;
 8001e82:	e173      	b.n	800216c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	f040 814f 	bne.w	800212c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8148 	beq.w	800212c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 8141 	beq.w	800212c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80b6 	beq.w	800203c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001edc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 8145 	beq.w	8002170 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001eea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	f080 813e 	bcs.w	8002170 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001efa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	f000 8088 	beq.w	8002018 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	330c      	adds	r3, #12
 8001f0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f16:	e853 3f00 	ldrex	r3, [r3]
 8001f1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	330c      	adds	r3, #12
 8001f30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001f34:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001f38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001f40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f44:	e841 2300 	strex	r3, r2, [r1]
 8001f48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1d9      	bne.n	8001f08 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3314      	adds	r3, #20
 8001f5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f5e:	e853 3f00 	ldrex	r3, [r3]
 8001f62:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	3314      	adds	r3, #20
 8001f74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f78:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001f7c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001f80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001f84:	e841 2300 	strex	r3, r2, [r1]
 8001f88:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1e1      	bne.n	8001f54 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3314      	adds	r3, #20
 8001f96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f9a:	e853 3f00 	ldrex	r3, [r3]
 8001f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3314      	adds	r3, #20
 8001fb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001fb4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001fb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001fba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001fbc:	e841 2300 	strex	r3, r2, [r1]
 8001fc0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001fc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1e3      	bne.n	8001f90 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	330c      	adds	r3, #12
 8001fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe0:	e853 3f00 	ldrex	r3, [r3]
 8001fe4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe8:	f023 0310 	bic.w	r3, r3, #16
 8001fec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	330c      	adds	r3, #12
 8001ff6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001ffa:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ffc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002000:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002002:	e841 2300 	strex	r3, r2, [r1]
 8002006:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1e3      	bne.n	8001fd6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fe29 	bl	8000c6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002026:	b29b      	uxth	r3, r3
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	b29b      	uxth	r3, r3
 800202c:	4619      	mov	r1, r3
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f8bf 	bl	80021b2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002034:	e09c      	b.n	8002170 <HAL_UART_IRQHandler+0x518>
 8002036:	bf00      	nop
 8002038:	080023db 	.word	0x080023db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002044:	b29b      	uxth	r3, r3
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 808e 	beq.w	8002174 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002058:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8089 	beq.w	8002174 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	330c      	adds	r3, #12
 8002068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800206a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206c:	e853 3f00 	ldrex	r3, [r3]
 8002070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002078:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	330c      	adds	r3, #12
 8002082:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002086:	647a      	str	r2, [r7, #68]	; 0x44
 8002088:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800208a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800208c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800208e:	e841 2300 	strex	r3, r2, [r1]
 8002092:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1e3      	bne.n	8002062 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3314      	adds	r3, #20
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	e853 3f00 	ldrex	r3, [r3]
 80020a8:	623b      	str	r3, [r7, #32]
   return(result);
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3314      	adds	r3, #20
 80020ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80020be:	633a      	str	r2, [r7, #48]	; 0x30
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020c6:	e841 2300 	strex	r3, r2, [r1]
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e3      	bne.n	800209a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	330c      	adds	r3, #12
 80020e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	e853 3f00 	ldrex	r3, [r3]
 80020ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0310 	bic.w	r3, r3, #16
 80020f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	330c      	adds	r3, #12
 8002100:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002104:	61fa      	str	r2, [r7, #28]
 8002106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002108:	69b9      	ldr	r1, [r7, #24]
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	e841 2300 	strex	r3, r2, [r1]
 8002110:	617b      	str	r3, [r7, #20]
   return(result);
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e3      	bne.n	80020e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800211e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002122:	4619      	mov	r1, r3
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f844 	bl	80021b2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800212a:	e023      	b.n	8002174 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800212c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <HAL_UART_IRQHandler+0x4f4>
 8002138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800213c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f95c 	bl	8002402 <UART_Transmit_IT>
    return;
 800214a:	e014      	b.n	8002176 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800214c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00e      	beq.n	8002176 <HAL_UART_IRQHandler+0x51e>
 8002158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800215c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f99b 	bl	80024a0 <UART_EndTransmit_IT>
    return;
 800216a:	e004      	b.n	8002176 <HAL_UART_IRQHandler+0x51e>
    return;
 800216c:	bf00      	nop
 800216e:	e002      	b.n	8002176 <HAL_UART_IRQHandler+0x51e>
      return;
 8002170:	bf00      	nop
 8002172:	e000      	b.n	8002176 <HAL_UART_IRQHandler+0x51e>
      return;
 8002174:	bf00      	nop
  }
}
 8002176:	37e8      	adds	r7, #232	; 0xe8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b090      	sub	sp, #64	; 0x40
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	4613      	mov	r3, r2
 80021d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021d8:	e050      	b.n	800227c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e0:	d04c      	beq.n	800227c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80021e8:	f7fe fc04 	bl	80009f4 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d241      	bcs.n	800227c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	330c      	adds	r3, #12
 80021fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002202:	e853 3f00 	ldrex	r3, [r3]
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800220e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	330c      	adds	r3, #12
 8002216:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002218:	637a      	str	r2, [r7, #52]	; 0x34
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800221c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800221e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002220:	e841 2300 	strex	r3, r2, [r1]
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1e5      	bne.n	80021f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3314      	adds	r3, #20
 8002232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	e853 3f00 	ldrex	r3, [r3]
 800223a:	613b      	str	r3, [r7, #16]
   return(result);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f023 0301 	bic.w	r3, r3, #1
 8002242:	63bb      	str	r3, [r7, #56]	; 0x38
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3314      	adds	r3, #20
 800224a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800224c:	623a      	str	r2, [r7, #32]
 800224e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002250:	69f9      	ldr	r1, [r7, #28]
 8002252:	6a3a      	ldr	r2, [r7, #32]
 8002254:	e841 2300 	strex	r3, r2, [r1]
 8002258:	61bb      	str	r3, [r7, #24]
   return(result);
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e5      	bne.n	800222c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e00f      	b.n	800229c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4013      	ands	r3, r2
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	429a      	cmp	r2, r3
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	429a      	cmp	r2, r3
 8002298:	d09f      	beq.n	80021da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3740      	adds	r7, #64	; 0x40
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	4613      	mov	r3, r2
 80022b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	88fa      	ldrh	r2, [r7, #6]
 80022bc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	88fa      	ldrh	r2, [r7, #6]
 80022c2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2222      	movs	r2, #34	; 0x22
 80022ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0220 	orr.w	r2, r2, #32
 8002308:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002316:	b480      	push	{r7}
 8002318:	b095      	sub	sp, #84	; 0x54
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	330c      	adds	r3, #12
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002328:	e853 3f00 	ldrex	r3, [r3]
 800232c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002334:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	330c      	adds	r3, #12
 800233c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800233e:	643a      	str	r2, [r7, #64]	; 0x40
 8002340:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002342:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002344:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002346:	e841 2300 	strex	r3, r2, [r1]
 800234a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1e5      	bne.n	800231e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3314      	adds	r3, #20
 8002358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	e853 3f00 	ldrex	r3, [r3]
 8002360:	61fb      	str	r3, [r7, #28]
   return(result);
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	64bb      	str	r3, [r7, #72]	; 0x48
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3314      	adds	r3, #20
 8002370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002372:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800237a:	e841 2300 	strex	r3, r2, [r1]
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1e5      	bne.n	8002352 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	2b01      	cmp	r3, #1
 800238c:	d119      	bne.n	80023c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	330c      	adds	r3, #12
 8002394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	e853 3f00 	ldrex	r3, [r3]
 800239c:	60bb      	str	r3, [r7, #8]
   return(result);
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f023 0310 	bic.w	r3, r3, #16
 80023a4:	647b      	str	r3, [r7, #68]	; 0x44
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	330c      	adds	r3, #12
 80023ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023ae:	61ba      	str	r2, [r7, #24]
 80023b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b2:	6979      	ldr	r1, [r7, #20]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	e841 2300 	strex	r3, r2, [r1]
 80023ba:	613b      	str	r3, [r7, #16]
   return(result);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1e5      	bne.n	800238e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80023d0:	bf00      	nop
 80023d2:	3754      	adds	r7, #84	; 0x54
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f7ff fed3 	bl	80021a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b21      	cmp	r3, #33	; 0x21
 8002414:	d13e      	bne.n	8002494 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241e:	d114      	bne.n	800244a <UART_Transmit_IT+0x48>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d110      	bne.n	800244a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800243c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	1c9a      	adds	r2, r3, #2
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	621a      	str	r2, [r3, #32]
 8002448:	e008      	b.n	800245c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	1c59      	adds	r1, r3, #1
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6211      	str	r1, [r2, #32]
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29b      	uxth	r3, r3
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4619      	mov	r1, r3
 800246a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10f      	bne.n	8002490 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800247e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	e000      	b.n	8002496 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002494:	2302      	movs	r3, #2
  }
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff fe5b 	bl	800217c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08c      	sub	sp, #48	; 0x30
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b22      	cmp	r3, #34	; 0x22
 80024e2:	f040 80ae 	bne.w	8002642 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ee:	d117      	bne.n	8002520 <UART_Receive_IT+0x50>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d113      	bne.n	8002520 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	b29b      	uxth	r3, r3
 800250a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250e:	b29a      	uxth	r2, r3
 8002510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002512:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	1c9a      	adds	r2, r3, #2
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	629a      	str	r2, [r3, #40]	; 0x28
 800251e:	e026      	b.n	800256e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002526:	2300      	movs	r3, #0
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002532:	d007      	beq.n	8002544 <UART_Receive_IT+0x74>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <UART_Receive_IT+0x82>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	e008      	b.n	8002564 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800255e:	b2da      	uxtb	r2, r3
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29b      	uxth	r3, r3
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4619      	mov	r1, r3
 800257c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800257e:	2b00      	cmp	r3, #0
 8002580:	d15d      	bne.n	800263e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0220 	bic.w	r2, r2, #32
 8002590:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d135      	bne.n	8002634 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	330c      	adds	r3, #12
 80025d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	e853 3f00 	ldrex	r3, [r3]
 80025dc:	613b      	str	r3, [r7, #16]
   return(result);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f023 0310 	bic.w	r3, r3, #16
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	330c      	adds	r3, #12
 80025ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ee:	623a      	str	r2, [r7, #32]
 80025f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f2:	69f9      	ldr	r1, [r7, #28]
 80025f4:	6a3a      	ldr	r2, [r7, #32]
 80025f6:	e841 2300 	strex	r3, r2, [r1]
 80025fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1e5      	bne.n	80025ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b10      	cmp	r3, #16
 800260e:	d10a      	bne.n	8002626 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800262a:	4619      	mov	r1, r3
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff fdc0 	bl	80021b2 <HAL_UARTEx_RxEventCallback>
 8002632:	e002      	b.n	800263a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff fdaa 	bl	800218e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e002      	b.n	8002644 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	e000      	b.n	8002644 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002642:	2302      	movs	r3, #2
  }
}
 8002644:	4618      	mov	r0, r3
 8002646:	3730      	adds	r7, #48	; 0x30
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002686:	f023 030c 	bic.w	r3, r3, #12
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	430b      	orrs	r3, r1
 8002692:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2c      	ldr	r2, [pc, #176]	; (8002760 <UART_SetConfig+0x114>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d103      	bne.n	80026bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026b4:	f7ff f9a6 	bl	8001a04 <HAL_RCC_GetPCLK2Freq>
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	e002      	b.n	80026c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026bc:	f7ff f98e 	bl	80019dc <HAL_RCC_GetPCLK1Freq>
 80026c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	009a      	lsls	r2, r3, #2
 80026cc:	441a      	add	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	4a22      	ldr	r2, [pc, #136]	; (8002764 <UART_SetConfig+0x118>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	0119      	lsls	r1, r3, #4
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	009a      	lsls	r2, r3, #2
 80026ec:	441a      	add	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026f8:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <UART_SetConfig+0x118>)
 80026fa:	fba3 0302 	umull	r0, r3, r3, r2
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2064      	movs	r0, #100	; 0x64
 8002702:	fb00 f303 	mul.w	r3, r0, r3
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	3332      	adds	r3, #50	; 0x32
 800270c:	4a15      	ldr	r2, [pc, #84]	; (8002764 <UART_SetConfig+0x118>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002718:	4419      	add	r1, r3
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	009a      	lsls	r2, r3, #2
 8002724:	441a      	add	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <UART_SetConfig+0x118>)
 8002732:	fba3 0302 	umull	r0, r3, r3, r2
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	2064      	movs	r0, #100	; 0x64
 800273a:	fb00 f303 	mul.w	r3, r0, r3
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	3332      	adds	r3, #50	; 0x32
 8002744:	4a07      	ldr	r2, [pc, #28]	; (8002764 <UART_SetConfig+0x118>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	f003 020f 	and.w	r2, r3, #15
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	440a      	add	r2, r1
 8002756:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40013800 	.word	0x40013800
 8002764:	51eb851f 	.word	0x51eb851f

08002768 <__errno>:
 8002768:	4b01      	ldr	r3, [pc, #4]	; (8002770 <__errno+0x8>)
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000014 	.word	0x20000014

08002774 <__libc_init_array>:
 8002774:	b570      	push	{r4, r5, r6, lr}
 8002776:	2600      	movs	r6, #0
 8002778:	4d0c      	ldr	r5, [pc, #48]	; (80027ac <__libc_init_array+0x38>)
 800277a:	4c0d      	ldr	r4, [pc, #52]	; (80027b0 <__libc_init_array+0x3c>)
 800277c:	1b64      	subs	r4, r4, r5
 800277e:	10a4      	asrs	r4, r4, #2
 8002780:	42a6      	cmp	r6, r4
 8002782:	d109      	bne.n	8002798 <__libc_init_array+0x24>
 8002784:	f000 fcb2 	bl	80030ec <_init>
 8002788:	2600      	movs	r6, #0
 800278a:	4d0a      	ldr	r5, [pc, #40]	; (80027b4 <__libc_init_array+0x40>)
 800278c:	4c0a      	ldr	r4, [pc, #40]	; (80027b8 <__libc_init_array+0x44>)
 800278e:	1b64      	subs	r4, r4, r5
 8002790:	10a4      	asrs	r4, r4, #2
 8002792:	42a6      	cmp	r6, r4
 8002794:	d105      	bne.n	80027a2 <__libc_init_array+0x2e>
 8002796:	bd70      	pop	{r4, r5, r6, pc}
 8002798:	f855 3b04 	ldr.w	r3, [r5], #4
 800279c:	4798      	blx	r3
 800279e:	3601      	adds	r6, #1
 80027a0:	e7ee      	b.n	8002780 <__libc_init_array+0xc>
 80027a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a6:	4798      	blx	r3
 80027a8:	3601      	adds	r6, #1
 80027aa:	e7f2      	b.n	8002792 <__libc_init_array+0x1e>
 80027ac:	08003274 	.word	0x08003274
 80027b0:	08003274 	.word	0x08003274
 80027b4:	08003274 	.word	0x08003274
 80027b8:	08003278 	.word	0x08003278

080027bc <memset>:
 80027bc:	4603      	mov	r3, r0
 80027be:	4402      	add	r2, r0
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d100      	bne.n	80027c6 <memset+0xa>
 80027c4:	4770      	bx	lr
 80027c6:	f803 1b01 	strb.w	r1, [r3], #1
 80027ca:	e7f9      	b.n	80027c0 <memset+0x4>

080027cc <siprintf>:
 80027cc:	b40e      	push	{r1, r2, r3}
 80027ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027d2:	b500      	push	{lr}
 80027d4:	b09c      	sub	sp, #112	; 0x70
 80027d6:	ab1d      	add	r3, sp, #116	; 0x74
 80027d8:	9002      	str	r0, [sp, #8]
 80027da:	9006      	str	r0, [sp, #24]
 80027dc:	9107      	str	r1, [sp, #28]
 80027de:	9104      	str	r1, [sp, #16]
 80027e0:	4808      	ldr	r0, [pc, #32]	; (8002804 <siprintf+0x38>)
 80027e2:	4909      	ldr	r1, [pc, #36]	; (8002808 <siprintf+0x3c>)
 80027e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80027e8:	9105      	str	r1, [sp, #20]
 80027ea:	6800      	ldr	r0, [r0, #0]
 80027ec:	a902      	add	r1, sp, #8
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	f000 f87e 	bl	80028f0 <_svfiprintf_r>
 80027f4:	2200      	movs	r2, #0
 80027f6:	9b02      	ldr	r3, [sp, #8]
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	b01c      	add	sp, #112	; 0x70
 80027fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002800:	b003      	add	sp, #12
 8002802:	4770      	bx	lr
 8002804:	20000014 	.word	0x20000014
 8002808:	ffff0208 	.word	0xffff0208

0800280c <strstr>:
 800280c:	780a      	ldrb	r2, [r1, #0]
 800280e:	b570      	push	{r4, r5, r6, lr}
 8002810:	b96a      	cbnz	r2, 800282e <strstr+0x22>
 8002812:	bd70      	pop	{r4, r5, r6, pc}
 8002814:	429a      	cmp	r2, r3
 8002816:	d109      	bne.n	800282c <strstr+0x20>
 8002818:	460c      	mov	r4, r1
 800281a:	4605      	mov	r5, r0
 800281c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f6      	beq.n	8002812 <strstr+0x6>
 8002824:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002828:	429e      	cmp	r6, r3
 800282a:	d0f7      	beq.n	800281c <strstr+0x10>
 800282c:	3001      	adds	r0, #1
 800282e:	7803      	ldrb	r3, [r0, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ef      	bne.n	8002814 <strstr+0x8>
 8002834:	4618      	mov	r0, r3
 8002836:	e7ec      	b.n	8002812 <strstr+0x6>

08002838 <__ssputs_r>:
 8002838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800283c:	688e      	ldr	r6, [r1, #8]
 800283e:	4682      	mov	sl, r0
 8002840:	429e      	cmp	r6, r3
 8002842:	460c      	mov	r4, r1
 8002844:	4690      	mov	r8, r2
 8002846:	461f      	mov	r7, r3
 8002848:	d838      	bhi.n	80028bc <__ssputs_r+0x84>
 800284a:	898a      	ldrh	r2, [r1, #12]
 800284c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002850:	d032      	beq.n	80028b8 <__ssputs_r+0x80>
 8002852:	6825      	ldr	r5, [r4, #0]
 8002854:	6909      	ldr	r1, [r1, #16]
 8002856:	3301      	adds	r3, #1
 8002858:	eba5 0901 	sub.w	r9, r5, r1
 800285c:	6965      	ldr	r5, [r4, #20]
 800285e:	444b      	add	r3, r9
 8002860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002868:	106d      	asrs	r5, r5, #1
 800286a:	429d      	cmp	r5, r3
 800286c:	bf38      	it	cc
 800286e:	461d      	movcc	r5, r3
 8002870:	0553      	lsls	r3, r2, #21
 8002872:	d531      	bpl.n	80028d8 <__ssputs_r+0xa0>
 8002874:	4629      	mov	r1, r5
 8002876:	f000 fb6f 	bl	8002f58 <_malloc_r>
 800287a:	4606      	mov	r6, r0
 800287c:	b950      	cbnz	r0, 8002894 <__ssputs_r+0x5c>
 800287e:	230c      	movs	r3, #12
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f8ca 3000 	str.w	r3, [sl]
 8002888:	89a3      	ldrh	r3, [r4, #12]
 800288a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800288e:	81a3      	strh	r3, [r4, #12]
 8002890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002894:	464a      	mov	r2, r9
 8002896:	6921      	ldr	r1, [r4, #16]
 8002898:	f000 face 	bl	8002e38 <memcpy>
 800289c:	89a3      	ldrh	r3, [r4, #12]
 800289e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80028a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a6:	81a3      	strh	r3, [r4, #12]
 80028a8:	6126      	str	r6, [r4, #16]
 80028aa:	444e      	add	r6, r9
 80028ac:	6026      	str	r6, [r4, #0]
 80028ae:	463e      	mov	r6, r7
 80028b0:	6165      	str	r5, [r4, #20]
 80028b2:	eba5 0509 	sub.w	r5, r5, r9
 80028b6:	60a5      	str	r5, [r4, #8]
 80028b8:	42be      	cmp	r6, r7
 80028ba:	d900      	bls.n	80028be <__ssputs_r+0x86>
 80028bc:	463e      	mov	r6, r7
 80028be:	4632      	mov	r2, r6
 80028c0:	4641      	mov	r1, r8
 80028c2:	6820      	ldr	r0, [r4, #0]
 80028c4:	f000 fac6 	bl	8002e54 <memmove>
 80028c8:	68a3      	ldr	r3, [r4, #8]
 80028ca:	2000      	movs	r0, #0
 80028cc:	1b9b      	subs	r3, r3, r6
 80028ce:	60a3      	str	r3, [r4, #8]
 80028d0:	6823      	ldr	r3, [r4, #0]
 80028d2:	4433      	add	r3, r6
 80028d4:	6023      	str	r3, [r4, #0]
 80028d6:	e7db      	b.n	8002890 <__ssputs_r+0x58>
 80028d8:	462a      	mov	r2, r5
 80028da:	f000 fbb1 	bl	8003040 <_realloc_r>
 80028de:	4606      	mov	r6, r0
 80028e0:	2800      	cmp	r0, #0
 80028e2:	d1e1      	bne.n	80028a8 <__ssputs_r+0x70>
 80028e4:	4650      	mov	r0, sl
 80028e6:	6921      	ldr	r1, [r4, #16]
 80028e8:	f000 face 	bl	8002e88 <_free_r>
 80028ec:	e7c7      	b.n	800287e <__ssputs_r+0x46>
	...

080028f0 <_svfiprintf_r>:
 80028f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028f4:	4698      	mov	r8, r3
 80028f6:	898b      	ldrh	r3, [r1, #12]
 80028f8:	4607      	mov	r7, r0
 80028fa:	061b      	lsls	r3, r3, #24
 80028fc:	460d      	mov	r5, r1
 80028fe:	4614      	mov	r4, r2
 8002900:	b09d      	sub	sp, #116	; 0x74
 8002902:	d50e      	bpl.n	8002922 <_svfiprintf_r+0x32>
 8002904:	690b      	ldr	r3, [r1, #16]
 8002906:	b963      	cbnz	r3, 8002922 <_svfiprintf_r+0x32>
 8002908:	2140      	movs	r1, #64	; 0x40
 800290a:	f000 fb25 	bl	8002f58 <_malloc_r>
 800290e:	6028      	str	r0, [r5, #0]
 8002910:	6128      	str	r0, [r5, #16]
 8002912:	b920      	cbnz	r0, 800291e <_svfiprintf_r+0x2e>
 8002914:	230c      	movs	r3, #12
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	f04f 30ff 	mov.w	r0, #4294967295
 800291c:	e0d1      	b.n	8002ac2 <_svfiprintf_r+0x1d2>
 800291e:	2340      	movs	r3, #64	; 0x40
 8002920:	616b      	str	r3, [r5, #20]
 8002922:	2300      	movs	r3, #0
 8002924:	9309      	str	r3, [sp, #36]	; 0x24
 8002926:	2320      	movs	r3, #32
 8002928:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800292c:	2330      	movs	r3, #48	; 0x30
 800292e:	f04f 0901 	mov.w	r9, #1
 8002932:	f8cd 800c 	str.w	r8, [sp, #12]
 8002936:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002adc <_svfiprintf_r+0x1ec>
 800293a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800293e:	4623      	mov	r3, r4
 8002940:	469a      	mov	sl, r3
 8002942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002946:	b10a      	cbz	r2, 800294c <_svfiprintf_r+0x5c>
 8002948:	2a25      	cmp	r2, #37	; 0x25
 800294a:	d1f9      	bne.n	8002940 <_svfiprintf_r+0x50>
 800294c:	ebba 0b04 	subs.w	fp, sl, r4
 8002950:	d00b      	beq.n	800296a <_svfiprintf_r+0x7a>
 8002952:	465b      	mov	r3, fp
 8002954:	4622      	mov	r2, r4
 8002956:	4629      	mov	r1, r5
 8002958:	4638      	mov	r0, r7
 800295a:	f7ff ff6d 	bl	8002838 <__ssputs_r>
 800295e:	3001      	adds	r0, #1
 8002960:	f000 80aa 	beq.w	8002ab8 <_svfiprintf_r+0x1c8>
 8002964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002966:	445a      	add	r2, fp
 8002968:	9209      	str	r2, [sp, #36]	; 0x24
 800296a:	f89a 3000 	ldrb.w	r3, [sl]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80a2 	beq.w	8002ab8 <_svfiprintf_r+0x1c8>
 8002974:	2300      	movs	r3, #0
 8002976:	f04f 32ff 	mov.w	r2, #4294967295
 800297a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800297e:	f10a 0a01 	add.w	sl, sl, #1
 8002982:	9304      	str	r3, [sp, #16]
 8002984:	9307      	str	r3, [sp, #28]
 8002986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800298a:	931a      	str	r3, [sp, #104]	; 0x68
 800298c:	4654      	mov	r4, sl
 800298e:	2205      	movs	r2, #5
 8002990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002994:	4851      	ldr	r0, [pc, #324]	; (8002adc <_svfiprintf_r+0x1ec>)
 8002996:	f000 fa41 	bl	8002e1c <memchr>
 800299a:	9a04      	ldr	r2, [sp, #16]
 800299c:	b9d8      	cbnz	r0, 80029d6 <_svfiprintf_r+0xe6>
 800299e:	06d0      	lsls	r0, r2, #27
 80029a0:	bf44      	itt	mi
 80029a2:	2320      	movmi	r3, #32
 80029a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029a8:	0711      	lsls	r1, r2, #28
 80029aa:	bf44      	itt	mi
 80029ac:	232b      	movmi	r3, #43	; 0x2b
 80029ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029b2:	f89a 3000 	ldrb.w	r3, [sl]
 80029b6:	2b2a      	cmp	r3, #42	; 0x2a
 80029b8:	d015      	beq.n	80029e6 <_svfiprintf_r+0xf6>
 80029ba:	4654      	mov	r4, sl
 80029bc:	2000      	movs	r0, #0
 80029be:	f04f 0c0a 	mov.w	ip, #10
 80029c2:	9a07      	ldr	r2, [sp, #28]
 80029c4:	4621      	mov	r1, r4
 80029c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029ca:	3b30      	subs	r3, #48	; 0x30
 80029cc:	2b09      	cmp	r3, #9
 80029ce:	d94e      	bls.n	8002a6e <_svfiprintf_r+0x17e>
 80029d0:	b1b0      	cbz	r0, 8002a00 <_svfiprintf_r+0x110>
 80029d2:	9207      	str	r2, [sp, #28]
 80029d4:	e014      	b.n	8002a00 <_svfiprintf_r+0x110>
 80029d6:	eba0 0308 	sub.w	r3, r0, r8
 80029da:	fa09 f303 	lsl.w	r3, r9, r3
 80029de:	4313      	orrs	r3, r2
 80029e0:	46a2      	mov	sl, r4
 80029e2:	9304      	str	r3, [sp, #16]
 80029e4:	e7d2      	b.n	800298c <_svfiprintf_r+0x9c>
 80029e6:	9b03      	ldr	r3, [sp, #12]
 80029e8:	1d19      	adds	r1, r3, #4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	9103      	str	r1, [sp, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bfbb      	ittet	lt
 80029f2:	425b      	neglt	r3, r3
 80029f4:	f042 0202 	orrlt.w	r2, r2, #2
 80029f8:	9307      	strge	r3, [sp, #28]
 80029fa:	9307      	strlt	r3, [sp, #28]
 80029fc:	bfb8      	it	lt
 80029fe:	9204      	strlt	r2, [sp, #16]
 8002a00:	7823      	ldrb	r3, [r4, #0]
 8002a02:	2b2e      	cmp	r3, #46	; 0x2e
 8002a04:	d10c      	bne.n	8002a20 <_svfiprintf_r+0x130>
 8002a06:	7863      	ldrb	r3, [r4, #1]
 8002a08:	2b2a      	cmp	r3, #42	; 0x2a
 8002a0a:	d135      	bne.n	8002a78 <_svfiprintf_r+0x188>
 8002a0c:	9b03      	ldr	r3, [sp, #12]
 8002a0e:	3402      	adds	r4, #2
 8002a10:	1d1a      	adds	r2, r3, #4
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	9203      	str	r2, [sp, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bfb8      	it	lt
 8002a1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a1e:	9305      	str	r3, [sp, #20]
 8002a20:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002ae0 <_svfiprintf_r+0x1f0>
 8002a24:	2203      	movs	r2, #3
 8002a26:	4650      	mov	r0, sl
 8002a28:	7821      	ldrb	r1, [r4, #0]
 8002a2a:	f000 f9f7 	bl	8002e1c <memchr>
 8002a2e:	b140      	cbz	r0, 8002a42 <_svfiprintf_r+0x152>
 8002a30:	2340      	movs	r3, #64	; 0x40
 8002a32:	eba0 000a 	sub.w	r0, r0, sl
 8002a36:	fa03 f000 	lsl.w	r0, r3, r0
 8002a3a:	9b04      	ldr	r3, [sp, #16]
 8002a3c:	3401      	adds	r4, #1
 8002a3e:	4303      	orrs	r3, r0
 8002a40:	9304      	str	r3, [sp, #16]
 8002a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a46:	2206      	movs	r2, #6
 8002a48:	4826      	ldr	r0, [pc, #152]	; (8002ae4 <_svfiprintf_r+0x1f4>)
 8002a4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a4e:	f000 f9e5 	bl	8002e1c <memchr>
 8002a52:	2800      	cmp	r0, #0
 8002a54:	d038      	beq.n	8002ac8 <_svfiprintf_r+0x1d8>
 8002a56:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <_svfiprintf_r+0x1f8>)
 8002a58:	bb1b      	cbnz	r3, 8002aa2 <_svfiprintf_r+0x1b2>
 8002a5a:	9b03      	ldr	r3, [sp, #12]
 8002a5c:	3307      	adds	r3, #7
 8002a5e:	f023 0307 	bic.w	r3, r3, #7
 8002a62:	3308      	adds	r3, #8
 8002a64:	9303      	str	r3, [sp, #12]
 8002a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a68:	4433      	add	r3, r6
 8002a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8002a6c:	e767      	b.n	800293e <_svfiprintf_r+0x4e>
 8002a6e:	460c      	mov	r4, r1
 8002a70:	2001      	movs	r0, #1
 8002a72:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a76:	e7a5      	b.n	80029c4 <_svfiprintf_r+0xd4>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f04f 0c0a 	mov.w	ip, #10
 8002a7e:	4619      	mov	r1, r3
 8002a80:	3401      	adds	r4, #1
 8002a82:	9305      	str	r3, [sp, #20]
 8002a84:	4620      	mov	r0, r4
 8002a86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a8a:	3a30      	subs	r2, #48	; 0x30
 8002a8c:	2a09      	cmp	r2, #9
 8002a8e:	d903      	bls.n	8002a98 <_svfiprintf_r+0x1a8>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0c5      	beq.n	8002a20 <_svfiprintf_r+0x130>
 8002a94:	9105      	str	r1, [sp, #20]
 8002a96:	e7c3      	b.n	8002a20 <_svfiprintf_r+0x130>
 8002a98:	4604      	mov	r4, r0
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002aa0:	e7f0      	b.n	8002a84 <_svfiprintf_r+0x194>
 8002aa2:	ab03      	add	r3, sp, #12
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	462a      	mov	r2, r5
 8002aa8:	4638      	mov	r0, r7
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <_svfiprintf_r+0x1fc>)
 8002aac:	a904      	add	r1, sp, #16
 8002aae:	f3af 8000 	nop.w
 8002ab2:	1c42      	adds	r2, r0, #1
 8002ab4:	4606      	mov	r6, r0
 8002ab6:	d1d6      	bne.n	8002a66 <_svfiprintf_r+0x176>
 8002ab8:	89ab      	ldrh	r3, [r5, #12]
 8002aba:	065b      	lsls	r3, r3, #25
 8002abc:	f53f af2c 	bmi.w	8002918 <_svfiprintf_r+0x28>
 8002ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ac2:	b01d      	add	sp, #116	; 0x74
 8002ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ac8:	ab03      	add	r3, sp, #12
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	462a      	mov	r2, r5
 8002ace:	4638      	mov	r0, r7
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <_svfiprintf_r+0x1fc>)
 8002ad2:	a904      	add	r1, sp, #16
 8002ad4:	f000 f87c 	bl	8002bd0 <_printf_i>
 8002ad8:	e7eb      	b.n	8002ab2 <_svfiprintf_r+0x1c2>
 8002ada:	bf00      	nop
 8002adc:	0800323e 	.word	0x0800323e
 8002ae0:	08003244 	.word	0x08003244
 8002ae4:	08003248 	.word	0x08003248
 8002ae8:	00000000 	.word	0x00000000
 8002aec:	08002839 	.word	0x08002839

08002af0 <_printf_common>:
 8002af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002af4:	4616      	mov	r6, r2
 8002af6:	4699      	mov	r9, r3
 8002af8:	688a      	ldr	r2, [r1, #8]
 8002afa:	690b      	ldr	r3, [r1, #16]
 8002afc:	4607      	mov	r7, r0
 8002afe:	4293      	cmp	r3, r2
 8002b00:	bfb8      	it	lt
 8002b02:	4613      	movlt	r3, r2
 8002b04:	6033      	str	r3, [r6, #0]
 8002b06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b10:	b10a      	cbz	r2, 8002b16 <_printf_common+0x26>
 8002b12:	3301      	adds	r3, #1
 8002b14:	6033      	str	r3, [r6, #0]
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	0699      	lsls	r1, r3, #26
 8002b1a:	bf42      	ittt	mi
 8002b1c:	6833      	ldrmi	r3, [r6, #0]
 8002b1e:	3302      	addmi	r3, #2
 8002b20:	6033      	strmi	r3, [r6, #0]
 8002b22:	6825      	ldr	r5, [r4, #0]
 8002b24:	f015 0506 	ands.w	r5, r5, #6
 8002b28:	d106      	bne.n	8002b38 <_printf_common+0x48>
 8002b2a:	f104 0a19 	add.w	sl, r4, #25
 8002b2e:	68e3      	ldr	r3, [r4, #12]
 8002b30:	6832      	ldr	r2, [r6, #0]
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	42ab      	cmp	r3, r5
 8002b36:	dc28      	bgt.n	8002b8a <_printf_common+0x9a>
 8002b38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b3c:	1e13      	subs	r3, r2, #0
 8002b3e:	6822      	ldr	r2, [r4, #0]
 8002b40:	bf18      	it	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	0692      	lsls	r2, r2, #26
 8002b46:	d42d      	bmi.n	8002ba4 <_printf_common+0xb4>
 8002b48:	4649      	mov	r1, r9
 8002b4a:	4638      	mov	r0, r7
 8002b4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b50:	47c0      	blx	r8
 8002b52:	3001      	adds	r0, #1
 8002b54:	d020      	beq.n	8002b98 <_printf_common+0xa8>
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	68e5      	ldr	r5, [r4, #12]
 8002b5a:	f003 0306 	and.w	r3, r3, #6
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	bf18      	it	ne
 8002b62:	2500      	movne	r5, #0
 8002b64:	6832      	ldr	r2, [r6, #0]
 8002b66:	f04f 0600 	mov.w	r6, #0
 8002b6a:	68a3      	ldr	r3, [r4, #8]
 8002b6c:	bf08      	it	eq
 8002b6e:	1aad      	subeq	r5, r5, r2
 8002b70:	6922      	ldr	r2, [r4, #16]
 8002b72:	bf08      	it	eq
 8002b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	bfc4      	itt	gt
 8002b7c:	1a9b      	subgt	r3, r3, r2
 8002b7e:	18ed      	addgt	r5, r5, r3
 8002b80:	341a      	adds	r4, #26
 8002b82:	42b5      	cmp	r5, r6
 8002b84:	d11a      	bne.n	8002bbc <_printf_common+0xcc>
 8002b86:	2000      	movs	r0, #0
 8002b88:	e008      	b.n	8002b9c <_printf_common+0xac>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4652      	mov	r2, sl
 8002b8e:	4649      	mov	r1, r9
 8002b90:	4638      	mov	r0, r7
 8002b92:	47c0      	blx	r8
 8002b94:	3001      	adds	r0, #1
 8002b96:	d103      	bne.n	8002ba0 <_printf_common+0xb0>
 8002b98:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ba0:	3501      	adds	r5, #1
 8002ba2:	e7c4      	b.n	8002b2e <_printf_common+0x3e>
 8002ba4:	2030      	movs	r0, #48	; 0x30
 8002ba6:	18e1      	adds	r1, r4, r3
 8002ba8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bb2:	4422      	add	r2, r4
 8002bb4:	3302      	adds	r3, #2
 8002bb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bba:	e7c5      	b.n	8002b48 <_printf_common+0x58>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	4622      	mov	r2, r4
 8002bc0:	4649      	mov	r1, r9
 8002bc2:	4638      	mov	r0, r7
 8002bc4:	47c0      	blx	r8
 8002bc6:	3001      	adds	r0, #1
 8002bc8:	d0e6      	beq.n	8002b98 <_printf_common+0xa8>
 8002bca:	3601      	adds	r6, #1
 8002bcc:	e7d9      	b.n	8002b82 <_printf_common+0x92>
	...

08002bd0 <_printf_i>:
 8002bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bd4:	7e0f      	ldrb	r7, [r1, #24]
 8002bd6:	4691      	mov	r9, r2
 8002bd8:	2f78      	cmp	r7, #120	; 0x78
 8002bda:	4680      	mov	r8, r0
 8002bdc:	460c      	mov	r4, r1
 8002bde:	469a      	mov	sl, r3
 8002be0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002be2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002be6:	d807      	bhi.n	8002bf8 <_printf_i+0x28>
 8002be8:	2f62      	cmp	r7, #98	; 0x62
 8002bea:	d80a      	bhi.n	8002c02 <_printf_i+0x32>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	f000 80d9 	beq.w	8002da4 <_printf_i+0x1d4>
 8002bf2:	2f58      	cmp	r7, #88	; 0x58
 8002bf4:	f000 80a4 	beq.w	8002d40 <_printf_i+0x170>
 8002bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c00:	e03a      	b.n	8002c78 <_printf_i+0xa8>
 8002c02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c06:	2b15      	cmp	r3, #21
 8002c08:	d8f6      	bhi.n	8002bf8 <_printf_i+0x28>
 8002c0a:	a101      	add	r1, pc, #4	; (adr r1, 8002c10 <_printf_i+0x40>)
 8002c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c10:	08002c69 	.word	0x08002c69
 8002c14:	08002c7d 	.word	0x08002c7d
 8002c18:	08002bf9 	.word	0x08002bf9
 8002c1c:	08002bf9 	.word	0x08002bf9
 8002c20:	08002bf9 	.word	0x08002bf9
 8002c24:	08002bf9 	.word	0x08002bf9
 8002c28:	08002c7d 	.word	0x08002c7d
 8002c2c:	08002bf9 	.word	0x08002bf9
 8002c30:	08002bf9 	.word	0x08002bf9
 8002c34:	08002bf9 	.word	0x08002bf9
 8002c38:	08002bf9 	.word	0x08002bf9
 8002c3c:	08002d8b 	.word	0x08002d8b
 8002c40:	08002cad 	.word	0x08002cad
 8002c44:	08002d6d 	.word	0x08002d6d
 8002c48:	08002bf9 	.word	0x08002bf9
 8002c4c:	08002bf9 	.word	0x08002bf9
 8002c50:	08002dad 	.word	0x08002dad
 8002c54:	08002bf9 	.word	0x08002bf9
 8002c58:	08002cad 	.word	0x08002cad
 8002c5c:	08002bf9 	.word	0x08002bf9
 8002c60:	08002bf9 	.word	0x08002bf9
 8002c64:	08002d75 	.word	0x08002d75
 8002c68:	682b      	ldr	r3, [r5, #0]
 8002c6a:	1d1a      	adds	r2, r3, #4
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	602a      	str	r2, [r5, #0]
 8002c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0a4      	b.n	8002dc6 <_printf_i+0x1f6>
 8002c7c:	6820      	ldr	r0, [r4, #0]
 8002c7e:	6829      	ldr	r1, [r5, #0]
 8002c80:	0606      	lsls	r6, r0, #24
 8002c82:	f101 0304 	add.w	r3, r1, #4
 8002c86:	d50a      	bpl.n	8002c9e <_printf_i+0xce>
 8002c88:	680e      	ldr	r6, [r1, #0]
 8002c8a:	602b      	str	r3, [r5, #0]
 8002c8c:	2e00      	cmp	r6, #0
 8002c8e:	da03      	bge.n	8002c98 <_printf_i+0xc8>
 8002c90:	232d      	movs	r3, #45	; 0x2d
 8002c92:	4276      	negs	r6, r6
 8002c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c98:	230a      	movs	r3, #10
 8002c9a:	485e      	ldr	r0, [pc, #376]	; (8002e14 <_printf_i+0x244>)
 8002c9c:	e019      	b.n	8002cd2 <_printf_i+0x102>
 8002c9e:	680e      	ldr	r6, [r1, #0]
 8002ca0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ca4:	602b      	str	r3, [r5, #0]
 8002ca6:	bf18      	it	ne
 8002ca8:	b236      	sxthne	r6, r6
 8002caa:	e7ef      	b.n	8002c8c <_printf_i+0xbc>
 8002cac:	682b      	ldr	r3, [r5, #0]
 8002cae:	6820      	ldr	r0, [r4, #0]
 8002cb0:	1d19      	adds	r1, r3, #4
 8002cb2:	6029      	str	r1, [r5, #0]
 8002cb4:	0601      	lsls	r1, r0, #24
 8002cb6:	d501      	bpl.n	8002cbc <_printf_i+0xec>
 8002cb8:	681e      	ldr	r6, [r3, #0]
 8002cba:	e002      	b.n	8002cc2 <_printf_i+0xf2>
 8002cbc:	0646      	lsls	r6, r0, #25
 8002cbe:	d5fb      	bpl.n	8002cb8 <_printf_i+0xe8>
 8002cc0:	881e      	ldrh	r6, [r3, #0]
 8002cc2:	2f6f      	cmp	r7, #111	; 0x6f
 8002cc4:	bf0c      	ite	eq
 8002cc6:	2308      	moveq	r3, #8
 8002cc8:	230a      	movne	r3, #10
 8002cca:	4852      	ldr	r0, [pc, #328]	; (8002e14 <_printf_i+0x244>)
 8002ccc:	2100      	movs	r1, #0
 8002cce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cd2:	6865      	ldr	r5, [r4, #4]
 8002cd4:	2d00      	cmp	r5, #0
 8002cd6:	bfa8      	it	ge
 8002cd8:	6821      	ldrge	r1, [r4, #0]
 8002cda:	60a5      	str	r5, [r4, #8]
 8002cdc:	bfa4      	itt	ge
 8002cde:	f021 0104 	bicge.w	r1, r1, #4
 8002ce2:	6021      	strge	r1, [r4, #0]
 8002ce4:	b90e      	cbnz	r6, 8002cea <_printf_i+0x11a>
 8002ce6:	2d00      	cmp	r5, #0
 8002ce8:	d04d      	beq.n	8002d86 <_printf_i+0x1b6>
 8002cea:	4615      	mov	r5, r2
 8002cec:	fbb6 f1f3 	udiv	r1, r6, r3
 8002cf0:	fb03 6711 	mls	r7, r3, r1, r6
 8002cf4:	5dc7      	ldrb	r7, [r0, r7]
 8002cf6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002cfa:	4637      	mov	r7, r6
 8002cfc:	42bb      	cmp	r3, r7
 8002cfe:	460e      	mov	r6, r1
 8002d00:	d9f4      	bls.n	8002cec <_printf_i+0x11c>
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d10b      	bne.n	8002d1e <_printf_i+0x14e>
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	07de      	lsls	r6, r3, #31
 8002d0a:	d508      	bpl.n	8002d1e <_printf_i+0x14e>
 8002d0c:	6923      	ldr	r3, [r4, #16]
 8002d0e:	6861      	ldr	r1, [r4, #4]
 8002d10:	4299      	cmp	r1, r3
 8002d12:	bfde      	ittt	le
 8002d14:	2330      	movle	r3, #48	; 0x30
 8002d16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d1e:	1b52      	subs	r2, r2, r5
 8002d20:	6122      	str	r2, [r4, #16]
 8002d22:	464b      	mov	r3, r9
 8002d24:	4621      	mov	r1, r4
 8002d26:	4640      	mov	r0, r8
 8002d28:	f8cd a000 	str.w	sl, [sp]
 8002d2c:	aa03      	add	r2, sp, #12
 8002d2e:	f7ff fedf 	bl	8002af0 <_printf_common>
 8002d32:	3001      	adds	r0, #1
 8002d34:	d14c      	bne.n	8002dd0 <_printf_i+0x200>
 8002d36:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3a:	b004      	add	sp, #16
 8002d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d40:	4834      	ldr	r0, [pc, #208]	; (8002e14 <_printf_i+0x244>)
 8002d42:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d46:	6829      	ldr	r1, [r5, #0]
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d4e:	6029      	str	r1, [r5, #0]
 8002d50:	061d      	lsls	r5, r3, #24
 8002d52:	d514      	bpl.n	8002d7e <_printf_i+0x1ae>
 8002d54:	07df      	lsls	r7, r3, #31
 8002d56:	bf44      	itt	mi
 8002d58:	f043 0320 	orrmi.w	r3, r3, #32
 8002d5c:	6023      	strmi	r3, [r4, #0]
 8002d5e:	b91e      	cbnz	r6, 8002d68 <_printf_i+0x198>
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	f023 0320 	bic.w	r3, r3, #32
 8002d66:	6023      	str	r3, [r4, #0]
 8002d68:	2310      	movs	r3, #16
 8002d6a:	e7af      	b.n	8002ccc <_printf_i+0xfc>
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	f043 0320 	orr.w	r3, r3, #32
 8002d72:	6023      	str	r3, [r4, #0]
 8002d74:	2378      	movs	r3, #120	; 0x78
 8002d76:	4828      	ldr	r0, [pc, #160]	; (8002e18 <_printf_i+0x248>)
 8002d78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d7c:	e7e3      	b.n	8002d46 <_printf_i+0x176>
 8002d7e:	0659      	lsls	r1, r3, #25
 8002d80:	bf48      	it	mi
 8002d82:	b2b6      	uxthmi	r6, r6
 8002d84:	e7e6      	b.n	8002d54 <_printf_i+0x184>
 8002d86:	4615      	mov	r5, r2
 8002d88:	e7bb      	b.n	8002d02 <_printf_i+0x132>
 8002d8a:	682b      	ldr	r3, [r5, #0]
 8002d8c:	6826      	ldr	r6, [r4, #0]
 8002d8e:	1d18      	adds	r0, r3, #4
 8002d90:	6961      	ldr	r1, [r4, #20]
 8002d92:	6028      	str	r0, [r5, #0]
 8002d94:	0635      	lsls	r5, r6, #24
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	d501      	bpl.n	8002d9e <_printf_i+0x1ce>
 8002d9a:	6019      	str	r1, [r3, #0]
 8002d9c:	e002      	b.n	8002da4 <_printf_i+0x1d4>
 8002d9e:	0670      	lsls	r0, r6, #25
 8002da0:	d5fb      	bpl.n	8002d9a <_printf_i+0x1ca>
 8002da2:	8019      	strh	r1, [r3, #0]
 8002da4:	2300      	movs	r3, #0
 8002da6:	4615      	mov	r5, r2
 8002da8:	6123      	str	r3, [r4, #16]
 8002daa:	e7ba      	b.n	8002d22 <_printf_i+0x152>
 8002dac:	682b      	ldr	r3, [r5, #0]
 8002dae:	2100      	movs	r1, #0
 8002db0:	1d1a      	adds	r2, r3, #4
 8002db2:	602a      	str	r2, [r5, #0]
 8002db4:	681d      	ldr	r5, [r3, #0]
 8002db6:	6862      	ldr	r2, [r4, #4]
 8002db8:	4628      	mov	r0, r5
 8002dba:	f000 f82f 	bl	8002e1c <memchr>
 8002dbe:	b108      	cbz	r0, 8002dc4 <_printf_i+0x1f4>
 8002dc0:	1b40      	subs	r0, r0, r5
 8002dc2:	6060      	str	r0, [r4, #4]
 8002dc4:	6863      	ldr	r3, [r4, #4]
 8002dc6:	6123      	str	r3, [r4, #16]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dce:	e7a8      	b.n	8002d22 <_printf_i+0x152>
 8002dd0:	462a      	mov	r2, r5
 8002dd2:	4649      	mov	r1, r9
 8002dd4:	4640      	mov	r0, r8
 8002dd6:	6923      	ldr	r3, [r4, #16]
 8002dd8:	47d0      	blx	sl
 8002dda:	3001      	adds	r0, #1
 8002ddc:	d0ab      	beq.n	8002d36 <_printf_i+0x166>
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	079b      	lsls	r3, r3, #30
 8002de2:	d413      	bmi.n	8002e0c <_printf_i+0x23c>
 8002de4:	68e0      	ldr	r0, [r4, #12]
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4298      	cmp	r0, r3
 8002dea:	bfb8      	it	lt
 8002dec:	4618      	movlt	r0, r3
 8002dee:	e7a4      	b.n	8002d3a <_printf_i+0x16a>
 8002df0:	2301      	movs	r3, #1
 8002df2:	4632      	mov	r2, r6
 8002df4:	4649      	mov	r1, r9
 8002df6:	4640      	mov	r0, r8
 8002df8:	47d0      	blx	sl
 8002dfa:	3001      	adds	r0, #1
 8002dfc:	d09b      	beq.n	8002d36 <_printf_i+0x166>
 8002dfe:	3501      	adds	r5, #1
 8002e00:	68e3      	ldr	r3, [r4, #12]
 8002e02:	9903      	ldr	r1, [sp, #12]
 8002e04:	1a5b      	subs	r3, r3, r1
 8002e06:	42ab      	cmp	r3, r5
 8002e08:	dcf2      	bgt.n	8002df0 <_printf_i+0x220>
 8002e0a:	e7eb      	b.n	8002de4 <_printf_i+0x214>
 8002e0c:	2500      	movs	r5, #0
 8002e0e:	f104 0619 	add.w	r6, r4, #25
 8002e12:	e7f5      	b.n	8002e00 <_printf_i+0x230>
 8002e14:	0800324f 	.word	0x0800324f
 8002e18:	08003260 	.word	0x08003260

08002e1c <memchr>:
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	b510      	push	{r4, lr}
 8002e20:	b2c9      	uxtb	r1, r1
 8002e22:	4402      	add	r2, r0
 8002e24:	4293      	cmp	r3, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	d101      	bne.n	8002e2e <memchr+0x12>
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	e003      	b.n	8002e36 <memchr+0x1a>
 8002e2e:	7804      	ldrb	r4, [r0, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	428c      	cmp	r4, r1
 8002e34:	d1f6      	bne.n	8002e24 <memchr+0x8>
 8002e36:	bd10      	pop	{r4, pc}

08002e38 <memcpy>:
 8002e38:	440a      	add	r2, r1
 8002e3a:	4291      	cmp	r1, r2
 8002e3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e40:	d100      	bne.n	8002e44 <memcpy+0xc>
 8002e42:	4770      	bx	lr
 8002e44:	b510      	push	{r4, lr}
 8002e46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e4a:	4291      	cmp	r1, r2
 8002e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e50:	d1f9      	bne.n	8002e46 <memcpy+0xe>
 8002e52:	bd10      	pop	{r4, pc}

08002e54 <memmove>:
 8002e54:	4288      	cmp	r0, r1
 8002e56:	b510      	push	{r4, lr}
 8002e58:	eb01 0402 	add.w	r4, r1, r2
 8002e5c:	d902      	bls.n	8002e64 <memmove+0x10>
 8002e5e:	4284      	cmp	r4, r0
 8002e60:	4623      	mov	r3, r4
 8002e62:	d807      	bhi.n	8002e74 <memmove+0x20>
 8002e64:	1e43      	subs	r3, r0, #1
 8002e66:	42a1      	cmp	r1, r4
 8002e68:	d008      	beq.n	8002e7c <memmove+0x28>
 8002e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e72:	e7f8      	b.n	8002e66 <memmove+0x12>
 8002e74:	4601      	mov	r1, r0
 8002e76:	4402      	add	r2, r0
 8002e78:	428a      	cmp	r2, r1
 8002e7a:	d100      	bne.n	8002e7e <memmove+0x2a>
 8002e7c:	bd10      	pop	{r4, pc}
 8002e7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e86:	e7f7      	b.n	8002e78 <memmove+0x24>

08002e88 <_free_r>:
 8002e88:	b538      	push	{r3, r4, r5, lr}
 8002e8a:	4605      	mov	r5, r0
 8002e8c:	2900      	cmp	r1, #0
 8002e8e:	d040      	beq.n	8002f12 <_free_r+0x8a>
 8002e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e94:	1f0c      	subs	r4, r1, #4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bfb8      	it	lt
 8002e9a:	18e4      	addlt	r4, r4, r3
 8002e9c:	f000 f910 	bl	80030c0 <__malloc_lock>
 8002ea0:	4a1c      	ldr	r2, [pc, #112]	; (8002f14 <_free_r+0x8c>)
 8002ea2:	6813      	ldr	r3, [r2, #0]
 8002ea4:	b933      	cbnz	r3, 8002eb4 <_free_r+0x2c>
 8002ea6:	6063      	str	r3, [r4, #4]
 8002ea8:	6014      	str	r4, [r2, #0]
 8002eaa:	4628      	mov	r0, r5
 8002eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002eb0:	f000 b90c 	b.w	80030cc <__malloc_unlock>
 8002eb4:	42a3      	cmp	r3, r4
 8002eb6:	d908      	bls.n	8002eca <_free_r+0x42>
 8002eb8:	6820      	ldr	r0, [r4, #0]
 8002eba:	1821      	adds	r1, r4, r0
 8002ebc:	428b      	cmp	r3, r1
 8002ebe:	bf01      	itttt	eq
 8002ec0:	6819      	ldreq	r1, [r3, #0]
 8002ec2:	685b      	ldreq	r3, [r3, #4]
 8002ec4:	1809      	addeq	r1, r1, r0
 8002ec6:	6021      	streq	r1, [r4, #0]
 8002ec8:	e7ed      	b.n	8002ea6 <_free_r+0x1e>
 8002eca:	461a      	mov	r2, r3
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	b10b      	cbz	r3, 8002ed4 <_free_r+0x4c>
 8002ed0:	42a3      	cmp	r3, r4
 8002ed2:	d9fa      	bls.n	8002eca <_free_r+0x42>
 8002ed4:	6811      	ldr	r1, [r2, #0]
 8002ed6:	1850      	adds	r0, r2, r1
 8002ed8:	42a0      	cmp	r0, r4
 8002eda:	d10b      	bne.n	8002ef4 <_free_r+0x6c>
 8002edc:	6820      	ldr	r0, [r4, #0]
 8002ede:	4401      	add	r1, r0
 8002ee0:	1850      	adds	r0, r2, r1
 8002ee2:	4283      	cmp	r3, r0
 8002ee4:	6011      	str	r1, [r2, #0]
 8002ee6:	d1e0      	bne.n	8002eaa <_free_r+0x22>
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4401      	add	r1, r0
 8002eee:	6011      	str	r1, [r2, #0]
 8002ef0:	6053      	str	r3, [r2, #4]
 8002ef2:	e7da      	b.n	8002eaa <_free_r+0x22>
 8002ef4:	d902      	bls.n	8002efc <_free_r+0x74>
 8002ef6:	230c      	movs	r3, #12
 8002ef8:	602b      	str	r3, [r5, #0]
 8002efa:	e7d6      	b.n	8002eaa <_free_r+0x22>
 8002efc:	6820      	ldr	r0, [r4, #0]
 8002efe:	1821      	adds	r1, r4, r0
 8002f00:	428b      	cmp	r3, r1
 8002f02:	bf01      	itttt	eq
 8002f04:	6819      	ldreq	r1, [r3, #0]
 8002f06:	685b      	ldreq	r3, [r3, #4]
 8002f08:	1809      	addeq	r1, r1, r0
 8002f0a:	6021      	streq	r1, [r4, #0]
 8002f0c:	6063      	str	r3, [r4, #4]
 8002f0e:	6054      	str	r4, [r2, #4]
 8002f10:	e7cb      	b.n	8002eaa <_free_r+0x22>
 8002f12:	bd38      	pop	{r3, r4, r5, pc}
 8002f14:	20000190 	.word	0x20000190

08002f18 <sbrk_aligned>:
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	4e0e      	ldr	r6, [pc, #56]	; (8002f54 <sbrk_aligned+0x3c>)
 8002f1c:	460c      	mov	r4, r1
 8002f1e:	6831      	ldr	r1, [r6, #0]
 8002f20:	4605      	mov	r5, r0
 8002f22:	b911      	cbnz	r1, 8002f2a <sbrk_aligned+0x12>
 8002f24:	f000 f8bc 	bl	80030a0 <_sbrk_r>
 8002f28:	6030      	str	r0, [r6, #0]
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	f000 f8b7 	bl	80030a0 <_sbrk_r>
 8002f32:	1c43      	adds	r3, r0, #1
 8002f34:	d00a      	beq.n	8002f4c <sbrk_aligned+0x34>
 8002f36:	1cc4      	adds	r4, r0, #3
 8002f38:	f024 0403 	bic.w	r4, r4, #3
 8002f3c:	42a0      	cmp	r0, r4
 8002f3e:	d007      	beq.n	8002f50 <sbrk_aligned+0x38>
 8002f40:	1a21      	subs	r1, r4, r0
 8002f42:	4628      	mov	r0, r5
 8002f44:	f000 f8ac 	bl	80030a0 <_sbrk_r>
 8002f48:	3001      	adds	r0, #1
 8002f4a:	d101      	bne.n	8002f50 <sbrk_aligned+0x38>
 8002f4c:	f04f 34ff 	mov.w	r4, #4294967295
 8002f50:	4620      	mov	r0, r4
 8002f52:	bd70      	pop	{r4, r5, r6, pc}
 8002f54:	20000194 	.word	0x20000194

08002f58 <_malloc_r>:
 8002f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f5c:	1ccd      	adds	r5, r1, #3
 8002f5e:	f025 0503 	bic.w	r5, r5, #3
 8002f62:	3508      	adds	r5, #8
 8002f64:	2d0c      	cmp	r5, #12
 8002f66:	bf38      	it	cc
 8002f68:	250c      	movcc	r5, #12
 8002f6a:	2d00      	cmp	r5, #0
 8002f6c:	4607      	mov	r7, r0
 8002f6e:	db01      	blt.n	8002f74 <_malloc_r+0x1c>
 8002f70:	42a9      	cmp	r1, r5
 8002f72:	d905      	bls.n	8002f80 <_malloc_r+0x28>
 8002f74:	230c      	movs	r3, #12
 8002f76:	2600      	movs	r6, #0
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f80:	4e2e      	ldr	r6, [pc, #184]	; (800303c <_malloc_r+0xe4>)
 8002f82:	f000 f89d 	bl	80030c0 <__malloc_lock>
 8002f86:	6833      	ldr	r3, [r6, #0]
 8002f88:	461c      	mov	r4, r3
 8002f8a:	bb34      	cbnz	r4, 8002fda <_malloc_r+0x82>
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	4638      	mov	r0, r7
 8002f90:	f7ff ffc2 	bl	8002f18 <sbrk_aligned>
 8002f94:	1c43      	adds	r3, r0, #1
 8002f96:	4604      	mov	r4, r0
 8002f98:	d14d      	bne.n	8003036 <_malloc_r+0xde>
 8002f9a:	6834      	ldr	r4, [r6, #0]
 8002f9c:	4626      	mov	r6, r4
 8002f9e:	2e00      	cmp	r6, #0
 8002fa0:	d140      	bne.n	8003024 <_malloc_r+0xcc>
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	4631      	mov	r1, r6
 8002fa6:	4638      	mov	r0, r7
 8002fa8:	eb04 0803 	add.w	r8, r4, r3
 8002fac:	f000 f878 	bl	80030a0 <_sbrk_r>
 8002fb0:	4580      	cmp	r8, r0
 8002fb2:	d13a      	bne.n	800302a <_malloc_r+0xd2>
 8002fb4:	6821      	ldr	r1, [r4, #0]
 8002fb6:	3503      	adds	r5, #3
 8002fb8:	1a6d      	subs	r5, r5, r1
 8002fba:	f025 0503 	bic.w	r5, r5, #3
 8002fbe:	3508      	adds	r5, #8
 8002fc0:	2d0c      	cmp	r5, #12
 8002fc2:	bf38      	it	cc
 8002fc4:	250c      	movcc	r5, #12
 8002fc6:	4638      	mov	r0, r7
 8002fc8:	4629      	mov	r1, r5
 8002fca:	f7ff ffa5 	bl	8002f18 <sbrk_aligned>
 8002fce:	3001      	adds	r0, #1
 8002fd0:	d02b      	beq.n	800302a <_malloc_r+0xd2>
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	442b      	add	r3, r5
 8002fd6:	6023      	str	r3, [r4, #0]
 8002fd8:	e00e      	b.n	8002ff8 <_malloc_r+0xa0>
 8002fda:	6822      	ldr	r2, [r4, #0]
 8002fdc:	1b52      	subs	r2, r2, r5
 8002fde:	d41e      	bmi.n	800301e <_malloc_r+0xc6>
 8002fe0:	2a0b      	cmp	r2, #11
 8002fe2:	d916      	bls.n	8003012 <_malloc_r+0xba>
 8002fe4:	1961      	adds	r1, r4, r5
 8002fe6:	42a3      	cmp	r3, r4
 8002fe8:	6025      	str	r5, [r4, #0]
 8002fea:	bf18      	it	ne
 8002fec:	6059      	strne	r1, [r3, #4]
 8002fee:	6863      	ldr	r3, [r4, #4]
 8002ff0:	bf08      	it	eq
 8002ff2:	6031      	streq	r1, [r6, #0]
 8002ff4:	5162      	str	r2, [r4, r5]
 8002ff6:	604b      	str	r3, [r1, #4]
 8002ff8:	4638      	mov	r0, r7
 8002ffa:	f104 060b 	add.w	r6, r4, #11
 8002ffe:	f000 f865 	bl	80030cc <__malloc_unlock>
 8003002:	f026 0607 	bic.w	r6, r6, #7
 8003006:	1d23      	adds	r3, r4, #4
 8003008:	1af2      	subs	r2, r6, r3
 800300a:	d0b6      	beq.n	8002f7a <_malloc_r+0x22>
 800300c:	1b9b      	subs	r3, r3, r6
 800300e:	50a3      	str	r3, [r4, r2]
 8003010:	e7b3      	b.n	8002f7a <_malloc_r+0x22>
 8003012:	6862      	ldr	r2, [r4, #4]
 8003014:	42a3      	cmp	r3, r4
 8003016:	bf0c      	ite	eq
 8003018:	6032      	streq	r2, [r6, #0]
 800301a:	605a      	strne	r2, [r3, #4]
 800301c:	e7ec      	b.n	8002ff8 <_malloc_r+0xa0>
 800301e:	4623      	mov	r3, r4
 8003020:	6864      	ldr	r4, [r4, #4]
 8003022:	e7b2      	b.n	8002f8a <_malloc_r+0x32>
 8003024:	4634      	mov	r4, r6
 8003026:	6876      	ldr	r6, [r6, #4]
 8003028:	e7b9      	b.n	8002f9e <_malloc_r+0x46>
 800302a:	230c      	movs	r3, #12
 800302c:	4638      	mov	r0, r7
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	f000 f84c 	bl	80030cc <__malloc_unlock>
 8003034:	e7a1      	b.n	8002f7a <_malloc_r+0x22>
 8003036:	6025      	str	r5, [r4, #0]
 8003038:	e7de      	b.n	8002ff8 <_malloc_r+0xa0>
 800303a:	bf00      	nop
 800303c:	20000190 	.word	0x20000190

08003040 <_realloc_r>:
 8003040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003044:	4680      	mov	r8, r0
 8003046:	4614      	mov	r4, r2
 8003048:	460e      	mov	r6, r1
 800304a:	b921      	cbnz	r1, 8003056 <_realloc_r+0x16>
 800304c:	4611      	mov	r1, r2
 800304e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003052:	f7ff bf81 	b.w	8002f58 <_malloc_r>
 8003056:	b92a      	cbnz	r2, 8003064 <_realloc_r+0x24>
 8003058:	f7ff ff16 	bl	8002e88 <_free_r>
 800305c:	4625      	mov	r5, r4
 800305e:	4628      	mov	r0, r5
 8003060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003064:	f000 f838 	bl	80030d8 <_malloc_usable_size_r>
 8003068:	4284      	cmp	r4, r0
 800306a:	4607      	mov	r7, r0
 800306c:	d802      	bhi.n	8003074 <_realloc_r+0x34>
 800306e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003072:	d812      	bhi.n	800309a <_realloc_r+0x5a>
 8003074:	4621      	mov	r1, r4
 8003076:	4640      	mov	r0, r8
 8003078:	f7ff ff6e 	bl	8002f58 <_malloc_r>
 800307c:	4605      	mov	r5, r0
 800307e:	2800      	cmp	r0, #0
 8003080:	d0ed      	beq.n	800305e <_realloc_r+0x1e>
 8003082:	42bc      	cmp	r4, r7
 8003084:	4622      	mov	r2, r4
 8003086:	4631      	mov	r1, r6
 8003088:	bf28      	it	cs
 800308a:	463a      	movcs	r2, r7
 800308c:	f7ff fed4 	bl	8002e38 <memcpy>
 8003090:	4631      	mov	r1, r6
 8003092:	4640      	mov	r0, r8
 8003094:	f7ff fef8 	bl	8002e88 <_free_r>
 8003098:	e7e1      	b.n	800305e <_realloc_r+0x1e>
 800309a:	4635      	mov	r5, r6
 800309c:	e7df      	b.n	800305e <_realloc_r+0x1e>
	...

080030a0 <_sbrk_r>:
 80030a0:	b538      	push	{r3, r4, r5, lr}
 80030a2:	2300      	movs	r3, #0
 80030a4:	4d05      	ldr	r5, [pc, #20]	; (80030bc <_sbrk_r+0x1c>)
 80030a6:	4604      	mov	r4, r0
 80030a8:	4608      	mov	r0, r1
 80030aa:	602b      	str	r3, [r5, #0]
 80030ac:	f7fd fbe8 	bl	8000880 <_sbrk>
 80030b0:	1c43      	adds	r3, r0, #1
 80030b2:	d102      	bne.n	80030ba <_sbrk_r+0x1a>
 80030b4:	682b      	ldr	r3, [r5, #0]
 80030b6:	b103      	cbz	r3, 80030ba <_sbrk_r+0x1a>
 80030b8:	6023      	str	r3, [r4, #0]
 80030ba:	bd38      	pop	{r3, r4, r5, pc}
 80030bc:	20000198 	.word	0x20000198

080030c0 <__malloc_lock>:
 80030c0:	4801      	ldr	r0, [pc, #4]	; (80030c8 <__malloc_lock+0x8>)
 80030c2:	f000 b811 	b.w	80030e8 <__retarget_lock_acquire_recursive>
 80030c6:	bf00      	nop
 80030c8:	2000019c 	.word	0x2000019c

080030cc <__malloc_unlock>:
 80030cc:	4801      	ldr	r0, [pc, #4]	; (80030d4 <__malloc_unlock+0x8>)
 80030ce:	f000 b80c 	b.w	80030ea <__retarget_lock_release_recursive>
 80030d2:	bf00      	nop
 80030d4:	2000019c 	.word	0x2000019c

080030d8 <_malloc_usable_size_r>:
 80030d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030dc:	1f18      	subs	r0, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bfbc      	itt	lt
 80030e2:	580b      	ldrlt	r3, [r1, r0]
 80030e4:	18c0      	addlt	r0, r0, r3
 80030e6:	4770      	bx	lr

080030e8 <__retarget_lock_acquire_recursive>:
 80030e8:	4770      	bx	lr

080030ea <__retarget_lock_release_recursive>:
 80030ea:	4770      	bx	lr

080030ec <_init>:
 80030ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ee:	bf00      	nop
 80030f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f2:	bc08      	pop	{r3}
 80030f4:	469e      	mov	lr, r3
 80030f6:	4770      	bx	lr

080030f8 <_fini>:
 80030f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fa:	bf00      	nop
 80030fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fe:	bc08      	pop	{r3}
 8003100:	469e      	mov	lr, r3
 8003102:	4770      	bx	lr
